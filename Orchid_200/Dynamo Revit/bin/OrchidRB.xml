<?xml version="1.0"?>
<doc>
    <assembly>
        <name>OrchidRB</name>
    </assembly>
    <members>
        <member name="M:Orchid.About.Orchid">
            <summary>
            About the package.
            </summary>
            <returns name="watch">Add a watch node!</returns>
        </member>
        <member name="M:Orchid.About.Update">
            <summary>
            Verify this version of Orchid to see if an update is available.
            </summary>
            <returns name="watch">Add a watch node!</returns>
        </member>
        <member name="M:Orchid.Applications.Sigma.ComponentClearing(Sigma.ISigmaItem)">
            Clean Sigma from given root
        </member>
        <member name="M:Orchid.Applications.Sigma.Document(System.String)">
            <summary>
            Open Sigma Estimate project file or create a new empty Sigma document 
            </summary>
            <param name="file">Path and Filename for Sigma Estimate document (file) including extension!, default will create a new empty Sigma document</param>
            <returns name="document">Sigma Estimate document</returns>
        </member>
        <member name="M:Orchid.Applications.Sigma.SetData(System.Object,System.Collections.IList,System.Boolean,System.Collections.IList)">
            <summary>
            Set Revit data in Sigma Estimate project
            </summary>
            <param name="document">Sigma Estimate document, default is the active Sigma project</param>
            <param name="branchRoot">Branch root where data should be written (or None)</param>
            <param name="clearing">Cleaning sub component(s)</param>
            <param name="component">Data from (Sigma) Component node</param>
            <returns name="watch">Add a watch node to verify the output</returns>
        </member>
        <member name="M:Orchid.Applications.Sigma.Clearing(System.Object,System.Collections.IList)">
            <summary>
            Clear a branch in Sigma Estimate for sub component
            </summary>
            <param name="document">Sigma Estimate document, default is the active Sigma project</param>
            <param name="branch">Branch where sub component is going to be cleaned</param>
            <returns name="watch">Add a watch node to verify the output</returns>
        </member>
        <member name="M:Orchid.Applications.Sigma.Delete(System.Object,System.Collections.IList)">
            <summary>
            Delete a branch in Sigma Estimate
            </summary>
            <param name="document">Sigma Estimate document, default is the active Sigma project</param>
            <param name="branch">Branch to be deleted</param>
            <returns name="watch">Add a watch node to verify the output</returns>
        </member>
        <member name="M:Orchid.Applications.Sigma.Component(System.Collections.IList,System.Collections.Generic.List{Revit.Elements.Element},System.String,System.Collections.Generic.List{System.Double},System.String,System.Double,System.Boolean)">
            <summary>
            Create Sigma Estimate component data
            </summary>
            <param name="componentTree">List containing the structure as strings {"number","text"}\nAt least one 'level' is needed!</param>
            <param name="element">Element(s)</param>
            <param name="code">Element identifier for Sigma</param>
            <param name="quantity">Quantity as numeric value</param>
            <param name="sigmaUnit">Unit identifier for Sigma</param>
            <param name="sigmaRegulation">Regulation for the Sigma Component</param>
            <param name="instance">Component as instances or summarized/nTrue select Data to be Instances, False select Data to be summarized</param>
            <returns name="component">Component</returns>
        </member>
        <member name="M:Orchid.Core.Clipboard.CopyTo(System.Collections.IList)">
            <summary>
            Copy object to Clipboard. Can copy elements from a 1D list, but not from 2D..nD!
            If List Level is used, then will the last item be available in the clipboard.
            </summary>
            <param name="element">element</param>
            <returns name="watch">Add a watch node to verify the output</returns>
        </member>
        <member name="M:Orchid.Core.DataStream.Await(System.Object,System.Collections.IList)">
            <summary>
            Await a data stream before passing another data stream
            </summary>
            <param name="pass">Data to pass</param>
            <param name="waitFor">Data object to wait for</param>
            <returns name="pass">Passed data</returns>
        </member>
        <member name="M:Orchid.Core.DataStream.Circut(System.Object,System.Boolean)">
            <summary>
            Set a state (true/false) to pass a data stream in a circut
            </summary>
            <param name="pass">Data to pass</param>
            <param name="state">Set a bool value for the state</param>
            <returns name="pass">Passed data</returns>
        </member>
        <member name="P:Orchid.Core.Directory.Current">
            <summary>
            Get current directory
            </summary>
            <returns name="directory">Directory</returns>
        </member>
        <member name="M:Orchid.Core.Directory.FromPath(System.String)">
            <summary>
            Creates a directory object from a path
            </summary>
            <param name="path">Path to the directory</param>
            <returns name="directory">Directory object</returns>
        </member>
        <member name="M:Orchid.Core.Directory.Contents(System.String,System.String,System.Boolean)">
            <summary>
            Get the files in a directory and its subdirectories.
            Use string for extension type, default is * for all files!
            If files are are readonly but not hidden, are they included.
            If files are both hidden or readonly files
            (and thereby system files) are they left out.
            </summary>
            <param name="directory">Directory to get contents from</param>
            <param name="searchString">Search string used to filter results</param>
            <param name="deepSearch">Search option used to search in all subfolders</param>
            <returns name="file">File</returns>
        </member>
        <member name="M:Orchid.Core.Number.ToDouble(System.Int32)">
            <summary>
            Convert number to integer.
            </summary>
            <param name="number">number as integer</param>
            <returns name="double">number as double</returns>
        </member>
        <member name="M:Orchid.Core.Number.ToInteger(System.Double)">
            <summary>
            Convert number to double.
            </summary>
            <param name="number">number as double</param>
            <returns name="int">number as integer</returns>
        </member>
        <member name="M:Orchid.Core.File.FromPath(System.String)">
            <summary>
            Get file from a path
            </summary>
            <param name="path">Path to the file</param>
            <returns name="file">File object</returns>
        </member>
        <member name="M:Orchid.Core.File.Rename(System.String,System.String,System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String})">
            <summary>
            Rename file
            </summary>
            <param name="directory">The directory path as string</param>
            <param name="extension">The file extension</param>
            <param name="sourceName">The name of the source file</param>
            <param name="targetName">The name of the target file</param>
            <returns name="file">File</returns>
        </member>
        <member name="M:Orchid.Core.File.Info(System.String)">
            <summary>
            Get file(s) info
            </summary>
            <param name="file">File incl. path</param>
            <returns name="info">File info</returns>
        </member>
        <member name="M:Orchid.Core.File.LoadFamily(System.Collections.Generic.List{System.String})">
            <summary>
            Load family by file name, same core process as RevitFamily.LoadFamily
            </summary>
            <param name="family">Path to the family file(s)</param>
            <returns name="Family">Family</returns>
        </member>
        <member name="M:Orchid.Core.File.LoadFamily(System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String})">
            <summary>
            Open document and load family by path, existing families will be overwritten,
            and families is upgraded if needed. Documents will be saved and closed.
            </summary>
            <param name="document">Path to the documents file(s)</param>
            <param name="family">Path to the family file(s)</param>
            <returns name="Family">Family</returns>
        </member>
        <member name="M:Orchid.Core.File.NewProject(System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String})">
            <summary>
            Create new project by name
            </summary>
            <param name="file">File(s), must be new project file name(s) incl. path</param>
            <param name="template">Template(s) incl. path</param>
            <returns name="watch">Add a watch node to verify the output</returns>
        </member>
        <member name="M:Orchid.Core.File.SaveFamily(System.String,System.Collections.Generic.List{Revit.Elements.Family},System.Boolean,System.Boolean)">
            <summary>
            Save family by name
            </summary>
            <param name="path">Path to save file(s)</param>
            <param name="family">Family to be saved</param>
            <param name="subfolder">Create subfolder by category?</param>
            <param name="overwrite">Overwrite existing families?</param>
            <returns name="watch">Add a watch node to verify the output</returns>
        </member>
        <member name="M:Orchid.Core.List.AllTrue(System.Collections.Generic.List{System.Boolean})">
            <summary>
            Determines if all items in the given list has a true value.
            </summary>
            <param name="list">List to be checked on whether all items are true</param>
            <returns name="bool">Whether all items are true</returns>
            <search>test,all,true,istrue</search>
        </member>
        <member name="M:Orchid.Core.List.AnyTrue(System.Collections.Generic.List{System.Boolean})">
            <summary>
            Determines if any items in the given list has a true value.
            </summary>
            <param name="list">List to be checked on whether any items are true</param>
            <returns name="bool">Whether any items are true</returns>
            <search>test,any,true,istrue</search>
        </member>
        <member name="M:Orchid.Core.List.AllFalse(System.Collections.Generic.List{System.Boolean})">
            <summary>
            Determines if all items in the given list has a false value.
            </summary>
            <param name="list">List to be checked on whether all items are false</param>
            <returns name="bool">Whether all items are false</returns>
            <search>test,all,false,isfalse</search>
        </member>
        <member name="M:Orchid.Core.List.AnyFalse(System.Collections.Generic.List{System.Boolean})">
            <summary>
            Determines if any items in the given list has a false value.
            </summary>
            <param name="list">List to be checked on whether any items are false</param>
            <returns name="bool">Whether all items are false</returns>
            <search>test,any,false,isfalse</search>
        </member>
        <member name="M:Orchid.Core.List.Search(System.Collections.IEnumerable)">
            Search values, send default if values not exist
        </member>
        <member name="M:Orchid.Core.List.CleanUtil(System.Collections.IList,System.Collections.IList)">
            Cleaning nD list
        </member>
        <member name="M:Orchid.Core.List.ReplaceUtil(System.Collections.IList,System.Collections.IList,System.Object)">
            Replacing nD list
        </member>
        <member name="M:Orchid.Core.List.Clean(System.Collections.IList,System.Collections.IList)">
            <summary>
            Clean nD list
            </summary>
            <param name="list">List</param>
            <param name="searchFor">Item(s) to search for</param>
            <returns name="list">List</returns>
        </member>
        <member name="M:Orchid.Core.List.Replace(System.Collections.IList,System.Collections.IList,System.Object)">
            <summary>
            Replace item in nD list
            </summary>
            <param name="list">List</param>
            <param name="searchFor">Item(s) to search for</param>
            <param name="replaceWith">Replacement value</param>
            <returns name="list">List</returns>
        </member>
        <member name="M:Orchid.Core.List.Sort(System.Collections.IList,System.Boolean)">
            <summary>
            Sort elements using the PC 'locale'. Sort elements recursively
            preserving elements types and elements structure.
            </summary>
            <param name="list">List of values</param>
            <param name="descending">Return the list in descending order?</param>
            <returns name="list">List</returns>
        </member>
        <member name="M:Orchid.Core.List.SortNatural(System.Collections.IList,System.Boolean)">
            <summary>
            Sort elements using the PC 'locale'. Sort elements recursively
            preserving elements types and elements structure.Sort elements in natural
            sort order by splitting digits from string and add leading zeros.
            http://en.wikipedia.org/wiki/Natural_sort_order
            </summary>
            <param name="list">list of values</param>
            <param name="descending">Return the list in descending order?</param>
            <returns name="list">List</returns>
        </member>
        <member name="M:Orchid.Core.List.GroupBySortedKey(System.Collections.IList,System.Collections.IList,System.Boolean)">
            <summary>
            Group items into sublists based on their like sorted key values
            </summary>
            <param name="list">List of items to group as sublists</param>
            <param name="keys">Key values, one per item in the input list, used for sorting and grouping the items</param>
            <param name="descending">Return the list in descending order?</param>
            <returns name="groups">list of sublists, with items grouped by like sorted key values</returns>
            <returns name="unique keys">sorted key value corresponding to each group</returns>
            <search>list;key;sort;group;sortbykey;groupbykey;order</search>
        </member>
        <member name="M:Orchid.Core.List.GroupBySortedKey(System.Collections.IList,System.Collections.IList,System.Collections.IList)">
            <summary>
            Group items and keys into sublists based on their sorted unique key values
            </summary>
            <param name="items">List of items to group as sublists</param>
            <param name="keys">List of keys to group as sublists, one key per item in the input list</param>
            <param name="sortedKeys">Sorted unique keys, used for grouping the items</param>
            <returns name="grouped items">list of sublists, with items grouped by the sorted key values</returns>
            <returns name="grouped keys">list of sublists, with keys grouped by the sorted key values</returns>
            <search>list;group;sort;key;sorted;groupby;order</search>
        </member>
        <member name="M:Orchid.Core.List.SortGroupByKey(System.Collections.IList,System.Collections.IList,System.Collections.IList)">
            <summary>
            Sort and group items into sub-lists based on their like key values
            </summary>
            <param name="list">List of items to group as sublists</param>
            <param name="keys">Key values, one per item in the input list, used for grouping the items</param>
            <param name="sortedKeys">Sorted unique keys, used for grouping the items by their key</param>
            <returns name="groups">list of sublists, with items grouped by like key values</returns>
            <returns name="unique keys">key value corresponding to each group</returns>
            <search>list;sort;group;sortbykey;groupbykey;</search>
        </member>
        <member name="M:Orchid.Core.List.IndexOf(System.Collections.IList,System.Object)">
            <summary>
            Returns the index (the full path) of the member in nD list
            </summary>
            <param name="list">list of values</param>
            <param name="element">Element</param>
            <returns name="int">List of indicies</returns>
        </member>
        <member name="M:Orchid.Core.List.GetItemAtIndex(System.Collections.IList,System.Collections.IList)">
            <summary>
            Get an item from the given list that's located at the specified index (the full path) in nD list
            </summary>
            <param name="list">list to fetch an item from</param>
            <param name="index">index of the item to be fetched</param>
            <returns name="item">item in the list at the given index</returns>
        </member>
        <member name="M:Orchid.Core.List.ReplaceItemAtIndex(System.Collections.IList,System.Collections.IList,System.Object)">
            <summary>
            Replace an item from the given list that's located at the specified index (the full path) in nD list
            </summary>
            <param name="list">list to replace an item in</param>
            <param name="index">index of the item to be replaced</param>
            <param name="item">the item to insert</param>
            <returns name="list">List</returns>
        </member>
        <member name="M:Orchid.Core.List.FilterByKey(System.Collections.IList,System.Collections.IList,System.Collections.IList,System.Collections.IList)">
            <summary>
            Filter two list items based on common key values
            </summary>
            <param name="list1">Items from list 1</param>
            <param name="key1">Keys from list 1</param>
            <param name="list2">Items from list 2</param>
            <param name="key2">Keys from list 2</param>
            <returns name="listA">ListA</returns>
            <returns name="listB">ListB</returns>
            <returns name="key">Key</returns>
        </member>
        <member name="M:Orchid.Core.List.SummationByKey(System.Collections.IList,System.Collections.IList)">
            <summary>
            Summarize items and group by key values
            </summary>
            <param name="list">List of items as int and double to group and summarize as sublists</param>
            <param name="keys">Key values, one per item in the input list, used for grouping the items</param>
            <returns name="summarized groups">list of sublist, with items grouped and summarized by like key values</returns>
            <returns name="unique keys">key value corresponding to each group</returns>
            <search>list;group;summarize;summationbykey;</search>
        </member>
        <member name="M:Orchid.Core.List.GroupByEqual(System.Collections.IList)">
            <summary>
            Group items into sub-lists based on being equal
            </summary>
            <param name="list">List of items to group as sublists</param>
            <returns name="groups">list of sublist, with items grouped by like key values</returns>
            <returns name="unique keys">key value corresponding to each group</returns>
            <search>list;group;equal;groupbyequal;</search>
        </member>
        <member name="M:Orchid.Core.Math.Random(System.Int32)">
            <summary>
            Generates a random double in the given range (0, x).
            </summary>
            <param name="range">Range to slice the random numbers into.</param>
            <returns name="number">Random number in the given range (0, x).</returns>
        </member>
        <member name="M:Orchid.Core.Math.RandomList(System.Int32,System.Int32)">
            <summary>
            Produces a list containing the given amount of random doubles in the given range (0, x).
            </summary>
            <param name="amount">Amount of random numbers the result list will contain.</param>
            <param name="range">Range to slice the random numbers into.</param>
            <returns name="number">List of random numbers in the given range (0, x).</returns>
        </member>
        <member name="M:Orchid.Core.Object.ToRevitType(Revit.Elements.Element)">
            <summary>
            Convert Dynamo elements to Autodesk Revit elements
            </summary>
            <param name="element">Element as Dynamo type</param>
            <returns name="Element">Element as Revit type</returns>
        </member>
        <member name="M:Orchid.Core.Object.ToDynamoType(Autodesk.Revit.DB.Element)">
            <summary>
            Convert Autodesk Revit elements to Dynamo elements
            </summary>
            <param name="element">Element as Revit type</param>
            <returns name="Element">Element as Dynamo type</returns>
        </member>
        <member name="M:Orchid.Core.Object.XYZ(System.Double,System.Double,System.Double)">
            <summary>
            Create basic XYZ as Revit type
            </summary>
            <param name="x">X value</param>
            <param name="y">Y value</param>
            <param name="z">Z value</param>
            <returns name="XYZ">XYZ as Revit type</returns>
        </member>
        <member name="M:Orchid.Core.Object.Hashing(System.Object)">
            <summary>
            Input is transferred to output along with its hassing value.
            Please note, hasing should not be mix up with guid or unique id!
            https://en.wikipedia.org/wiki/Hash_function
            </summary>
            <param name="element">Element as Dynamo type</param>
            <returns name="Element">Element as Dynamo type</returns>
            <returns name="hashing">Hashing value</returns>
        </member>
        <member name="M:Orchid.Core.Print.MergePDF(System.Collections.Generic.List{System.String},System.String)">
            <summary>
            Merge list of PDF documents.
            </summary>
            <param name="documents">List of PDF documents to be merged</param>
            <param name="filePath">Give a valid path for the merged PDF output.</param>
            <returns name="watch">Add a watch node to verify the output</returns>
        </member>
        <member name="M:Orchid.Core.Print.ByView(System.String,System.Boolean,System.Boolean,System.Collections.Generic.List{System.String},System.String,System.Collections.Generic.List{Revit.Elements.Element},System.Object)">
            <summary>
            Print by view. --> Please note: If combined into one file is changed
            in this session, then the dynamo graph needs to be reloaded!
            </summary>
            <param name="printer">Printer name as string. If value is not set is default printer selected</param>
            <param name="combine">Combine into one file (Print to file must be set to true).</param>
            <param name="file">Print to file as boolean</param>
            <param name="filePath">Give a valid path and filename for the print output. If value is not set is the user asked later!</param>
            <param name="printRange">Print range as string</param>
            <param name="view">View to print as Revit Element (default: Active View)</param>
            <param name="printSetting">Printer setting as string or Revit Element</param>
        </member>
        <member name="M:Orchid.Core.Print.ByViewSheetSet(System.String,System.Boolean,System.Boolean,System.Collections.Generic.List{System.String},Revit.Elements.Element,System.Object)">
            <summary>
            Print by view sheet set. --> Please note: If combined into one file is changed
            in this session, then the dynamo graph needs to be reloaded!
            </summary>
            <param name="printer">Printer name as string. If value is not set is default printer selected</param>
            <param name="combine">Combine into one file (Print to file must be set to true).</param>
            <param name="file">Print to file as boolean</param>
            <param name="filePath">Give a valid path and filename for the print output. If value is not set is the user asked later!</param>
            <param name="viewSheetSet">ViewSheetSet to print as Revit Element</param>
            <param name="printSetting">Printer setting as string or Revit Element</param>
        </member>
        <member name="M:Orchid.Core.Print.CreateSetting(System.String,System.String,System.String,System.String,System.String,System.String,System.Double[],System.String,System.Int32)">
            <summary>
            Set print setting 
            </summary>
            <param name="printer">Printer name as string. If value is not set is default printer selected</param>
            <param name="name">name to create for the print setting</param>
            <param name="paperZize">Paper size as string. If value is not set is default paper size selected</param>
            <param name="pageOrientation">Page orientation as string.</param>
            <param name="paperPlacement">Paper placement</param>
            <param name="marginType">Print margin type</param>
            <param name="margin">Print margin value as double</param>
            <param name="zoomType">Zoom type as string</param>
            <param name="zoom">Zoom value as integer</param>       
            <returns name="PrintSetting">PrintSetting</returns>
        </member>
        <member name="M:Orchid.Core.Print.ChangeSetting(System.String,System.Object,System.String,System.String,System.String,System.String,System.Double[],System.String,System.Int32)">
            <summary>
            Change print setting 
            </summary>
            <param name="printer">Printer name as string. If value is not set is default printer selected</param>
            <param name="printSetting">printer setting as string or Revit Element</param>
            <param name="paperZize">Paper size as string. If value is not set is default paper size selected</param>
            <param name="pageOrientation">Page orientation as string.</param>
            <param name="paperPlacement">Paper placement</param>
            <param name="marginType">Print margin type</param>
            <param name="margin">Print margin value as double</param>
            <param name="zoomType">Zoom type as string</param>
            <param name="zoom">Zoom value as integer</param>       
            <returns name="PrintSetting">PrintSetting</returns>
        </member>
        <member name="M:Orchid.Core.Print.DeleteSetting(System.Object)">
            <summary>
            Delete print setting
            </summary>
            <param name="printSetting">printer setting as string or Revit Element</param>
        </member>
        <member name="M:Orchid.Core.Print.SetOptions(System.Object,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.String,System.String,System.String)">
            <summary>
            Set printer options
            </summary>
            <param name="printSetting">printer setting as string or Revit Element</param>
            <param name="viewLinksinBlue">View links in blue (Color prints only)</param>
            <param name="hideReforWorkPlanes">Hide ref/work planes</param>
            <param name="hideUnreferencedViewTags">Hide unreferenced view tags</param>
            <param name="maskCoincidentLines">Region edges mask coincident lines</param>
            <param name="hideScopeBoxes">Hide scope boxes</param>
            <param name="hideCropBoundaries">Hide crop boundaries</param>
            <param name="replaceHalftoneWithThinLines">Replace halftone with thin lines</param>
            <param name="hiddenLineViews">Hidden line views: Remove lines using vector or raster</param>
            <param name="rasterQuality">Appearance: Raster quality</param>
            <param name="colorDepth">Appearance: Colors</param>
            <returns name="PrintSetting">PrintSetting</returns>
        </member>
        <member name="M:Orchid.Core.Scripting.DynamoPackagesPath">
            <summary>
            Get the path to the Dynamo package root folder.
            </summary>
            <returns name="string">Path</returns>
        </member>
        <member name="M:Orchid.Core.Scripting.DynamoDefinitionsPath">
            <summary>
            Get the path to the Dynamo definition root folder.
            </summary>
            <returns name="string">Path</returns>
        </member>
        <member name="M:Orchid.Core.Scripting.ScriptFileReader(System.String,System.String,System.Boolean)">
            <summary>
            Read 'script' file content, with refreshing option.
            </summary>
            <param name="path">Path to file. Note: do not send a list of files as input!</param>
            <param name="file">Filename including file extension</param>
            <param name="refresh">Toggle true/false for refreshing</param>
            <returns name="script">Script</returns>
        </member>
        <member name="M:Orchid.Core.String.Contains(System.String,System.Collections.Generic.List{System.String},System.Boolean)">
            <summary>
            Determines if the given string contains any of the given substrings.
            </summary>
            <param name="str">String to search in</param>
            <param name="searchFor">List of substring to search for</param>
            <param name="ignoreCase">Whether or not comparison takes case into account</param>
            <returns name="bool">Whether the string contains any of the given substrings</returns>
            <search>search,in,within,part of</search>
        </member>
        <member name="M:Orchid.Core.String.Replace(System.String,System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String})">
            <summary>
            Replaces all occurrences of text in a string with other text
            </summary>
            <param name="string">String to replace substrings in</param>
            <param name="searchFor">List of strings to be replaced</param>
            <param name="replaceWith">List of strings to replace with</param>
            <returns name="str">String with replacements made</returns>
            <search>replace,overwrite,override,find and replace</search>
        </member>
        <member name="M:Orchid.Core.String.Substring(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Retrieves a substring from the given string. The substring starts at the
            given start string/character position and ends at the given string/character
            </summary>
            <param name="string">String to take substring of</param>
            <param name="startsWith">Substring to search the start for</param>
            <param name="endsWith">Substring to search the end for</param>
            <param name="ignoreCase">Whether or not comparison takes case into account</param>
            <returns name="substring">Substring made from the original string</returns>
            <search>subset,get string,part,smaller string</search>
        </member>
        <member name="P:Orchid.RevitProject.Document.Current">
            <summary>
            Get current document
            </summary>
            <returns name="Document">Document as Revit type</returns>
        </member>
        <member name="M:Orchid.RevitProject.Document.Name(Autodesk.Revit.DB.Document,System.Boolean)">
            <summary>
            Get the current document name
            </summary>
            <param name="document">Document as Revit type</param>
             <param name="withExtension">Include extension? default is set to false</param>
            <returns name="string">The name of the document</returns>
        </member>
        <member name="M:Orchid.RevitProject.Document.Directory(Autodesk.Revit.DB.Document)">
            <summary>
            Get the directory of the Document.
            </summary>
            <param name="document">Document as Revit type</param>
            <returns name="string">The directory of the document</returns>
        </member>
        <member name="M:Orchid.RevitProject.Document.Path(Autodesk.Revit.DB.Document,System.Boolean)">
            <summary>
            Get the full path of the Document.
            </summary>
            <param name="document">Document as Revit type</param>
            <param name="withExtension">Include extension? default is set to true</param>
            <returns name="string">The full path of the document</returns>
        </member>
        <member name="M:Orchid.RevitProject.Document.BackgroundOpen(System.String)">
            <summary>
            Open documents in background
            </summary>
            <param name="file">File (path) to open in the background</param>
            <returns name="Document">Document as Revit type</returns>
        </member>
        <member name="M:Orchid.RevitProject.Document.BackgroundOpen(System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Open documents in background.
            </summary>
            <param name="file">File (path) to open in the background</param>
            <param name="detachFromCentral">Detach from central?</param>
            <param name="discardWorksets">Discard worksets?</param>
            <param name="audit">Audit the document?</param>
            <returns name="Document">Document as Revit type</returns>
        </member>
        <member name="M:Orchid.RevitProject.Document.Close(Autodesk.Revit.DB.Document,System.Boolean)">
            <summary>
            Close document
            </summary>
            <param name="document">Document as Revit type</param>
            <param name="save">Save opened document?</param>
            <returns name="watch">Add a watch node to verify the output</returns>
        </member>
        <member name="M:Orchid.RevitProject.Document.Save(Autodesk.Revit.DB.Document,System.Boolean)">
            <summary>
            Save document
            </summary>
            <param name="document">Document as Revit type</param>
            <param name="compact">Save using compact mode?</param>
            <returns name="Document">Document as Revit type</returns>
        </member>
        <member name="M:Orchid.RevitProject.Document.SaveAs(Autodesk.Revit.DB.Document,System.String,System.Boolean)">
            <summary>
            SaveAs document
            </summary>
            <param name="document">Document as Revit type</param>
            <param name="name">Name for the document incl. path</param>
            <param name="overwrite">Overwrite existing document?</param>
            <returns name="Document">Document as Revit type</returns>
        </member>
        <member name="M:Orchid.RevitProject.Document.SaveAs(Autodesk.Revit.DB.Document,System.String,System.Boolean,System.Boolean)">
            <summary>
            SaveAs document
            </summary>
            <param name="document">Document as Revit type</param>
            <param name="name">Name for the document incl. path</param>
            <param name="overwrite">Overwrite existing document?</param>
            <param name="saveAsCentral">SaveAs central document?</param>
            <returns name="Document">Document as Revit type</returns>
        </member>
        <member name="M:Orchid.RevitProject.Document.CopyDraftingView(Autodesk.Revit.DB.Document,Autodesk.Revit.DB.Document,System.Collections.Generic.List{Revit.Elements.Element})">
            <summary>
            Copy drafting view from source document to target document
            </summary>
            <param name="source">Source as Document of Revit type</param>
            <param name="target">Target as Document of Revit type</param>
            <param name="draftingView">Drafting view to copy</param>
            <returns name="DraftingView">Copied drafting view</returns>
        </member>
        <member name="M:Orchid.RevitProject.Document.CopyElement(Autodesk.Revit.DB.Document,Autodesk.Revit.DB.Document,System.Collections.Generic.List{Revit.Elements.Element})">
            <summary>
            Copy element from source document to target document
            </summary>
            <param name="source">Source as Document of Revit type</param>
            <param name="target">Target as Document of Revit type</param>
            <param name="element">Element to copy</param>
            <returns name="Element">Copied element</returns>
        </member>
        <member name="M:Orchid.RevitProject.Document.CopySchedule(Autodesk.Revit.DB.Document,Autodesk.Revit.DB.Document,System.Collections.Generic.List{Revit.Elements.Element})">
            <summary>
            Copy schedule from source document to target document
            </summary>
            <param name="source">Source as Document of Revit type</param>
            <param name="target">Target as Document of Revit type</param>
            <param name="schedule">Schedule to copy</param>
            <returns name="Schedule">Copied schedule</returns>
        </member>
        <member name="M:Orchid.RevitProject.Document.TransferByCategory(Autodesk.Revit.DB.Document,Autodesk.Revit.DB.Document,System.Object,System.Boolean)">
            <summary>
            Transfer project standards by category from source document to target document.
            </summary>
            <param name="source">Source as Document of Revit type</param>
            <param name="target">Target as Document of Revit type</param>
            <param name="category">Category as string or object</param>
            <param name="overwrite">Copy only new or overwrite existing?</param>
            <returns name="Element">Transfered element</returns>
        </member>
        <member name="M:Orchid.RevitProject.Document.TransferByFamily(Autodesk.Revit.DB.Document,Autodesk.Revit.DB.Document,System.Object,System.Boolean)">
            <summary>
            Transfer types from source document to target document.
            </summary>
            <param name="source">Source as Document of Revit type</param>
            <param name="target">Target as Document of Revit type</param>
            <param name="family">Family as string or object</param>
            <param name="overwrite">Copy only new or overwrite existing?</param>
            <returns name="Element">Transfered element</returns>
        </member>
        <member name="M:Orchid.RevitProject.Document.TransferByType(Autodesk.Revit.DB.Document,Autodesk.Revit.DB.Document,System.Object,System.Boolean)">
            <summary>
            Transfer types from source document to target document.
            </summary>
            <param name="source">Source as Document of Revit type</param>
            <param name="target">Target as Document of Revit type</param>
            <param name="type">Type as string or object</param>
            <param name="overwrite">Copy only new or overwrite existing?</param>
            <returns name="Element">Transfered element</returns>
        </member>
        <member name="M:Orchid.RevitProject.Document.ConvertToLink(Autodesk.Revit.DB.Document,Revit.Elements.Element)">
            <summary>
            Convert link instance to link type
            </summary>
            <param name="document">Document as Revit type</param>
            <param name="instance">Link instance as Dynamo type</param>
            <returns name="Link">Revit link element as Dynamo type</returns>
        </member>
        <member name="M:Orchid.RevitProject.Document.LinkedCadFile(Autodesk.Revit.DB.Document)">
            <summary>
            Get external linked CAD file in document
            </summary>
            <param name="document">Document as Revit type</param>
            <returns name="Link">CAD link element as Dynamo type</returns>
        </member>
        <member name="M:Orchid.RevitProject.Document.LinkedFile(Autodesk.Revit.DB.Document)">
            <summary>
            Get external linked file in document
            </summary>
            <param name="document">Document as Revit type</param>
            <returns name="Link">External link element as Dynamo type</returns>
            <returns name="Type">External link type</returns>
        </member>
        <member name="M:Orchid.RevitProject.Document.LinkedRevitFile(Autodesk.Revit.DB.Document)">
            <summary>
            Get external linked Revit file in document
            </summary>
            <param name="document">Document as Revit type</param>
            <returns name="Link">Revit link element as Dynamo type</returns>
        </member>
        <member name="M:Orchid.RevitProject.Document.LinkReload(Autodesk.Revit.DB.Document,System.Collections.Generic.List{Revit.Elements.Element})">
            <summary>
            Reload external linked file in document
            </summary>
            <param name="document">Document as Revit type</param>
            <param name="link">External link element as Dynamo type</param>
            <returns name="Link">External link element as Dynamo type</returns>
        </member>
        <member name="M:Orchid.RevitProject.Document.LinkRepath(Autodesk.Revit.DB.Document,System.Collections.Generic.List{Revit.Elements.Element},System.String)">
            <summary>
            Repath external linked file in document
            </summary>
            <param name="document">Document as Revit type</param>
            <param name="link">External link element as Dynamo type</param>
            <param name="file">File (path) to set (repath)</param>
            <returns name="Link">External link element as Dynamo type</returns>
        </member>
        <member name="M:Orchid.RevitProject.Document.LinkUnload(Autodesk.Revit.DB.Document,System.Collections.Generic.List{Revit.Elements.Element})">
            <summary>
            Unload external linked file in document
            </summary>
            <param name="document">Document as Revit type</param>
            <param name="link">External link element as Dynamo type</param>
            <returns name="Link">External link element as Dynamo type</returns>
        </member>
        <member name="M:Orchid.RevitProject.Document.ActiveView(Autodesk.Revit.DB.Document)">
            <summary>
            Get the active view in document
            </summary>
            <param name="document">Document as Revit type</param>
            <returns name="View">The active view as dynamo type</returns>
        </member>
        <member name="M:Orchid.RevitProject.Document.OpenView(Revit.Elements.Element)">
            <summary>
            Open view in the active document
            </summary>
            <param name="view">View to open</param>
            <returns name="View">New active view</returns>
        </member>
        <member name="M:Orchid.RevitProject.Document.ContainCategory(System.Collections.IList)">
            <summary>
            Does document contain category?
            </summary>
            <param name="category">Category to validate is contained in the document</param>
            <returns name="bool">List of boolean value</returns>
        </member>
        <member name="M:Orchid.RevitProject.Document.ContainType(System.Collections.IList)">
            <summary>
            Does document contain type?
            </summary>
            <param name="type">Type to validate is contained in the document</param>
            <returns name="bool">List of boolean value</returns>
        </member>
        <member name="M:Orchid.RevitProject.Document.ImportImage(System.String,System.Boolean)">
            <summary>
            Import Image into document
            </summary>
            <param name="path">Image path including file name and extension</param>
            <param name="overwrite">Overwrite existing images?</param>
            <returns name="ImageType">ImageType</returns>
        </member>
        <member name="M:Orchid.RevitProject.Document.Info(Autodesk.Revit.DB.Document)">
            <summary>
            Get document info
            </summary>
            <param name="document">Document as Revit type</param>
            <returns name="info">Document info</returns>
        </member>
        <member name="M:Orchid.RevitProject.Document.Opened">
            <summary>
            Get background opened documents
            </summary>
            <returns name="Document">Document as Revit type</returns>
        </member>
        <member name="M:Orchid.RevitProject.Document.Purge(Autodesk.Revit.DB.Document,System.Boolean)">
            <summary>
            Purge document. Set "completely" to true for including materials and assets!
            Please note "completely" purges also materials and materials assets that are
            used in "peripheral" elements and settings. Among this is included materials/assets
            bound to imported model elements, and materials/assets in settings like "Site" etc.
            </summary>
            <param name="document">Document as Revit type</param>
            <param name="completely">Includes purging materials and assets</param>
        </member>
        <member name="M:Orchid.RevitProject.Document.SetStartingView(Autodesk.Revit.DB.Document,Revit.Elements.Element)">
            <summary>
            Set the starting view in the document
            </summary>
            <param name="document">Document as Revit type</param>
            <param name="view">The view to set</param>
            <returns name="watch">Add a watch node to verify the output</returns>
        </member>
        <member name="M:Orchid.RevitProject.Views.ViewType.ByName(System.String)">
            <summary>
            Get view by name
            </summary>
            <param name="name">View name as string</param>
            <returns name="ViewType">View type as Dynamo type</returns>
        </member>
        <member name="P:Orchid.RevitProject.Views.Sheet.All">
            <summary>
            Get all sheets
            </summary>
            <returns name="View">All sheet views as dynamo type</returns>
        </member>
        <member name="P:Orchid.RevitProject.Views.Schedule.All">
            <summary>
            Get all schedules
            </summary>
            <returns name="View">All schedule views as dynamo type</returns>
        </member>
        <member name="M:Orchid.RevitProject.Views.Schedule.GetData(Revit.Elements.Views.ScheduleView,System.String)">
            <summary>
            Get schedule view, return data as setup in schedule.
            return value as integer, double and/or string
            according to the selected culture (Country)
            </summary>
            <param name="scheduleView">Schedule as dynamo type</param>
            <param name="country">Country as string</param>
            <returns name="Value">All Values in the schedule as a list</returns>
        </member>
        <member name="M:Orchid.RevitProject.Views.Schedule.GetData(Revit.Elements.Views.ScheduleView,System.String,System.Double)">
            <summary>
            Get schedule view, return data without unit symbols.
            Return value as integer, double and/or string
            according to the selected culture (Country)
            </summary>
            <param name="scheduleView">Schedule as dynamo type</param>
            <param name="country">Country as string</param>
            <param name="accuracy">Accuracy for numeric values</param>
            <returns name="Value">All Values in the schedule as a list</returns>
        </member>
        <member name="M:Orchid.RevitProject.Views.ViewTemplate.All(Autodesk.Revit.DB.Document)">
            <summary>
            All view template in document
            Note: due to limitations in dynamo will 3D templates fail!
            </summary>
            <param name="document">Document as Revit type</param>
            <returns name="ViewTemplate">ViewTemplate</returns>
        </member>
        <member name="M:Orchid.RevitProject.Views.ViewTemplate.All">
            <summary>
            All view template in current document
            Note: due to limitations in dynamo will 3D templates fail!
            </summary>
            <returns name="ViewTemplate">ViewTemplate</returns>
        </member>
        <member name="M:Orchid.RevitProject.Views.ViewTemplate.Duplicate(Revit.Elements.Element,System.String)">
            <summary>
            Duplicate view template
            </summary>
            <param name="viewTemplate">View template as Dynamo type</param>
            <param name="name">Name for the duplicated view</param>
            <returns name="ViewTemplate">ViewTemplate</returns>
        </member>
        <member name="M:Orchid.RevitProject.Views.ViewTemplate.Delete(Revit.Elements.Element)">
            <summary>
            Delete view template
            </summary>
            <param name="viewTemplate">View template as Dynamo type</param>
            <returns name="watch">Add a watch node!</returns>
        </member>
        <member name="M:Orchid.RevitProject.Views.ViewTemplate.Get(Revit.Elements.Element)">
            <summary>
            Get view template by view
            </summary>
            <param name="view">View as Dynamo type</param>
            <returns name="ViewTemplate">ViewTemplate</returns>
        </member>
        <member name="M:Orchid.RevitProject.Views.ViewTemplate.GetParameterIds(Revit.Elements.Element)">
            <summary>
            Get all parameter ids in view template
            </summary>
            <param name="viewTemplate">View template as Dynamo type</param>
            <returns name="int">Parameter ids</returns>
        </member>
        <member name="M:Orchid.RevitProject.Views.ViewTemplate.GetParameterNames(Revit.Elements.Element)">
            <summary>
            Get all parameter names in view template
            </summary>
            <param name="viewTemplate">View template as Dynamo type</param>
            <returns name="string">Parameter names</returns>
        </member>
        <member name="M:Orchid.RevitProject.Views.ViewTemplate.Set(Revit.Elements.Element,Revit.Elements.Element)">
            <summary>
            Set view template by view
            </summary>
            <param name="view">View as Dynamo type</param>
            <param name="viewTemplate">View template as Dynamo type</param>
            <returns name="View">View</returns>
        </member>
        <member name="M:Orchid.RevitProject.Views.ViewTemplate.SetNone(Revit.Elements.Element)">
            <summary>
            Set view template to none (remove view template)
            </summary>
            <param name="view">View as Dynamo type</param>
            <returns name="view">View</returns>
        </member>
        <member name="M:Orchid.RevitProject.Views.Viewport.All(Autodesk.Revit.DB.Document)">
            <summary>
            All viewport in document
            </summary>
            <param name="document">Document as Revit type</param>
            <returns name="Viewport">Viewport</returns>
        </member>
        <member name="M:Orchid.RevitProject.Views.Viewport.All">
            <summary>
            All viewport in current document
            </summary>
            <returns name="Viewport">Viewport</returns>
        </member>
        <member name="M:Orchid.RevitProject.Views.Viewport.Move(Revit.Elements.Element,Autodesk.DesignScript.Geometry.Vector)">
            <summary>
            Move viewport on sheet.
            Important! Set vector values in true length unit values not scaled according to the viewport!
            </summary>
            <param name="viewport">Viewport as Dynamo type</param>
            <param name="vector">Vector as Dynamo type</param>
            <returns name="Viewport">Viewport</returns>
        </member>
        <member name="M:Orchid.RevitProject.Views.View.Duplicate(Revit.Elements.Element,System.String,System.String)">
            <summary>
            Duplicate view
            </summary>
            <param name="view">View as Dynamo type</param>
            <param name="name">Name for the duplicated view</param>
            <param name="option">View duplicate option as string</param>
            <returns name="View">View</returns>
        </member>
        <member name="M:Orchid.RevitProject.Views.View.All(Autodesk.Revit.DB.Document)">
            <summary>
            All view in document
            </summary>
            <param name="document">Document as Revit type</param>
            <returns name="View">View</returns>
        </member>
        <member name="M:Orchid.RevitProject.Views.View.All">
            <summary>
            All view in current document
            </summary>
            <returns name="View">View</returns>
        </member>
        <member name="M:Orchid.RevitProject.Views.View.ModelAll(Autodesk.Revit.DB.Document)">
            <summary>
            All model view in document
            </summary>
            <param name="document">Document as Revit type</param>
            <returns name="View">View</returns>
        </member>
        <member name="M:Orchid.RevitProject.Views.View.ModelAll">
            <summary>
            All model view in current document
            </summary>
            <returns name="View">View</returns>
        </member>
        <member name="M:Orchid.RevitProject.Views.View.ByType(Autodesk.Revit.DB.Document,Revit.Elements.Element)">
            <summary>
            All view by viewType in document
            </summary>
            <param name="document">Document as Revit type</param>
            <param name="viewType">ViewType as Dynamo type</param>
            <returns name="View">View</returns>
        </member>
        <member name="M:Orchid.RevitProject.Views.View.ByType(Revit.Elements.Element)">
            <summary>
            All view by viewType in current document
            </summary>
            <param name="viewType">ViewType as Dynamo type</param>
            <returns name="View">View</returns>
        </member>
        <member name="M:Orchid.RevitProject.Views.View.GetCropBox(Revit.Elements.Element)">
            <summary>
            Get crop box
            </summary>
            <param name="view">View as Dynamo type</param>
            <returns name="BoundingBox">BoundingBox as Dynamo type</returns>
            <returns name="Curve">Curve as Dynamo type</returns>
        </member>
        <member name="M:Orchid.RevitProject.Views.View.SetCropBox(Revit.Elements.Element,Autodesk.DesignScript.Geometry.BoundingBox)">
            <summary>
            Set crop box by bounding box
            </summary>
            <param name="view">View as Dynamo type</param>
            <param name="boundingBox">BoundingBox as Dynamo type</param>
            <returns name="View">View</returns>
        </member>
        <member name="M:Orchid.RevitProject.Views.View.SetCropBox(Revit.Elements.Element,System.Collections.Generic.List{Autodesk.DesignScript.Geometry.Curve})">
            <summary>
            Set crop box by curve
            </summary>
            <param name="view">View as Dynamo type</param>
            <param name="curve">Curves forming a cropbox shape</param>
            <returns name="View">View</returns>
        </member>
        <member name="M:Orchid.RevitProject.Views.View.MoveCropBox(Revit.Elements.Element,Autodesk.DesignScript.Geometry.Vector)">
            <summary>
            Move crop box by vector
            </summary>
            <param name="view">View as Dynamo type</param>
            <param name="vector">Vector as Dynamo type</param>
            <returns name="View">View</returns>
        </member>
        <member name="M:Orchid.RevitProject.Views.View.MoveSectionBox(Revit.Elements.Element,Autodesk.DesignScript.Geometry.Vector)">
            <summary>
            Move section box (View3D) by vector
            </summary>
            <param name="view3D">View3D as Dynamo type</param>
            <param name="vector">Vector as Dynamo type</param>
            <returns name="View3D">View3D</returns>
        </member>
        <member name="M:Orchid.RevitProject.Views.View.Move(Revit.Elements.Element,Autodesk.DesignScript.Geometry.Vector)">
            <summary>
            Move view by vector
            </summary>
            <param name="view">View as Dynamo type</param>
            <param name="vector">Vector as Dynamo type</param>
            <returns name="View">View</returns>
        </member>
        <member name="M:Orchid.RevitProject.Views.SheetSet.All">
            <summary>
            All sheet set in current document.
            </summary>
            <returns name="ViewSheetSet">ViewSheetSet as Dynamo type</returns>
        </member>
        <member name="M:Orchid.RevitProject.Views.SheetSet.Create(System.Collections.Generic.List{Revit.Elements.Element},System.String)">
            <summary>
            Create sheet set
            </summary>
            <param name="view">View as Dynamo type</param>
            <param name="name">Name for the ViewSheetSet</param>
            <returns name="ViewSheetSet">ViewSheetSet as Dynamo type</returns>
        </member>
        <member name="M:Orchid.RevitProject.Views.SheetSet.Change(System.Collections.Generic.IList{Revit.Elements.Element},System.Object)">
            <summary>
            Change sheet set
            </summary>
            <param name="view">View as Dynamo type</param>
            <param name="viewSheetSet">ViewSheetSet as string or Dynamo type</param>
            <returns name="ViewSheetSet">ViewSheetSet as Dynamo type</returns>
        </member>
        <member name="M:Orchid.RevitProject.Views.SheetSet.GetView(System.Object)">
            <summary>
            Get View from sheet set
            </summary>
            <param name="viewSheetSet">ViewSheetSet as string or Dynamo type</param>
            <returns name="View">View as Dynamo type</returns>
        </member>
        <member name="M:Orchid.RevitProject.Views.SheetSet.Delete(System.Object)">
            <summary>
            Delete sheet set
            </summary>
            <param name="viewSheetSet">ViewSheetSet as string or Dynamo type</param>
        </member>
        <member name="M:Orchid.RevitProject.Workset.SetByName(System.String)">
            <summary>
            Create Workset by name.
            </summary>
            <param name="name">The name of the workset</param>
            <returns name="Workset">Workset as Orchid type</returns>
        </member>
        <member name="P:Orchid.RevitProject.Workset.Name">
            <summary>
            Get workset name
            </summary>
            <returns name="string">Name as string</returns>
        </member>
        <member name="P:Orchid.RevitProject.Workset.Id">
            <summary>
            Workset Id as integer
            </summary>
            <returns name="int">Id as integer value</returns>
        </member>
        <member name="M:Orchid.RevitProject.Workset.ToString">
            <summary>
            Workset string override
            </summary>
            <returns></returns>
        </member>
        <member name="P:Orchid.RevitProject.Workset.Guid">
            <summary>
            Workset Guid
            </summary>
            <returns name="string">Guid as string</returns>
        </member>
        <member name="M:Orchid.RevitProject.Workset.All">
            <summary>
            Get all workset in the current document.
            </summary>
            <returns name="Workset">The list of workset.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Workset.GetByName(System.String)">
            <summary>
            Get Workset by name.
            </summary>
            <param name="name">The name of the workset</param>
            <returns name="Workset">Workset as Orchid type</returns>
        </member>
        <member name="M:Orchid.RevitProject.Workset.ById(System.Int32)">
            <summary>
            Get Workset by Id.
            </summary>
            <param name="id">Id as integer value</param>
            <returns name="Workset">Workset as Orchid type</returns>
        </member>
        <member name="M:Orchid.RevitProject.Annotations.Tag.ByElement(Revit.Elements.Element,Revit.Elements.Element,Revit.Elements.Element,System.Boolean,System.Boolean)">
            <summary>
            Create a Tag for a element at the element center point
            </summary>
            <param name="view">View to tag in</param>
            <param name="element">Element to tag</param>
            <param name="tagType">Tag type to use</param>
            <param name="horizontal">Optional: Place tag horizontal, defaults to true</param>
            <param name="addLeader">Optional: Add a leader, defaults to false</param>
            <returns name="Tag">Tag as dynamo type</returns>
            <search>tag room, tag space, tag area,annotate,documentation</search>
        </member>
        <member name="M:Orchid.RevitProject.Annotations.Tag.ByElementAndLocation(Revit.Elements.Element,Revit.Elements.Element,Revit.Elements.Element,Autodesk.DesignScript.Geometry.Point,System.Boolean,System.Boolean)">
            <summary>
            Create a Tag for a element at a specified location point
            </summary>
            <param name="view">View to tag in</param>
            <param name="element">Element to tag</param>
            <param name="tagType">Tag type to use</param>
            <param name="location">Location point, default set to null -> element center</param>
            <param name="horizontal">Optional: Place tag horizontal, defaults to true</param>
            <param name="addLeader">Optional: Add a leader, defaults to false</param>
            <returns name="Tag">Tag as dynamo type</returns>
            <search>tag element,annotate,documentation</search>
        </member>
        <member name="M:Orchid.RevitProject.Annotations.Tag.BySpatialElement(Revit.Elements.Element,Revit.Elements.Element,Revit.Elements.Element,System.Boolean,System.Boolean)">
            <summary>
            Create a Tag for a spatial element (Room, Space, Area) at the element center point
            </summary>
            <param name="view">View to tag in</param>
            <param name="spatialElement">SpatialElement to tag (Room, Space, Area)</param>
            <param name="tagType">Tag type to use</param>
            <param name="horizontal">Optional: Place tag horizontal, defaults to true</param>
            <param name="addLeader">Optional: Add a leader, defaults to false</param>
            <returns name="Tag">Tag as dynamo type</returns>
            <search>tag room, tag space, tag area,annotate,documentation</search>
        </member>
        <member name="M:Orchid.RevitProject.Annotations.Tag.BySpatialElementAndLocation(Revit.Elements.Element,Revit.Elements.Element,Revit.Elements.Element,Autodesk.DesignScript.Geometry.Point,System.Boolean,System.Boolean)">
            <summary>
            Create a Tag for a spatial element (Room, Space, Area) at a specified location point
            </summary>
            <param name="view">View to tag in</param>
            <param name="spatialElement">SpatialElement to tag (Room, Space, Area)</param>
            <param name="tagType">Tag type to use</param>
            <param name="location">Location point, default set to null -> element center</param>
            <param name="horizontal">Optional: Place tag horizontal, defaults to true</param>
            <param name="addLeader">Optional: Add a leader, defaults to false</param>
            <returns name="Tag">Tag as dynamo type</returns>
            <search>tag room, tag space, tag area,annotate,documentation</search>
        </member>
        <member name="M:Orchid.RevitProject.Elements.SpatialElement.GetBoundary">
            <summary>
            Get spatial element boundary
            </summary>
            <returns name="Element">Element as Dynamo type</returns>
            <returns name="Curve">Curve as Dynamo type</returns>
        </member>
        <member name="M:Orchid.RevitProject.Elements.SpatialElement.GetBoundary(Revit.Elements.Element)">
            <summary>
            Get spatial element boundary
            </summary>
            <param name="element">Element as Dynamo type</param>
            <returns name="Element">Element as Dynamo type</returns>
            <returns name="Curve">Curve as Dynamo type</returns>
        </member>
        <member name="M:Orchid.RevitProject.Elements.SpatialElement.GetSpaceBoundary">
            <summary>
            Get space boundary
            </summary>
            <returns name="Element">Element as Dynamo type</returns>
            <returns name="Curve">Curve as Dynamo type</returns>
        </member>
        <member name="M:Orchid.RevitProject.Elements.SpatialElement.GetRoomBoundary">
            <summary>
            Get room boundary
            </summary>
            <returns name="Element">Element as Dynamo type</returns>
            <returns name="Curve">Curve as Dynamo type</returns>
        </member>
        <member name="M:Orchid.RevitProject.Elements.SpatialElement.GetAreaBoundary">
            <summary>
            Get area boundary
            </summary>
            <returns name="Element">Element as Dynamo type</returns>
            <returns name="Curve">Curve as Dynamo type</returns>
        </member>
        <member name="M:Orchid.RevitProject.Elements.SpatialElement.GetSeparationLine">
            <summary>
            Get spatial element separation line
            </summary>
            <returns name="Element">Element as Dynamo type</returns>
            <returns name="Curve">Curve as Dynamo type</returns>
        </member>
        <member name="M:Orchid.RevitProject.Elements.SpatialElement.GetSeparationLine(Revit.Elements.Element)">
            <summary>
            Get spatial element boundary
            </summary>
            <param name="element">Element as Dynamo type</param>
            <returns name="Element">Element as Dynamo type</returns>
            <returns name="Curve">Curve as Dynamo type</returns>
        </member>
        <member name="M:Orchid.RevitProject.Elements.Wall.AllStackedWall">
            <summary>
            All stacked wall in current document
            </summary>
            <returns name="Wall">Stacked wall as Dynamo type</returns>
        </member>
        <member name="M:Orchid.RevitProject.Elements.GroupType.All(Autodesk.Revit.DB.Document)">
            <summary>
            All group type in document
            </summary>
            <param name="document">Document as Revit type</param>
            <returns name="GroupType">GroupType as Dynamo type</returns>
        </member>
        <member name="M:Orchid.RevitProject.Elements.GroupType.All">
            <summary>
            All group type in current document
            </summary>
            <returns name="GroupType">GroupType as Dynamo type</returns>
        </member>
        <member name="M:Orchid.RevitProject.Elements.GroupType.AllModel">
            <summary>
            All model group type in current document
            </summary>
            <returns name="Group">Group as Dynamo type</returns>
        </member>
        <member name="M:Orchid.RevitProject.Elements.GroupType.AllDetail">
            <summary>
            All detail group type in current document
            </summary>
            <returns name="Group">Group as Dynamo type</returns>
        </member>
        <member name="M:Orchid.RevitProject.Elements.GroupType.GetByName(System.String)">
            <summary>
            Get group type by name
            </summary>
            <param name="name">Group name as string</param>
            <returns name="GroupType">GroupType as Dynamo type</returns>
        </member>
        <member name="M:Orchid.RevitProject.Elements.GroupType.GetByGroup(Revit.Elements.Element)">
            <summary>
            Get group type by group
            </summary>
            <param name="group">Group as Dynamo type</param>
            <returns name="GroupType">GroupType as Dynamo type</returns>
        </member>
        <member name="M:Orchid.RevitProject.Elements.GroupType.Delete(System.String)">
            <summary>
            Delete group type by name
            </summary>
            <param name="name">GroupType name as string</param>
        </member>
        <member name="M:Orchid.RevitProject.Elements.GroupType.Delete(Revit.Elements.Element)">
            <summary>
            Delete group type
            </summary>
            <param name="groupType">GroupType as Dynamo type</param>
        </member>
        <member name="M:Orchid.RevitProject.Elements.Group.Create(System.String,System.Collections.Generic.List{Revit.Elements.Element},System.Boolean)">
            <summary>
            Create group by name. 
            Please note the boolean value "assort", default value (true) is set
            NOT to include elements placed on legend or drafting view!
            </summary>
            <param name="name">Group name as string</param>
            <param name="element">Element as Dynamo type</param>
            <param name="assort">True value does NOT include elements placed on legend or drafting view!</param>
            <returns name="Group">Group as Dynamo type</returns>
        </member>
        <member name="M:Orchid.RevitProject.Elements.Group.All(Autodesk.Revit.DB.Document,System.Boolean)">
            <summary>
            All group in document.
            Please note the boolean value "assort", default value (true) is set
            NOT to include elements placed on legend or drafting view!
            </summary>
            <param name="document">Document as Revit type</param>
            <param name="assort">True value does NOT include elements placed on legend or drafting view!</param>
            <returns name="Group">Group as Dynamo type</returns>
        </member>
        <member name="M:Orchid.RevitProject.Elements.Group.All(System.Boolean)">
            <summary>
            All group in current document.
            Please note the boolean value "assort", default value (true) is set
            NOT to include elements placed on legend or drafting view!
            </summary>
            <param name="assort">True value does NOT include elements placed on legend or drafting view!</param>
            <returns name="Group">Group as Dynamo type</returns>
        </member>
        <member name="M:Orchid.RevitProject.Elements.Group.AllModel">
            <summary>
            All model group in current document
            </summary>
            <returns name="Group">Group as Dynamo type</returns>
        </member>
        <member name="M:Orchid.RevitProject.Elements.Group.AllDetail(System.Boolean)">
            <summary>
            All detail group in current document.
            Please note the boolean value "assort", default value (true) is set
            NOT to include elements placed on legend or drafting view!
            </summary>
            <param name="assort">True value does NOT include elements placed on legend or drafting view!</param>
            <returns name="Group">Group as Dynamo type</returns>
        </member>
        <member name="M:Orchid.RevitProject.Elements.Group.GetByName(System.String)">
            <summary>
            Get group by name
            </summary>
            <param name="name">Group name as string</param>
            <returns name="Group">Group as Dynamo type</returns>
        </member>
        <member name="M:Orchid.RevitProject.Elements.Group.GetByGroupType(Revit.Elements.Element)">
            <summary>
            Get group by group type
            </summary>
            <param name="groupType">GroupType as Dynamo type</param>
            <returns name="Group">Group as Dynamo type</returns>
        </member>
        <member name="M:Orchid.RevitProject.Elements.Group.UnGroup(System.String)">
            <summary>
            Ungroup by name
            </summary>
            <param name="name">Group name as string</param>
        </member>
        <member name="M:Orchid.RevitProject.Elements.Group.UnGroup(Revit.Elements.Element)">
            <summary>
            Ungroup group
            </summary>
            <param name="group">Group as Dynamo type</param>
        </member>
        <member name="M:Orchid.RevitProject.Elements.Group.Delete(System.String)">
            <summary>
            Delete group by name
            </summary>
            <param name="name">Group name as string</param>
        </member>
        <member name="M:Orchid.RevitProject.Elements.Group.Delete(Revit.Elements.Element)">
            <summary>
            Delete group
            </summary>
            <param name="group">Group as Dynamo type</param>
        </member>
        <member name="M:Orchid.RevitProject.Elements.Category.BuiltInCategory">
            <summary>
            Get all built in categories
            </summary>
            <returns name="Category">Category as Dynamo type</returns>
        </member>
        <member name="M:Orchid.RevitProject.Elements.Category.ByCategoryType(System.String)">
            <summary>
            Get all categories by category type
            </summary>
            <param name="categoryType">CategoryType as string</param>
            <returns name="Category">Category as Dynamo type</returns>
        </member>
        <member name="M:Orchid.RevitProject.Elements.Category.InDocument(Autodesk.Revit.DB.Document)">
            <summary>
            Get all categories in document
            </summary>
            <param name="document">Document as Revit type</param>
            <returns name="Category">Category as Dynamo type</returns>
        </member>
        <member name="M:Orchid.RevitProject.Elements.Category.CategoryType(System.Object)">
            <summary>
            Get the category type
            </summary>
            <param name="category">Category as Dynamo type</param>
            <returns name="CategoryType">CategoryType as string</returns>
        </member>
        <member name="M:Orchid.RevitProject.Elements.Element.IsValid(Revit.Elements.Element)">
            <summary>
            Verify if element is valid, output as boolean
            If element is deleted during processing is this filter valuable.
            </summary>
            <param name="element">Element as Dynamo type</param>
            <returns name="bool">Valid value</returns>
        </member>
        <member name="M:Orchid.RevitProject.Elements.Element.Valid(System.Collections.Generic.List{Revit.Elements.Element})">
            <summary>
            Filter list for valid elements.
            If element is deleted during processing is this filter valuable.
            </summary>
            <param name="element">Element as Dynamo type</param>
            <returns name="Element">Element as Dynamo type</returns>
        </member>
        <member name="M:Orchid.RevitProject.Elements.Element.Delete(Autodesk.Revit.DB.Document,System.Collections.IList)">
            <summary>
            Delete elements, in a document
            </summary>
            <param name="document">Document as Revit type</param>
            <param name="element">Element as Dynamo type</param>
            <returns name="watch">Add a watch node to verify the output</returns>
        </member>
        <member name="M:Orchid.RevitProject.Elements.Element.Delete(System.Collections.IList)">
            <summary>
            Delete elements
            </summary>
            <param name="element">Element as Dynamo type</param>
            <returns name="watch">Add a watch node to verify the output</returns>
        </member>
        <member name="F:Orchid.RevitProject.Elements.Element.types">
            Host type elements
        </member>
        <member name="M:Orchid.RevitProject.Elements.Element.IsHosting(Revit.Elements.Element)">
            <summary>
            Get the element hosting condition, output as boolean
            </summary>
            <param name="element">Element as Dynamo type</param>
            <returns name="bool">Boolean value</returns>
        </member>
        <member name="M:Orchid.RevitProject.Elements.Element.Hosting(System.Collections.Generic.List{Revit.Elements.Element})">
            <summary>
            Get the element hosting condition, output as element
            </summary>
            <param name="element">Element as Dynamo type</param>
            <returns name="true">Hosting element</returns>
            <returns name="false">Not hosting element</returns>
        </member>
        <member name="M:Orchid.RevitProject.Elements.Element.SetWorkset(Revit.Elements.Element,Orchid.RevitProject.Workset)">
            <summary>
            Set the workset of the element
            </summary>
            <param name="element">Element as Dynamo type</param>
            <param name="workset">Workset as Orchid type</param>
            <returns name="Element">Element as Dynamo type</returns>
        </member>
        <member name="M:Orchid.RevitProject.Elements.Element.GetWorkset(Revit.Elements.Element)">
            <summary>
            Get the workset of the element
            </summary>
            <param name="element">Element as Dynamo type</param>
            <returns name="Workset">Workset as Orchid type</returns>
        </member>
        <member name="M:Orchid.RevitProject.Elements.Element.PhaseByName(System.String)">
            <summary>
            Get phase by name
            </summary>
            <param name="name">Phase name as string</param>
            <returns name="Phase">Phase as Dynamo type</returns>
        </member>
        <member name="M:Orchid.RevitProject.Elements.Element.GetPhase(Revit.Elements.Element)">
            <summary>
            Get the phase of the element
            </summary>
            <param name="element">Element as Dynamo type</param>
            <returns name="Created">Phase created</returns>
            <returns name="Demolished">Phase demolished</returns>
        </member>
        <member name="M:Orchid.RevitProject.Elements.Element.SetPhase(Revit.Elements.Element,Revit.Elements.Element,Revit.Elements.Element)">
            <summary>
            Set the phase of the element
            </summary>
            <param name="element">Element as Dynamo type</param>
            <param name="created">Phase created as Dynamo type</param>
            <param name="demolished">Phase demolished as Dynamo type</param>
            <returns name="Element">Element as Dynamo type</returns>
        </member>
        <member name="M:Orchid.RevitProject.Elements.Element.IsFlipped(Revit.Elements.Element)">
            <summary>
            Get the element flip condition, output as boolean
            </summary>
            <param name="element">Element as Dynamo type</param>
            <returns name="bool">Boolean value</returns>
        </member>
        <member name="M:Orchid.RevitProject.Elements.Element.IsHandFlipped(Revit.Elements.Element)">
            <summary>
            Get the element hand flip condition, output as boolean
            </summary>
            <param name="element">Element as Dynamo type</param>
            <returns name="bool">Boolean value</returns>
        </member>
        <member name="M:Orchid.RevitProject.Elements.Element.IsFaceFlipped(Revit.Elements.Element)">
            <summary>
            Get the element face flip condition, output as boolean
            </summary>
            <param name="element">Element as Dynamo type</param>
            <returns name="bool">Boolean value</returns>
        </member>
        <member name="M:Orchid.RevitProject.Elements.Element.Flipped(System.Collections.Generic.List{Revit.Elements.Element})">
            <summary>
            Get the element flip condition, output as element
            </summary>
            <param name="element">Element as Dynamo type</param>
            <returns name="true">Flipped element</returns>
            <returns name="false">Not flipped element</returns>
        </member>
        <member name="M:Orchid.RevitProject.Elements.Element.HandFlipped(System.Collections.Generic.List{Revit.Elements.Element})">
            <summary>
            Get the element hand flip condition, output as element
            </summary>
            <param name="element">Element as Dynamo type</param>
            <returns name="true">Flipped element</returns>
            <returns name="false">Not flipped element</returns>
        </member>
        <member name="M:Orchid.RevitProject.Elements.Element.FaceFlipped(System.Collections.Generic.List{Revit.Elements.Element})">
            <summary>
            Get the element face flip condition, output as element
            </summary>
            <param name="element">Element as Dynamo type</param>
            <returns name="true">Flipped element</returns>
            <returns name="false">Not flipped element</returns>
        </member>
        <member name="M:Orchid.RevitProject.Elements.Element.Orientation(Revit.Elements.Element)">
            <summary>
            Get the element orientation, output as vector
            </summary>
            <param name="element">Element as Dynamo type</param>
            <returns name="Vector">Vector</returns>
        </member>
        <member name="M:Orchid.RevitProject.Elements.Element.HandOrientation(Revit.Elements.Element)">
            <summary>
            Get the element hand orientation, output as vector
            </summary>
            <param name="element">Element as Dynamo type</param>
            <returns name="Vector">Vector</returns>
        </member>
        <member name="M:Orchid.RevitProject.Elements.Element.SetType(System.Collections.Generic.List{Revit.Elements.Element},System.Collections.Generic.List{Revit.Elements.Element})">
            <summary>
            Set element by family type
            </summary>
            <param name="element">Element as Dynamo type</param>
            <param name="familyType">FamilyType as Dynamo type</param>
            <returns name="Element">Element</returns>
        </member>
        <member name="M:Orchid.RevitProject.Elements.Element.SetAnalyticalLocation(System.Collections.Generic.List{Revit.Elements.Element},System.String)">
            <summary>
            Set (structural) element analytical location
            </summary>
            <param name="element">Element as Dynamo type</param>
            <param name="location">Element analytical location</param>
            <returns name="Element">Analytical floor element</returns>
        </member>
        <member name="M:Orchid.RevitProject.Elements.Element.GetAnalytical(Revit.Elements.Element)">
            <summary>
            Get analytical element
            </summary>
            <param name="element">Element as Dynamo type</param>
            <returns name="Element">Element</returns>
        </member>
        <member name="M:Orchid.RevitProject.Elements.Element.GetLinePattern">
            <summary>
            Get line pattern element
            </summary>
            <returns name="Element">Element</returns>
        </member>
        <member name="M:Orchid.RevitProject.Elements.Element.FamilyName(Revit.Elements.Element)">
            <summary>
            Get element family name
            </summary>
            <param name="element">Element as Dynamo type</param>
            <returns name="string">Family name as string</returns>
        </member>
        <member name="M:Orchid.RevitProject.Elements.Element.ElementType(Autodesk.Revit.DB.Document,Revit.Elements.Element)">
            <summary>
            Returns the ElementType for this Element. Returns null if the Element cannot have a ElementType assigned.
            </summary>
            <param name="document">Document as Revit type</param>
            <param name="element">Element as Dynamo type</param>
            <returns name="ElementType">Element Type or Null.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Elements.Element.View(Revit.Elements.Element)">
            <summary>
            Get the view where the element is located
            </summary>
            <param name="element">Element as Dynamo type</param>
            <returns name="View">View</returns>
        </member>
        <member name="M:Orchid.RevitProject.Elements.Element.Info(Autodesk.Revit.DB.Document,Revit.Elements.Element)">
            <summary>
            Get element info
            </summary>
            <param name="document">Document as Revit type</param>
            <param name="element">Element as Dynamo type</param>
            <returns name="Owner">Owner</returns>
            <returns name="Creator">Creator</returns>
            <returns name="LastChangedBy">LastChangedBy</returns>
            <returns name="RequestedBy">RequestedBy</returns>
        </member>
        <member name="M:Orchid.RevitProject.Elements.ElementType.Name(Revit.Elements.Element)">
            <summary>
            Get element type name
            </summary>
            <param name="elementType">Element as Dynamo type</param>
            <returns name="string">Name as string</returns>
        </member>
        <member name="M:Orchid.RevitProject.Elements.ElementType.FamilyName(Revit.Elements.Element)">
            <summary>
            Get element type family name
            </summary>
            <param name="elementType">Element as Dynamo type</param>
            <returns name="string">Family name as string</returns>
        </member>
        <member name="M:Orchid.RevitProject.Elements.ElementType.Duplicate(Revit.Elements.Element,System.String)">
            <summary>
            Get the view where the element is located
            </summary>
            <param name="elementType">ElementType as Dynamo type</param>
            <param name="name">Name for the duplicated element type</param>
            <returns name="ElementType">ElementType</returns>
        </member>
        <member name="M:Orchid.RevitProject.Elements.Material.Quantity(System.Collections.Generic.List{Revit.Elements.Element})">
            <summary>
            Get material by element, return values in SI unit (m2/m3)
            </summary>
            <param name="element">Element as Dynamo type</param>
            <returns name="Material">List of material</returns>
            <returns name="area">List of area</returns>
            <returns name="volumne">List of volumne</returns>
        </member>
        <member name="M:Orchid.RevitProject.Elements.Material.SumByElement(System.Collections.Generic.List{Revit.Elements.Element})">
            <summary>
            Material by (summarized) element area and volumne
            </summary>
            <param name="element">Element as Dynamo type</param>
            <returns name="Material">Material as Dynamo type</returns>
            <returns name="area">Area as double</returns>
            <returns name="volumne">Volumne as double</returns>
        </member>
        <member name="M:Orchid.RevitProject.Elements.Material.Sum(System.Collections.Generic.List{Revit.Elements.Element})">
            <summary>
            Element by (summarized) material area and volumne
            </summary>
            <param name="material">Material as Dynamo type</param>
            <returns name="Element">Element as Dynamo type</returns>
            <returns name="area">Area as double</returns>
            <returns name="volumne">Volumne as double</returns>
        </member>
        <member name="M:Orchid.RevitProject.Elements.Material.Density(System.Collections.Generic.List{Revit.Elements.Element})">
            <summary>
            Get material asset as physical and thermal density
            </summary>
            <param name="material">Material as Dynamo type</param>
            <returns name="physical">Physical density</returns>
            <returns name="thermal">Thermal density</returns>
        </member>
        <member name="M:Orchid.RevitProject.Elements.Selection.ElementHasMaterial(System.Collections.Generic.List{Autodesk.Revit.DB.Document})">
            <summary>
            Get elements that has material quantities in document, return element grouped by category.
            </summary>
            <param name="document">Document as Revit type</param>
            <returns name="Element">Element</returns>
            <returns name="Category">Category</returns>
        </member>
        <member name="M:Orchid.RevitProject.Elements.Selection.ElementByCategory(System.Collections.Generic.List{Autodesk.Revit.DB.Document},System.Collections.IList)">
            <summary>
             Get all elements by category in document, return element grouped by category.
            </summary>
            <param name="document">Document as Revit type</param>
            <param name="category">Category</param>
            <returns name="Element">Element</returns>
            <returns name="Category">Category</returns>
        </member>
        <member name="M:Orchid.RevitProject.Elements.Selection.ElementByCategoryType(System.Collections.Generic.List{Autodesk.Revit.DB.Document},System.Collections.Generic.List{System.String})">
            <summary>
            Get all elements by category in document, return element grouped by category and category type.
            </summary>
            <param name="document">Document as Revit type</param>
            <param name="categoryType">CategoryType</param>
            <returns name="Element">Element</returns>
            <returns name="Category">Category</returns>
            <returns name="CategoryType">CategoryType</returns>
        </member>
        <member name="M:Orchid.RevitProject.Elements.Selection.ElementByFamily(Revit.Elements.Family)">
            <summary>
            Get all elements of the specified family from the model.
            </summary>
            <param name="family">The Family</param>
            <returns name="Element">The list of elements matching the query.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Elements.Family.All">
            <summary>
            Get all family in current document
            </summary>
            <returns name="Family">Family</returns>
            <returns name="Category">Category</returns>
        </member>
        <member name="M:Orchid.RevitProject.Elements.Family.ByCategory(System.Object)">
            <summary>
            Get all family by category in list of documents
            </summary>
            <param name="category">Category as string or Category type</param>
            <returns name="Family">Family</returns>
        </member>
        <member name="M:Orchid.RevitProject.Elements.Family.FamilyDocument(System.Collections.Generic.List{Revit.Elements.Family})">
            <summary>
            Open family document by family 
            </summary>
            <param name="family">Family</param>
            <returns name="Document">Document as Revit type</returns>
        </member>
        <member name="M:Orchid.RevitProject.Elements.Family.HasAssociated(Revit.Elements.Family)">
            <summary>
            Verify if family has associated elements
            </summary>
            <param name="family">Family</param>
            <returns name="bool">Boolean value</returns>
        </member>
        <member name="M:Orchid.RevitProject.Elements.FamilyType.All">
            <summary>
            Get all family types in current document
            </summary>
            <returns name="FamilyType">FamilyType as Dynamo type</returns>
            <returns name="Category">Category as Dynamo type</returns>
        </member>
        <member name="M:Orchid.RevitProject.Elements.FamilyType.ByCategory(System.Object)">
            <summary>
            Get all family types by category in list of documents
            </summary>
            <param name="category">Category as string or Dynamo type</param>
            <returns name="FamilyType">Family type</returns>
        </member>
        <member name="M:Orchid.RevitProject.Elements.FamilyType.RevitFamily(System.Collections.Generic.List{Revit.Elements.FamilyType})">
            <summary>
            open family document by family type
            </summary>
            <param name="familyType">FamilyType as Dynamo type</param>
            <returns name="Document">Document as Revit type</returns>
        </member>
        <member name="M:Orchid.RevitProject.Elements.FamilyType.HasAssociated(Revit.Elements.FamilyType)">
            <summary>
            Verify if family type has associated elements
            </summary>
            <param name="familyType">FamilyType as Dynamo type</param>
            <returns name="bool">Boolean value</returns>
        </member>
        <member name="M:Orchid.RevitProject.Elements.Floor.SetAreaLoad(System.Collections.Generic.List{Revit.Elements.Element},System.Collections.Generic.List{Revit.Elements.Element},System.Collections.Generic.List{System.Double})">
            <summary>
            Set (structural) floor area load
            </summary>
            <param name="element">Element as Dynamo type</param>
            <param name="areaLoadType">AreaLoadType as Dynamo type</param>
            <param name="value">Load value as double</param>
            <returns name="value">Load value as double</returns>
        </member>
        <member name="M:Orchid.RevitProject.Elements.SubCategory.Create(System.Object,System.String)">
            <summary>
            Create subcategory by category in document.
            </summary>
            <param name="category">Category</param>
            <param name="name">Name of the subcategory</param>
            <returns name="SubCategory">Category</returns>
        </member>
        <member name="M:Orchid.RevitProject.Elements.SubCategory.Remove(System.Object,System.Object)">
            <summary>
            Remove subcategory by category in document.
            </summary>
            <param name="category">Category</param>
            <param name="subCategory">The subcategory as string or category</param>
            <returns name="watch">Add a watch node to verify the output</returns>
        </member>
        <member name="M:Orchid.RevitProject.Elements.SubCategory.ByCategory(System.Object)">
            <summary>
            Get subcategories by category in document
            </summary>
            <param name="category">Category</param>
            <returns name="SubCategory">Category</returns>
        </member>
        <member name="M:Orchid.RevitProject.Elements.SubCategory.ByName(System.Object,System.String)">
            <summary>
             Get subcategory by name in document.
            </summary>
            <param name="category">Category</param>
            <param name="name">Name of the subcategory</param>
            <returns name="SubCategory">Category</returns>
        </member>
        <member name="M:Orchid.RevitProject.Elements.SubCategory.ByName(System.String)">
            <summary>
             Get subcategory by name in document.
            </summary>
            <param name="name">Name of the subcategory</param>
            <returns name="SubCategory">Category</returns>
        </member>
        <member name="M:Orchid.RevitProject.Elements.SystemFamily.CreateCompoundLayer(System.Collections.IList,System.Collections.Generic.List{System.String},System.Collections.Generic.List{Revit.Elements.Element},System.Collections.Generic.List{System.Double},System.Collections.Generic.List{System.Boolean},System.Collections.Generic.List{System.Boolean},System.Collections.Generic.List{System.Boolean},System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.Int32})">
            <summary>
            Create a layer by index at a specified compound layer in a system
            family type that have a compound structure (walls, floors, roofs etc.).
            </summary>
            <param name="elementType">The system family type</param>
            <param name="function">The function of the layer (integer)</param>
            <param name="material">The material (dynamo type)</param>
            <param name="thickness">Thickness of the layer</param>
            <param name="wrapping">Wrapping of the layer</param>
            <param name="variable">Set the layer variable</param>
            <param name="structural">Set the layer structural</param>
            <param name="placement">Placement of the layer (string)</param>
            <param name="index">The index of the layer</param>
            <returns name="ElementType">FamilyType</returns>
        </member>
        <member name="M:Orchid.RevitProject.Elements.SystemFamily.DeleteCompoundLayer(System.Collections.IList,System.Collections.Generic.List{System.Int32})">
            <summary>
            Delete a layer by index at a specified compound layer in a system
            family type that have a compound structure (walls, floors, roofs etc.).
            </summary>
            <param name="elementType">The system family type</param>
            <param name="index">The index of the layer</param>
            <returns name="ElementType">FamilyType</returns>
        </member>
        <member name="M:Orchid.RevitProject.Elements.SystemFamily.GetCompoundLayerMaterial(System.Collections.IList)">
            <summary>
            Get the compound layer material in a system family type that
            have a compound structure (walls, floors, roofs etc.).
            </summary>
            <param name="elementType">The system family type</param>
            <returns name="Material">Material</returns>
        </member>
        <member name="M:Orchid.RevitProject.Elements.SystemFamily.GetCompoundLayerWidth(System.Collections.IList)">
            <summary>
            Get the compound layer width in a system family type that
            have a compound structure (walls, floors, roofs etc.).
            </summary>
            <param name="elementType">The system family type</param>
            <returns name="double">Width</returns>
        </member>
        <member name="M:Orchid.RevitProject.Elements.SystemFamily.SetCompoundLayerMaterial(System.Collections.IList,System.Collections.Generic.List{Revit.Elements.Element},System.Collections.Generic.List{System.Int32})">
            <summary>
            Set the material by index at a specified compound layer in a system
            family type that have a compound structure (walls, floors, roofs etc.).
            </summary>
            <param name="elementType">The system family type</param>
            <param name="material">The material (dynamo type)</param>
            <param name="index">The index to set</param>
            <returns name="ElementType">FamilyType</returns>
        </member>
        <member name="M:Orchid.RevitProject.Elements.SystemFamily.SetCompoundLayerWidth(System.Collections.IList,System.Collections.Generic.List{System.Double},System.Collections.Generic.List{System.Int32})">
            <summary>
            Set the width by index at a specified compound layer in a system
            family type that have a compound structure (walls, floors, roofs etc.).
            </summary>
            <param name="elementType">The system family type</param>
            <param name="thickness">Thickness of the layer</param>
            <param name="index">The index to set</param>
            <returns name="ElementType">FamilyType</returns>
        </member>
        <member name="M:Orchid.RevitProject.Elements.SystemFamily.SetCompoundLayerWrapping(System.Collections.IList,System.Collections.Generic.List{System.Boolean},System.Collections.Generic.List{System.Int32})">
            <summary>
            Wrapping of the layer by index at a specified compound layer in a system
            family type that have a compound structure (walls, floors, roofs etc.).
            </summary>
            <param name="elementType">The system family type</param>
            <param name="wrapping">Wrapping of the layer</param>
            <param name="index">The index to set</param>
            <returns name="ElementType">FamilyType</returns>
        </member>
        <member name="M:Orchid.RevitProject.Elements.SystemFamily.SetCompoundLayerVariable(System.Collections.IList,System.Collections.Generic.List{System.Boolean},System.Collections.Generic.List{System.Int32})">
            <summary>
            Set the layer variable by index at a specified compound layer in a system
            family type that have a compound structure (walls, floors, roofs etc.).
            </summary>
            <param name="elementType">The system family type</param>
            <param name="variable">Set the layer variable</param>
            <param name="index">The index to set</param>
            <returns name="ElementType">FamilyType</returns>
        </member>
        <member name="M:Orchid.RevitProject.Elements.SystemFamily.SetCompoundLayerStructural(System.Collections.IList,System.Collections.Generic.List{System.Boolean},System.Collections.Generic.List{System.Int32})">
            <summary>
            Set the layer structural by index at a specified compound layer in a system
            family type that have a compound structure (walls, floors, roofs etc.).
            </summary>
            <param name="elementType">The system family type</param>
            <param name="structural">Set the layer structural</param>
            <param name="index">The index to set</param>
            <returns name="ElementType">FamilyType</returns>
        </member>
        <member name="M:Orchid.RevitProject.Grid.GetVerticalExtents(Revit.Elements.Element)">
            <summary>
            Get grid vertical extents
            </summary>
            <param name="grid">Grid as Dynamo type</param>
            <returns name="Grid">Grid as Dynamo type</returns>
            <returns name="TopExtent">double</returns>
            <returns name="BottomExtent">double</returns>
        </member>
        <member name="M:Orchid.RevitProject.Grid.SetVerticalExtents(Revit.Elements.Element,System.Double,System.Double)">
            <summary>
            Set grid vertical extents
            </summary>
            <param name="grid">Grid as Dynamo type</param>
            <param name="topExtent">double</param>
            <param name="bottomExtent">double</param>
            <returns name="Grid">Grid as Dynamo type</returns>
        </member>
        <member name="M:Orchid.RevitProject.Grid.MoveVerticalExtents(Revit.Elements.Element,System.Double)">
            <summary>
            Move grid vertical extents
            </summary>
            <param name="grid">Grid as Dynamo type</param>
            <param name="distance">double</param>
            <returns name="Grid">Grid as Dynamo type</returns>
        </member>
        <member name="M:Orchid.RevitProject.IFC.SettingByName(System.String)">
            <summary>
            Ifc export setting, based on the available in the document
            </summary>
            <param name="name">The IFC setting name</param>
            <returns name="Setting">Ifc export setting</returns>
        </member>
        <member name="M:Orchid.RevitProject.IFC.SettingGeneral(BIM.IFC.Export.UI.IFCExportConfiguration,System.String,System.String,System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Set general IFC export setting
            </summary>
            <param name="setting">IFC export setting</param> 
            <param name="ifcVersion">IFC version as string</param>
            <param name="ifcFileType">IFC file type as string</param>
            <param name="spaceBoundary">Space boundaries as integer</param>
            <param name="projectOrigin">Project origin as integer</param>
            <param name="splitByLevel">Split walls, columns, ducts by level?</param>
            <param name="includeSteel">Include steel elements?</param>
            <returns name="Setting">IFC export setting</returns>
        </member>
        <member name="M:Orchid.RevitProject.IFC.SettingAdditional(BIM.IFC.Export.UI.IFCExportConfiguration,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Int32)">
            <summary>
            Set additional content and level of detail IFC export setting
            </summary>
            <param name="setting">IFC export setting</param> 
            <param name="Export2Dplan">Export 2D plan view elements?</param>
            <param name="LinkedFiles">Export linked files as separate IFCs?</param>
            <param name="VisibleElements">Export only elements visible in view?</param>
            <param name="RoomsInView">Export rooms in 3D views?</param>
            <param name="LOD">Level of detail for some element geometry</param>
            <returns name="Setting">IFC export setting</returns>
        </member>
        <member name="M:Orchid.RevitProject.IFC.SettingProperty(BIM.IFC.Export.UI.IFCExportConfiguration,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.String,System.Boolean,System.String)">
            <summary>
            Set Property sets IFC export setting
            </summary>
            <param name="setting">IFC export setting</param> 
            <param name="revitProperty">Export Revit property sets?</param>
            <param name="commonProperty">Export IFC common property sets?</param>
            <param name="baseQuantities">Export base quantities?</param>
            <param name="exportSchedules">Export schedules as property sets?</param>
            <param name="specificSchedules">Export only schedules containing IFC, Pset, or Common in the title?</param>
            <param name="userProperty">Export user defined property sets?</param>
            <param name="userPropertyFile">Property set file name incl. path</param>
            <param name="parameterMapping">Export parameter mapping table?</param>
            <param name="parameterMappingFile">Mapping table file name incl. path</param>
            <returns name="Setting">IFC export setting</returns>
        </member>
        <member name="M:Orchid.RevitProject.IFC.SettingAdvanced(BIM.IFC.Export.UI.IFCExportConfiguration,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Set advanced IFC export setting
            </summary>
            <param name="setting">IFC export setting</param> 
            <param name="exportParts">Export parts as building elements?</param>
            <param name="exportSolid">Allow use of mixed "Solid Model" representation?</param>
            <param name="activeViewGeometry">Use active view when creating geometry?</param>
            <param name="familyAndType">Use family and type name for reference?</param>
            <param name="roomBoundary">Use 2D room boundaries for room volume?</param>
            <param name="siteElevation">Include IFCSITE elevation in the site local placement origin?</param>
            <param name="storeGuid">Store the IFC GUID in an element parameter after export?</param>
            <param name="boundingBox">Export bounding box?</param>
            <param name="triangulation">Keep tessellated geometry as triangulation?</param>
            <returns name="Setting">IFC export setting</returns>
        </member>
        <member name="M:Orchid.RevitProject.IFC.Export(Autodesk.Revit.DB.Document,BIM.IFC.Export.UI.IFCExportConfiguration,Revit.Elements.Element,Revit.Elements.Element,System.String,System.Boolean)">
            <summary>
            Export to IFC. Require IFC exporter 19.1.0 or higher
            https://sourceforge.net/projects/ifcexporter
            . the export function includes a default IFC export setting!
            </summary>
            <param name="document">Document as Revit type</param>
            <param name="setting">IFC export setting</param>
            <param name="view">View as Dynamo type</param>
            <param name="phase">Phase to export as Dynamo type</param>
            <param name="file">The export file name incl. path</param>
            <param name="overwrite">Overwrite existing file?</param>
            <returns name="watch">Add a watch node to verify the output</returns>
        </member>
        <member name="M:Orchid.RevitProject.Parameters.BuiltInParameter.Name(System.Int32)">
            <summary>
            Get the builtin parameter name
            </summary>
            <param name="parameterId">Integer value for the builtin parameter</param>
            <returns name="string">string</returns>
        </member>
        <member name="M:Orchid.RevitProject.Parameters.BuiltInParameter.Label(System.Int32)">
            <summary>
            Get the builtin parameter label
            </summary>
            <param name="parameterId">Integer value for the builtin parameter</param>
            <returns name="string">string</returns>
        </member>
        <member name="M:Orchid.RevitProject.Parameters.BuiltInParameter.All">
            <summary>
            Get all builtin parameters.
            </summary>
            <returns name="int">parameter ids</returns>
        </member>
        <member name="M:Orchid.RevitProject.Parameters.Parameter.AddProjectParameter(System.Collections.Generic.List{System.String},System.String,System.String,System.Boolean,System.Collections.Generic.List{Revit.Elements.Category})">
            <summary>
            Add (create) project parameter by name. 
            If the parameter exists is the category binding being updated.
            </summary>
            <param name="parameterName">The name of the parameter to add</param>
            <param name="type">Parameter Type</param>
            <param name="group">Parameter Group</param>
            <param name="instance">Is instance parameter, otherwise it's a type parameter</param>
            <param name="category">Category(ies) the parameter applies to, If no category is supplied, all possible categories are selected</param>
        </member>
        <member name="M:Orchid.RevitProject.Parameters.Parameter.AddSharedParameter(System.Collections.Generic.List{System.String},System.String,System.String,System.String,System.Boolean,System.Collections.Generic.List{Revit.Elements.Category})">
            <summary>
            Add shared parameter by name in the project.
            If the parameter not exists in the shared parameter file is an error thrown!
            If the parameter exists is the category binding being updated.
            </summary>
            <param name="parameterName">The name of the parameter to add</param>
            <param name="groupName">Group of the parameter for shared parameters</param>
            <param name="type">Parameter Type</param>
            <param name="group">Parameter Group</param>
            <param name="instance">Is instance parameter, otherwise it's a type parameter</param>
            <param name="category">Category(ies) the parameter applies to, If no category is supplied, all possible categories are selected</param>
        </member>
        <member name="M:Orchid.RevitProject.Parameters.Parameter.CreateSharedParameter(System.Collections.Generic.List{System.String},System.String,System.String,System.String,System.Boolean,System.Collections.Generic.List{Revit.Elements.Category})">
            <summary>
            Create shared parameter by name in the project. 
            If the parameter not exists in the shared parameter file is it being created.
            If the parameter exists is the category binding being updated.
            </summary>
            <param name="parameterName">The name of the parameter to add</param>
            <param name="groupName">Group of the parameter for shared parameters</param>
            <param name="type">Parameter Type</param>
            <param name="group">Parameter Group</param>
            <param name="instance">Is instance parameter, otherwise it's a type parameter</param>
            <param name="category">Category(ies) the parameter applies to, If no category is supplied, all possible categories are selected</param>
        </member>
        <member name="M:Orchid.RevitProject.Parameters.Parameter.AddIfcParameters(System.Collections.Generic.IList{Autodesk.Revit.DB.Document})">
            <summary>
            Add basic IFC parameters in the project (IfcExportAs, IfcExportType, IfcDescription, IFC CAD Layer)
            </summary>
            <param name="document">Document as Revit type</param>
        </member>
        <member name="M:Orchid.RevitProject.Parameters.Parameter.Name(System.Int32)">
            <summary>
            Get the parameter name or the builtin parameter label
            </summary>
            <param name="parameterId">Integer value for the parameter</param>
            <returns name="string">string</returns>
        </member>
        <member name="M:Orchid.RevitProject.Parameters.Parameter.ProjectParameters(Autodesk.Revit.DB.Document)">
            <summary>
            Get all project parameters in the document
            </summary>
            <param name="document">Document as Revit type</param>
            <returns name="parameter">List of parameters</returns>
        </member>
        <member name="M:Orchid.RevitProject.Parameters.Parameter.GlobalParameters(Autodesk.Revit.DB.Document)">
            <summary>
            Get all global parameters in the document
            </summary>
            <param name="document">Document as Revit type</param>
            <returns name="parameter">List of parameters</returns>
        </member>
        <member name="M:Orchid.RevitProject.Parameters.Parameter.SharedParameters(Autodesk.Revit.DB.Document)">
            <summary>
            Get all shared parameters in the document
            </summary>
            <param name="document">Document as Revit type</param>
            <returns name="parameter">List of parameters</returns>
            <returns name="guid">List of guids</returns>
        </member>
        <member name="M:Orchid.RevitProject.Parameters.Parameter.ChangeCategory(System.Collections.Generic.IList{System.String},System.Boolean,System.Collections.Generic.List{Revit.Elements.Category})">
            <summary>
            Change category binding for parameter by name in the project
            </summary>
            <param name="parameterName">The name of the parameter to change</param>
            <param name="instance">Is instance parameter, otherwise it's a type parameter</param>
            <param name="category">Category(ies) to change the parameter binding to</param>
        </member>
        <member name="M:Orchid.RevitProject.Parameters.Parameter.Delete(System.Collections.Generic.List{System.String})">
            <summary>
            Delete parameter by name in the project
            </summary>
            <param name="parameterName">The name of the parameter to delete</param>
        </member>
        <member name="M:Orchid.RevitProject.Parameters.Parameter.Associate(Revit.Elements.Element,System.String,System.Object)">
            <summary>
            Associate element parameter to global parameter
            </summary>
            <param name="element">Element as string or Dynamo type</param>
            <param name="parameterName">The name of the parameter</param>
            <param name="globalParameter">The name of the global parameter</param>
            <returns name="Element">Element as Dynamo type</returns>
        </member>
        <member name="M:Orchid.RevitProject.Parameters.Parameter.HasAssociated(Revit.Elements.Element,System.String)">
            <summary>
            Verify if parameter has associated global parameter
            </summary>
            <param name="element">Element as string or Dynamo type</param>
            <param name="parameterName">The name of the parameter</param>
            <returns name="bool">Boolean value</returns>
        </member>
        <member name="M:Orchid.RevitProject.Parameters.Parameter.GetAssociated(Revit.Elements.Element,System.String)">
            <summary>
            Get associated global parameter
            </summary>
            <param name="element">Element as string or Dynamo type</param>
            <param name="parameterName">The name of the parameter</param>
            <returns name="Parameter">Parameter</returns>
        </member>
        <member name="M:Orchid.RevitProject.Parameters.SharedParameter.SetFile(System.String)">
            <summary>
            Set the shared parameter file
            </summary>
            <param name="file">The "new" shared parameter file, incl. path</param>
            <returns name="file">The previously loaded shared parameter file</returns>
        </member>
        <member name="M:Orchid.RevitProject.Parameters.SharedParameter.GroupByType(System.String)">
            <summary>
            Get the shared parameter grouped by type
            </summary>
            <param name="file">The shared parameter file, incl. path</param>
            <returns name="parameter">List of parameters</returns>
            <returns name="guid">List of guids</returns>
            <returns name="groupName">List of group names</returns>
            <returns name="type">List of types</returns>
        </member>
        <member name="M:Orchid.RevitProject.Parameters.SharedParameter.GroupByGroupName(System.String)">
            <summary>
            Get the shared parameter grouped by group name
            </summary>
            <param name="file">The shared parameter file, incl. path</param>
            <returns name="parameter">List of parameters</returns>
            <returns name="guid">List of guids</returns>
            <returns name="groupName">List of group names</returns>
            <returns name="type">List of types</returns>
        </member>
        <member name="M:Orchid.RevitProject.PostCommand.AppDialogShowing(System.Object,Autodesk.Revit.UI.Events.DialogBoxShowingEventArgs)">
            The DialogBoxShowing event handler
        </member>
        <member name="M:Orchid.RevitProject.PostCommand.Purge(System.Boolean)">
            <summary>
            Purge document by Post Command.
            Post commands can only take the current document to be run once. Re-run the
            graph to re-activate the post command. To get back the "Purge" window inside
            Revit, set the "activate" value to "false" and re-run the graph once more!
            </summary>
            <param name="activate">Set to true to activate (and false to deactivate)</param>
        </member>
        <member name="M:Orchid.RevitProject.Project.GetProjectLocation">
            <summary>
            Get project location
            </summary>
            <returns name="Origin">Origin as project location</returns>
        </member>
        <member name="M:Orchid.RevitProject.Project.SetProjectLocation(Revit.Elements.Element)">
            <summary>
            Set project location
            </summary>
            <param name="origin">Origin as project location</param>
            <returns name="Origin">Origin as project location</returns>
        </member>
        <member name="M:Orchid.RevitProject.Project.AllLevels">
            <summary>
            Get all levels in the current document.
            </summary>
            <returns name="Level">The list of levels.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Project.AllRevisions">
            <summary>
            Get all revisions in the current document.
            </summary>
            <returns name="Revision">The list of revisions.</returns>
        </member>
        <member name="M:Orchid.RevitProject.Project.AllRevisionClouds">
            <summary>
            Get all revision clouds in the current document.
            </summary>
            <returns name="RevisionCloud">The list of revision clouds.</returns>
        </member>
        <member name="M:Orchid.RevitProject.DuplicateUtils.SeparateElements(Autodesk.Revit.DB.Document,System.Collections.Generic.ICollection{Autodesk.Revit.DB.ElementId},Autodesk.Revit.DB.Document,System.Collections.Generic.ICollection{Autodesk.Revit.DB.ElementId})">
            Find separate elements
        </member>
        <member name="M:Orchid.RevitProject.DuplicateUtils.MatchElements(Autodesk.Revit.DB.Document,System.Collections.Generic.ICollection{Autodesk.Revit.DB.ElementId},Autodesk.Revit.DB.Document,System.Collections.Generic.ICollection{Autodesk.Revit.DB.ElementId})">
            Find matching elements
        </member>
        <member name="M:Orchid.RevitProject.DuplicateUtils.TransferElements(Autodesk.Revit.DB.Document,System.Collections.Generic.ICollection{Autodesk.Revit.DB.ElementId},Autodesk.Revit.DB.Document)">
            Transfer a set of elements across documents.
        </member>
        <member name="M:Orchid.RevitProject.DuplicateUtils.TransferLinkedElements(Autodesk.Revit.DB.Document,Autodesk.Revit.DB.RevitLinkInstance,System.Collections.Generic.ICollection{Autodesk.Revit.DB.ElementId},Autodesk.Revit.DB.Document)">
            Transfer a set of elements across linked documents.
        </member>
        <member name="M:Orchid.RevitProject.DuplicateUtils.xTransferLinkedElements(Autodesk.Revit.DB.Document,Autodesk.Revit.DB.RevitLinkInstance,System.Collections.Generic.ICollection{Autodesk.Revit.DB.ElementId},Autodesk.Revit.DB.Document)">
            Transfer a set of elements across linked documents.
        </member>
        <member name="M:Orchid.RevitProject.DuplicateUtils.TransferDetalingElements(Autodesk.Revit.DB.View,Autodesk.Revit.DB.View)">
            Transfer all view-specific elements from source view to target view.
        </member>
        <member name="M:Orchid.RevitFamily.Document.LoadFamily(Autodesk.Revit.DB.Document)">
            <summary>
            Load family by file name, same core process as File.LoadFamily
            </summary>
            <param name="familyDocument">Family document as Revit document (rfa)</param>
            <returns name="watch">Add a watch node to verify the output</returns>
        </member>
        <member name="M:Orchid.RevitFamily.Document.AddLookupTable(Autodesk.Revit.DB.Document,System.String)">
            <summary>
            Load lookup file by name
            </summary>
            <param name="familyDocument">Family document as Revit document (rfa)</param>
            <param name="file">Lookup file (path) to load.</param>
            <returns name="watch">Add a watch node to verify the output</returns>
        </member>
        <member name="M:Orchid.RevitFamily.Document.GetCategory(Autodesk.Revit.DB.Document)">
            <summary>
            Get the family document category.
            </summary>
            <param name="familyDocument">Family document as Revit document (rfa)</param>
            <returns name="Category">Category as Dynamo type</returns>
        </member>
        <member name="M:Orchid.RevitFamily.Document.SetCategory(Autodesk.Revit.DB.Document,System.Object)">
            <summary>
            Set the family document category.
            </summary>
            <param name="familyDocument">Family document as Revit document (rfa)</param>
            <param name="category">Gategory as string or Dynamo type</param>
            <returns name="Category">Category as Dynamo type</returns>
        </member>
        <member name="M:Orchid.RevitFamily.Family.GetNested(Autodesk.Revit.DB.Document)">
            <summary>
            Get nested family in the familyDocument
            </summary>
            <param name="familyDocument">Family document as Revit document (rfa)</param>
            <returns name="Family">Family as Dynamo type</returns>
        </member>
        <member name="M:Orchid.RevitFamily.FamilyType.Current">
            <summary>
            Get the current family type.
            Note: If no current family types exists, then a default 
            family type will be created named as the familyDocument.
            </summary>
            <returns name="FamilyType">FamilyType as Revit type</returns>
        </member>
        <member name="M:Orchid.RevitFamily.FamilyType.Current(Autodesk.Revit.DB.Document)">
            <summary>
            Get the current family type in the familyDocument. 
            Note: If no current family types exists, then a default 
            family type will be created named as the familyDocument.
            </summary>
            <param name="familyDocument">Family document as Revit document (rfa)</param>
            <returns name="FamilyType">FamilyType as Revit type</returns>
        </member>
        <member name="M:Orchid.RevitFamily.FamilyType.Name(Autodesk.Revit.DB.FamilyType)">
            <summary>
            Get the family type name
            </summary>
            <param name="familyType">The name of the family type</param>
            <returns name="string">Name as string</returns>
        </member>
        <member name="M:Orchid.RevitFamily.FamilyType.All(Autodesk.Revit.DB.Document)">
            <summary>
            Get all family types in the familyDocument.
            Note: If no family types exists, then a default 
            family type will be created named as the familyDocument.
            </summary>
            <param name="familyDocument">Family document as Revit document (rfa)</param>
            <returns name="FamilyType">FamilyType as Revit type</returns>
        </member>
        <member name="M:Orchid.RevitFamily.FamilyType.All">
            <summary>
            Get all family types.
            Note: If no family types exists, then a default 
            family type will be created named as the familyDocument.
            </summary>
            <returns name="FamilyType">FamilyType as Revit type</returns>
        </member>
        <member name="M:Orchid.RevitFamily.FamilyType.Create(Autodesk.Revit.DB.Document,System.Collections.Generic.List{System.String})">
            <summary>
            Create family type by name.
            Note: If no input to name is provided (default as null), then a default 
            family type will be created named as the familyDocument.
            </summary>
            <param name="familyDocument">Family document as Revit document (rfa)</param>
            <param name="name">The family type name</param>
            <returns name="FamilyType">FamilyType as Revit type</returns>
        </member>
        <member name="M:Orchid.RevitFamily.FamilyType.Rename(Autodesk.Revit.DB.Document,System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String})">
            <summary>
            Rename family type by name
            </summary>
            <param name="familyDocument">Family document as Revit document (rfa)</param>
            <param name="sourceName">The name of the source family type</param>
            <param name="targetName">The name of the target family type</param>
            <returns name="watch">Add a watch node to verify the output</returns>
        </member>
        <member name="M:Orchid.RevitFamily.FamilyType.Delete(Autodesk.Revit.DB.Document,System.Collections.Generic.List{System.Object})">
            <summary>
            Delete family type by name
            </summary>
            <param name="familyDocument">Family document as Revit document (rfa)</param>
            <param name="familyType">FamilyType as string or Revit type</param>
            <returns name="watch">Add a watch node to verify the output</returns>
        </member>
        <member name="M:Orchid.RevitFamily.FamilyType.GetNested(Autodesk.Revit.DB.Document)">
            <summary>
            Get nested family in the familyDocument
            </summary>
            <param name="familyDocument">Family document as Revit document (rfa)</param>
            <returns name="FamilyType">FamilyType as Dynamo type</returns>
        </member>
        <member name="M:Orchid.RevitFamily.Formula.Get(Autodesk.Revit.DB.Document,System.Collections.Generic.List{System.String})">
            <summary>
            Get family formula by parameter name.
            Note: If no family types exists, then a default 
            family type will be created named as the familyDocument.
            </summary>
            <param name="familyDocument">Family document as Revit document (rfa)</param>
            <param name="parameterName">The name of the parameter to get</param>
            <returns name="formula">Formula as string</returns>
        </member>
        <member name="M:Orchid.RevitFamily.Formula.Set(Autodesk.Revit.DB.Document,System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String})">
            <summary>
            Set family formula by parameter name.
            Note: If no family types exists, then a default 
            family type will be created named as the familyDocument.
            </summary>
            <param name="familyDocument">Family document as Revit document (rfa)</param>
            <param name="parameterName">The name of the parameter to set</param>
            <param name="value">The value</param>
            <returns name="watch">Add a watch node to verify the output</returns>
        </member>
        <member name="M:Orchid.RevitFamily.Formula.Remove(Autodesk.Revit.DB.Document,System.Collections.Generic.List{System.String})">
            <summary>
            Remove family formula value by name
            Note: If no family types exists, then a default 
            family type will be created named as the familyDocument.
            </summary>
            <param name="familyDocument">Family document as Revit document (rfa)</param>
            <param name="parameterName">The name of the parameter to remove formula</param>
            <returns name="watch">Add a watch node to verify the output</returns>
        </member>
        <member name="M:Orchid.RevitFamily.Nested.GetAssociated(Autodesk.Revit.DB.Document)">
            <summary>
            Get associated parameter, nested family, nested family type, and nested family parameter
            </summary>
            <param name="familyDocument">Family document as Revit document (rfa)</param>
            <returns name="documentParameter">Family document parameter</returns>
            <returns name="Family">Nested family in the document</returns>
            <returns name="FamilyType">Nested family type in the document</returns>
            <returns name="familyParameter">Nested family parameter in the document</returns>
        </member>
        <member name="M:Orchid.RevitFamily.Parameter.Parameters(Autodesk.Revit.DB.Document)">
            <summary>
            Obtain all of the Parameters from the family document, sorted by Name.
            </summary>
            <param name="familyDocument">Family document as Revit document (rfa)</param>
            <returns name="Parameter">Parameter</returns>
        </member>
        <member name="M:Orchid.RevitFamily.Parameter.Name(Autodesk.Revit.DB.FamilyParameter)">
            <summary>
            Get family parameter name
            </summary>
            <param name="parameter">FamilyParameter as Revit type</param>
            <returns name="string">Name as string</returns>
        </member>
        <member name="M:Orchid.RevitFamily.Parameter.AddParameter(Autodesk.Revit.DB.Document,System.Collections.Generic.IList{System.String},System.String,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Add (create) parameter by name
            </summary>
            <param name="familyDocument">Family document as Revit document (rfa)</param>
            <param name="parameterName">The name of the parameter to create</param>
            <param name="type">Parameter Type</param>
            <param name="group">Parameter Group</param>
            <param name="tooltip">Tooltip for the parameter</param>
            <param name="instance">Is instance parameter, otherwise it's a type parameter</param>
            <param name="reporting">Is reporting parameter. Is only available to Length and Angle parameters!</param>
            <returns name="Parameter">Parameter</returns>
        </member>
        <member name="M:Orchid.RevitFamily.Parameter.AddParameter(Autodesk.Revit.DB.Document,System.Collections.Generic.IList{System.String},Revit.Elements.Category,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Add (create) parameter by name
            </summary>
            <param name="familyDocument">Family document as Revit document (rfa)</param>
            <param name="parameterName">The name of the parameter to create</param>
            <param name="category">Category for Family Type as Parameter Type</param>
            <param name="group">Parameter Group</param>
            <param name="tooltip">Tooltip for the parameter</param>
            <param name="instance">Is instance parameter, otherwise it's a type parameter</param>
            <param name="reporting">Is reporting parameter. Is only available to Length and Angle parameters!</param>
            <returns name="Parameter">Parameter</returns>
        </member>
        <member name="M:Orchid.RevitFamily.Parameter.AddSharedParameter(Autodesk.Revit.DB.Document,System.Collections.Generic.List{System.String},System.String,System.String,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Add shared parameter by name.
            If the parameter not exists in the shared parameter file is an error thrown!
            </summary>
            <param name="familyDocument">Family document as Revit document (rfa)</param>
            <param name="parameterName">The name of the parameter to add</param>
            <param name="groupName">Group of the parameter for the shared parameter</param>
            <param name="type">Parameter Type</param>
            <param name="group">Parameter Group</param>
            <param name="tooltip">Tooltip for the parameter</param>
            <param name="instance">Is instance parameter, otherwise it's a type parameter</param>
            <param name="reporting">Is reporting parameter. Is only available to Length and Angle parameters!</param>
            <returns name="Parameter">Parameter</returns>
        </member>
        <member name="M:Orchid.RevitFamily.Parameter.CreateSharedParameter(Autodesk.Revit.DB.Document,System.Collections.Generic.List{System.String},System.String,System.String,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Create shared parameter by name. 
            If the parameter not exists in the shared parameter file is it being created.
            </summary>
            <param name="familyDocument">Family document as Revit document (rfa)</param>
            <param name="parameterName">The name of the parameter to add</param>
            <param name="groupName">Group of the parameter for the shared parameter</param>
            <param name="type">Parameter Type</param>
            <param name="group">Parameter Group</param>
            <param name="tooltip">Tooltip for the parameter</param>
            <param name="instance">Is instance parameter, otherwise it's a type parameter</param>
            <param name="reporting">Is reporting parameter. Is only available to Length and Angle parameters!</param>
            <returns name="Parameter">Parameter</returns>
        </member>
        <member name="M:Orchid.RevitFamily.Parameter.AddIfcParameters(Autodesk.Revit.DB.Document)">
            <summary>
            Add basic IFC parameters in the family (IfcExportAs, IfcExportType, IfcDescription, IFC CAD Layer)
            </summary>
            <param name="familyDocument">Document as Revit type</param>
            <returns name="Parameter">Parameter</returns>
        </member>
        <member name="M:Orchid.RevitFamily.Parameter.GetValue(Autodesk.Revit.DB.Document,System.Collections.Generic.List{System.Object},System.Collections.Generic.List{System.String})">
            <summary>
            Get family parameter value by parameter name
            Note: If no family type is provided (default as null), then will the
            default family type in the familyDocument be used. Furthermore, 
            If no family types exists, then a default 
            family type will be created named as the familyDocument.
            </summary>
            <param name="familyDocument">Family document as Revit document (rfa)</param>
            <param name="familyType">Family type as string or Revit type</param>
            <param name="parameterName">The name of the parameter to get</param>
            <returns name="valueByType">Value by familyType</returns>
            <returns name="valueByParameter">Value by parameterName</returns>
        </member>
        <member name="M:Orchid.RevitFamily.Parameter.SetValue(Autodesk.Revit.DB.Document,System.Collections.Generic.List{System.Object},System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.Object})">
            <summary>
            Set family parameter value by parameter name.
            Provided values must comply with the number of family types!
            Note: If no family type is provided (default as null), then will the
            default family type in the familyDocument be used. Furthermore, 
            If no family types exists, then a default 
            family type will be created named as the familyDocument.
            </summary>
            <param name="familyDocument">Family document as Revit document (rfa)</param>
            <param name="familyType">Family type as string or Revit type</param>
            <param name="parameterName">The name of the parameter to set</param>
            <param name="value">The value to set</param>
            <returns name="Parameter">Parameter as Revit type</returns>
        </member>
        <member name="M:Orchid.RevitFamily.Parameter.Rename(Autodesk.Revit.DB.Document,System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String})">
            <summary>
            Rename family parameter by parameter name
            </summary>
            <param name="familyDocument">Family document as Revit document (rfa)</param>
            <param name="sourceName">The name of the source parameter</param>
            <param name="targetName">The name of the target parameter</param>
            <returns name="watch">Add a watch node to verify the output</returns>
        </member>
        <member name="M:Orchid.RevitFamily.Parameter.Delete(Autodesk.Revit.DB.Document,System.Collections.Generic.IList{System.String})">
            <summary>
            Delete family parameter by parameter name
            </summary>
            <param name="familyDocument">Family document as Revit document (rfa)</param>
            <param name="parameterName">The name of the parameter to delete</param>
            <returns name="watch">Add a watch node to verify the output</returns>
        </member>
        <member name="M:Orchid.RevitFamily.Parameter.Convert(Autodesk.Revit.DB.Document,System.Collections.Generic.IList{System.String},System.Boolean)">
            <summary>
            Convert shared parameter to family parameter
            </summary>
            <param name="familyDocument">Family document as Revit document (rfa)</param>
            <param name="parameterName">The name of the parameter to delete</param>
            <param name="instance">Is instance parameter, otherwise it's a type parameter</param>
            <returns name="Parameter">Parameter</returns>
        </member>
        <member name="M:Orchid.RevitFamily.Parameter.IsReporting(Autodesk.Revit.DB.Document,System.Collections.Generic.List{System.String})">
            <summary>
            Verify if parameter is a reporting parameter
            </summary>
            <param name="familyDocument">Family document as Revit document (rfa)</param>
            <param name="parameterName">The name of the parameter to verify</param>
            <returns name="bool">Boolean value</returns>
        </member>
        <member name="M:Orchid.RevitFamily.Parameter.Associate(Autodesk.Revit.DB.Document,System.Collections.Generic.List{Revit.Elements.Element},System.Collections.IList,System.Collections.IList)">
            <summary>
            Associate document parameter with element parameter (e.g. nested family)
            </summary>
            <param name="familyDocument">Family document as Revit document (rfa)</param>
            <param name="element">Nested element (e.g. family type) in the familyDocument</param>
            <param name="documentParameter">The name of the familyDocument parameter to be associated</param>
            <param name="elementParameter">The name of the element parameter to be associated</param>
            <returns name="Parameter">Parameter</returns>
        </member>
        <member name="M:Orchid.RevitFamily.Parameter.HasAssociated(Autodesk.Revit.DB.Document,System.Collections.Generic.List{System.String})">
            <summary>
            Verify if parameter has associated elements
            </summary>
            <param name="familyDocument">Family document as Revit document (rfa)</param>
            <param name="parameterName">The name of the parameter to verify</param>
            <returns name="bool">Boolean value</returns>
        </member>
        <member name="M:Orchid.Internals.Convert.AutodeskFamilyTypeToString(System.Object)">
            Takes string and Revit.Elements.Element, return string
        </member>
        <member name="M:Orchid.Internals.Convert.DynamoElementToString(System.Object)">
            Takes string and Revit.Elements.Element, return string
        </member>
        <member name="M:Orchid.Internals.HideWarning.PreprocessFailures(Autodesk.Revit.DB.FailuresAccessor)">
            Implementation of the IFailuresPreprocessor.
        </member>
        <member name="T:Orchid.Internals.Files">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Orchid.Internals.Files.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Orchid.Internals.Files.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Orchid.Internals.Files.Materials2018">
            <summary>
              Looks up a localized resource of type System.Byte[].
            </summary>
        </member>
        <member name="P:Orchid.Internals.Files.Materials2019">
            <summary>
              Looks up a localized resource of type System.Byte[].
            </summary>
        </member>
        <member name="P:Orchid.Internals.Files.Materials2020">
            <summary>
              Looks up a localized resource of type System.Byte[].
            </summary>
        </member>
        <member name="T:Orchid.Internals.ObjectComparer">
            this method is forked from Dynamo
            
            Implements Compare function for two objects using following rule.
            1. Numbers are assumed to be smallest, then bool, string and pointers.
            2. If the two objects are IComparable and of the same type, then use it's native comparison mechanism.
            3. If both inputs are value type, but one of them is bool, bool is bigger
            4. Otherwise Convert them all to double and compare.
            5. Else If only one is value type, then value type object is smaller
            6. Else If only one is string, then the string is smaller than other
            7. Else don't know how to compare, so best campare them based on HashCode.
        </member>
        <member name="F:Orchid.Internals.Purge.PurgeGuid">
            The guid of the "Project contains unused families and types" PerformanceAdviserRuleId.
        </member>
        <member name="M:Orchid.Internals.Purge.GetPerformanceAdvisorRuleId(System.String,Autodesk.Revit.DB.PerformanceAdviserRuleId@)">
            Find a PerformanceAdviserRuleId with a guid that matches a supplied guid.
        </member>
        <member name="M:Orchid.Internals.Purge.GetPurgeableElements(Autodesk.Revit.DB.Document,System.Collections.Generic.ICollection{Autodesk.Revit.DB.ElementId}@)">
            Get all purgeable elements.
            Intended for Revit 2017+ as versions up to and including Revit 2016 throw an InternalException.
        </member>
        <member name="F:Orchid.Internals.Purge.bips">
            BuiltInParameter Enumeration
            http://www.revitapidocs.com/2017/fb011c91-be7e-f737-28c7-3f1e1917a0e0.htm
            http://www.revitapidocs.com/2018.1/fb011c91-be7e-f737-28c7-3f1e1917a0e0.htm
        </member>
        <member name="F:Orchid.Internals.Purge.types">
            Type elements (element class)
            http://www.revitapidocs.com/2017/eb16114f-69ea-f4de-0d0d-f7388b105a16.htm
            http://www.revitapidocs.com/2018.1/eb16114f-69ea-f4de-0d0d-f7388b105a16.htm
        </member>
        <member name="T:Orchid.Internals.Notifications">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Orchid.Internals.Notifications.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Orchid.Internals.Notifications.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Orchid.Internals.Notifications.Array_Count_Mismatch">
            <summary>
              Looks up a localized string similar to The number of sample locations and samples is not equal..
            </summary>
        </member>
        <member name="P:Orchid.Internals.Notifications.CannotGetBaseOrSurveyPoint">
            <summary>
              Looks up a localized string similar to Cannot get base or survey point from document..
            </summary>
        </member>
        <member name="P:Orchid.Internals.Notifications.CategoryArgumentException">
            <summary>
              Looks up a localized string similar to You must supply a Category..
            </summary>
        </member>
        <member name="P:Orchid.Internals.Notifications.CategoryNotFound">
            <summary>
              Looks up a localized string similar to Invalid category..
            </summary>
        </member>
        <member name="P:Orchid.Internals.Notifications.CategoryVisibilityOverrideError">
            <summary>
              Looks up a localized string similar to Specified View Template is not valid for this View..
            </summary>
        </member>
        <member name="P:Orchid.Internals.Notifications.DocumentDoesNotSupportGlobalParams">
            <summary>
              Looks up a localized string similar to Document does not support global parameters..
            </summary>
        </member>
        <member name="P:Orchid.Internals.Notifications.FamilyNotFound">
            <summary>
              Looks up a localized string similar to A family with the specified name, {0}, could not be found in the document..
            </summary>
        </member>
        <member name="P:Orchid.Internals.Notifications.FamilySymbolNotFound1">
            <summary>
              Looks up a localized string similar to A FamilySymbol with the specified name does not exist in the document..
            </summary>
        </member>
        <member name="P:Orchid.Internals.Notifications.FamilySymbolNotFound2">
            <summary>
              Looks up a localized string similar to A FamilySymbol with the specified name, {0}, does not exist in the Family..
            </summary>
        </member>
        <member name="P:Orchid.Internals.Notifications.FamilySymbolNotFound3">
            <summary>
              Looks up a localized string similar to A FamilySymbol with the specified name, {0}, does not exist in the document..
            </summary>
        </member>
        <member name="P:Orchid.Internals.Notifications.FileNotFound">
            <summary>
              Looks up a localized string similar to The file could not be found at: {0}.
            </summary>
        </member>
        <member name="P:Orchid.Internals.Notifications.InvalidCategory">
            <summary>
              Looks up a localized string similar to The selected category is not valid in this document..
            </summary>
        </member>
        <member name="P:Orchid.Internals.Notifications.InvalidFilterType">
            <summary>
              Looks up a localized string similar to FilterType is not valid..
            </summary>
        </member>
        <member name="P:Orchid.Internals.Notifications.InvalidKeysErrorMessage">
            <summary>
              Looks up a localized string similar to Looks up a localized string similar to One or more input types are not matching. Lists as keys are not supported..
            </summary>
        </member>
        <member name="P:Orchid.Internals.Notifications.InvalidKeysLenghtErrorMessage">
            <summary>
              Looks up a localized string similar to Looks up a localized string similar to Number of items does not match the number of keys..
            </summary>
        </member>
        <member name="P:Orchid.Internals.Notifications.InvalidType">
            <summary>
              Looks up a localized string similar to Type is not valid..
            </summary>
        </member>
        <member name="P:Orchid.Internals.Notifications.MaterialNotFound">
            <summary>
              Looks up a localized string similar to A Material with the given name does not exist in the current Document..
            </summary>
        </member>
        <member name="P:Orchid.Internals.Notifications.NameAlreadyInUse">
            <summary>
              Looks up a localized string similar to Name already in use..
            </summary>
        </member>
        <member name="P:Orchid.Internals.Notifications.NameArgumentException">
            <summary>
              Looks up a localized string similar to You must supply a Name..
            </summary>
        </member>
        <member name="P:Orchid.Internals.Notifications.NoSharedParameterFileFound">
            <summary>
              Looks up a localized string similar to No shared parameter file found..
            </summary>
        </member>
        <member name="P:Orchid.Internals.Notifications.NoSharedParameterFound">
            <summary>
              Looks up a localized string similar to shared parameter not found..
            </summary>
        </member>
        <member name="P:Orchid.Internals.Notifications.NoSharedParameterGroupFound">
            <summary>
              Looks up a localized string similar to shared parameter group not found..
            </summary>
        </member>
        <member name="P:Orchid.Internals.Notifications.NoSigmaBranch">
            <summary>
              Looks up a localized string similar to No Sigma branch could be found.
            </summary>
        </member>
        <member name="P:Orchid.Internals.Notifications.NoSigmaProject">
            <summary>
              Looks up a localized string similar to No Sigma project could be found.
            </summary>
        </member>
        <member name="P:Orchid.Internals.Notifications.NotAdaptiveComponentError">
            <summary>
              Looks up a localized string similar to The FamilyInstance is not an adaptive component..
            </summary>
        </member>
        <member name="P:Orchid.Internals.Notifications.NotEnoughDataError">
            <summary>
              Looks up a localized string similar to You need at least two elements for a dimension..
            </summary>
        </member>
        <member name="P:Orchid.Internals.Notifications.NotPositiveIntegerError">
            <summary>
              Looks up a localized string similar to {0} must be a positive integer.
            </summary>
        </member>
        <member name="P:Orchid.Internals.Notifications.NotRevitFamily">
            <summary>
              Looks up a localized string similar to Please run this command in a family document..
            </summary>
        </member>
        <member name="P:Orchid.Internals.Notifications.NoViewSheetSet">
            <summary>
              Looks up a localized string similar to No ViewSheetSet could be found.
            </summary>
        </member>
        <member name="P:Orchid.Internals.Notifications.NoWorksetFound">
            <summary>
              Looks up a localized string similar to The document is not including worksets.
            </summary>
        </member>
        <member name="P:Orchid.Internals.Notifications.NumberOfDivisionsMustBeGreaterThan2">
            <summary>
              Looks up a localized string similar to The number of divisions must be greater than 2!.
            </summary>
        </member>
        <member name="P:Orchid.Internals.Notifications.ParameterGroupNotFound">
            <summary>
              Looks up a localized string similar to Invalid parameter group..
            </summary>
        </member>
        <member name="P:Orchid.Internals.Notifications.ParameterNotFound">
            <summary>
              Looks up a localized string similar to No parameter found by that name..
            </summary>
        </member>
        <member name="P:Orchid.Internals.Notifications.ParameterStorageNotElement">
            <summary>
              Looks up a localized string similar to The parameter&apos;s storage type is not an Element..
            </summary>
        </member>
        <member name="P:Orchid.Internals.Notifications.ParameterStorageNotInteger">
            <summary>
              Looks up a localized string similar to The parameter&apos;s storage type is not an integer..
            </summary>
        </member>
        <member name="P:Orchid.Internals.Notifications.ParameterStorageNotNumber">
            <summary>
              Looks up a localized string similar to The parameter&apos;s storage type is not a number..
            </summary>
        </member>
        <member name="P:Orchid.Internals.Notifications.ParameterStorageNotString">
            <summary>
              Looks up a localized string similar to The parameter&apos;s storage type is not a string..
            </summary>
        </member>
        <member name="P:Orchid.Internals.Notifications.ParameterTypeNotFound">
            <summary>
              Looks up a localized string similar to Invalid parameter type..
            </summary>
        </member>
        <member name="P:Orchid.Internals.Notifications.ParameterWithoutStorageType">
            <summary>
              Looks up a localized string similar to Parameter {0} has no storage type..
            </summary>
        </member>
        <member name="P:Orchid.Internals.Notifications.TypeNotFound">
            <summary>
              Looks up a localized string similar to Type not found in document..
            </summary>
        </member>
        <member name="P:Orchid.Internals.Notifications.VersionNotSupported">
            <summary>
              Looks up a localized string similar to This function is not supported by your Revit version!.
            </summary>
        </member>
        <member name="P:Orchid.Internals.Notifications.ViewDoesNotSupportAnnotations">
            <summary>
              Looks up a localized string similar to View does not support annotations..
            </summary>
        </member>
        <member name="M:Orchid.Internals.UnitConverter.InDynamoUnits``1(``0)">
            Convert from Revit API internal units (feet) to Revit Display units.
            Can be used simply as geometry.InDynamoUnits() as the type is constrained
        </member>
        <member name="M:Orchid.Internals.UnitConverter.InHostUnits``1(``0)">
            Convert from Revit Display Units to Revit API internal units (feet)
            Can be used simply as geometry.InHostUnits()
        </member>
        <member name="M:Orchid.Internals.UnitConverter.ConvertToDynamoUnits``1(``0@)">
            Convert the geometry to Dynamo units if convert is true.
            The input geometry will be disposed and a converted geometry
            will be assigned to it.
        </member>
        <member name="M:Orchid.Internals.UnitConverter.ConvertToHostUnits``1(``0@)">
            Convert the geometry to host units if convert is true.
            The input geometry will be disposed and a converted geometry
            will be assigned to it.
        </member>
        <member name="P:Orchid.Internals.Services.RevitVersion">
            Get Revit version
        </member>
        <member name="P:Orchid.Internals.Services.RevitSubVersion">
            Get Revit subversion
        </member>
        <member name="M:Orchid.Internals.Services.Flatten(System.Collections.IEnumerable)">
            Flatten nD list
        </member>
        <member name="M:Orchid.Internals.Services.SingleOrSeveral(System.Object)">
            Return first/default list if count is one
        </member>
        <member name="M:Orchid.Internals.Services.IsNumber(System.Object)">
            Check if value is a number
        </member>
        <member name="M:Orchid.Internals.Services.IsInteger(System.Double)">
            Check if value is integer
        </member>
        <member name="M:Orchid.Internals.Services.RemoveWhitespace(System.String)">
            remove white space from string
        </member>
        <member name="M:Orchid.Internals.Services.GetEmbeddedResourceFile(System.String,System.String)">
            Get an embedded resource file, save it as a tmp file
        </member>
        <member name="M:Orchid.Internals.Services.ReadEmbeddedResourceFile(System.String)">
            Read an embedded resource file
        </member>
        <member name="M:Orchid.RevitMaterial.AppearanceAsset.All">
            <summary>
            Get all appearance assets.
            </summary>
            <returns name="AppearanceAsset">Appearance asset as Dynamo type</returns>
        </member>
        <member name="M:Orchid.RevitMaterial.AppearanceAsset.Duplicate(System.Object,System.String)">
            <summary>
            Duplicate appearance asset
            </summary>
            <param name="appearanceAsset">Appearance asset as Dynamo type</param>
            <param name="name">Name for the duplicated appearance asset</param>
            <returns name="AppearanceAsset">Appearance asset as Dynamo type</returns>
        </member>
        <member name="M:Orchid.RevitMaterial.AppearanceAsset.Create(System.String,System.String,System.Boolean)">
            <summary>
            Create appearance asset.
            </summary>
            <param name="name"></param>
            <param name="schema"></param>
            <param name="uniqueName"></param>
            <returns name="AppearanceAsset">Appearance asset as Dynamo type</returns>
        </member>
        <member name="M:Orchid.RevitMaterial.AppearanceAsset.SetInformation(System.Object,System.String,System.String)">
            <summary>
            Set information.
            </summary>
            <param name="appearanceAsset">Appearance asset as Dynamo type</param>
            <param name="description"></param>
            <param name="keywords"></param>
            <returns name="AppearanceAsset">Appearance asset as Dynamo type</returns>
        </member>
        <member name="M:Orchid.RevitMaterial.AppearanceAsset.SetGeneric(System.Object,DSCore.Color)">
            <summary>
            Set generic.
            </summary>
            <param name="appearanceAsset">Appearance asset as Dynamo type</param>
            <param name="color">Color as list of integer or object</param>
            <returns name="AppearanceAsset">Appearance asset as Dynamo type</returns>
        </member>
        <member name="M:Orchid.RevitMaterial.AppearanceAsset.SetBump(System.Object,System.String)">
            <summary>
            Set bump.
            </summary>
            <param name="appearanceAsset">Appearance asset as Dynamo type</param>
            <param name="imagePath">path to file</param>
            <returns name="AppearanceAsset">Appearance asset as Dynamo type</returns>
        </member>
        <member name="M:Orchid.RevitMaterial.AppearanceAsset.GetInformation(System.Object)">
            <summary>
            Get information.
            </summary>
            <param name="appearanceAsset">Appearance asset as Dynamo type</param>
            <returns name="description"></returns>
            <returns name="keywords"></returns>
        </member>
        <member name="M:Orchid.RevitMaterial.Graphics.SetGraphics(System.Object,System.Boolean,DSCore.Color,System.Int32,System.Object,DSCore.Color,System.Object,DSCore.Color)">
            <summary>
            Set material graphics.
            Valid pattern input is either a Dynamo fill pattern object or as
            a name of a fill pattern in the document.
            Valid color input is either a Dynamo color object or as a 
            list of integers containing "alpha, red, green, blue" value
            or "red, green, blue" value.
            Note, this node can be used up to and including Revit 2019!
            </summary>
            <param name="material">Material as string or object</param>
            <param name="useRenderAppearance">Use render appearance as boolean</param>
            <param name="shadingColor">Color as list of integer or object</param>
            <param name="transparency">Transparency as integer</param>
            <param name="surfacePattern">Pattern as string or object</param>
            <param name="surfacePatternColor">Color as list of integer or object</param>
            <param name="cutPattern">Pattern as string or object</param>
            <param name="cutPatternColor">Color as list of integer or object</param>
            <returns name="Material">Material as Dynamo type</returns>
        </member>
        <member name="M:Orchid.RevitMaterial.Graphics.SetSurfacePattern(System.Object,System.Object)">
            <summary>
            Set surface pattern.
            Valid pattern input is either a Dynamo fill pattern object or as
            a name of a fill pattern in the document.
            Note, this node can be used up to and including Revit 2019!
            </summary>
            <param name="material">Material as string or object</param>
            <param name="pattern">Pattern as string or object</param>
            <returns name="Material">Material as Dynamo type</returns>
        </member>
        <member name="M:Orchid.RevitMaterial.Graphics.SetSurfacePatternColor(System.Object,DSCore.Color)">
            <summary>
            Set surface pattern color.
            Valid color input is either a Dynamo color object or as a 
            list of integers containing "alpha, red, green, blue" value
            or "red, green, blue" value.
            Note, this node can be used up to and including Revit 2019!
            </summary>
            <param name="material">Material as string or object</param>
            <param name="color">Color as list of integer or object</param>
            <returns name="Material">Material as Dynamo type</returns>
        </member>
        <member name="M:Orchid.RevitMaterial.Graphics.SetCutPattern(System.Object,System.Object)">
            <summary>
            Set cut pattern.
            Valid pattern input is either a Dynamo fill pattern object or as
            a name of a fill pattern in the document.
            Note, this node can be used up to and including Revit 2019!
            </summary>
            <param name="material">Material as string or object</param>
            <param name="pattern">Pattern as string or object</param>
            <returns name="Material">Material as Dynamo type</returns>
        </member>
        <member name="M:Orchid.RevitMaterial.Graphics.SetCutPatternColor(System.Object,DSCore.Color)">
            <summary>
            Set cut pattern color.
            Valid color input is either a Dynamo color object or as a 
            list of integers containing "alpha, red, green, blue" value
            or "red, green, blue" value.
            Note, this node can be used up to and including Revit 2019!
            </summary>
            <param name="material">Material as string or object</param>
            <param name="color">Color as list of integer or object</param>
            <returns name="Material">Material as Dynamo type</returns>
        </member>
        <member name="M:Orchid.RevitMaterial.Graphics.Set(System.Object,System.Boolean,DSCore.Color,System.Int32,System.Object,DSCore.Color,System.Object,DSCore.Color,System.Object,DSCore.Color,System.Object,DSCore.Color)">
            <summary>
            Set material graphics.
            Valid pattern input is either a Dynamo fill pattern object or as
            a name of a fill pattern in the document.
            Valid color input is either a Dynamo color object or as a 
            list of integers containing "alpha, red, green, blue" value
            or "red, green, blue" value.
            Note, this node can be used from Revit 2019 and forward!
            </summary>
            <param name="material">Material as string or object</param>
            <param name="useRenderAppearance">Use render appearance as boolean</param>
            <param name="shadingColor">Color as list of integer or object</param>
            <param name="transparency">Transparency as integer</param>
            <param name="surfaceForegroundPattern">Pattern as string or object</param>
            <param name="surfaceForegroundPatternColor">Color as list of integer or object</param>
            <param name="surfaceBackgroundPattern">Pattern as string or object</param>
            <param name="surfaceBackgroundPatternColor">Color as list of integer or object</param>
            <param name="cutForegroundPattern">Pattern as string or object</param>
            <param name="cutForegroundPatternColor">Color as list of integer or object</param>
            <param name="cutBackgroundPattern">Pattern as string or object</param>
            <param name="cutBackgroundPatternColor">Color as list of integer or object</param>
            <returns name="Material">Material as Dynamo type</returns>
        </member>
        <member name="M:Orchid.RevitMaterial.Graphics.SetSurfaceForegroundPattern(System.Object,System.Object)">
            <summary>
            Set surface foreground pattern.
            Valid pattern input is either a Dynamo fill pattern object or as
            a name of a fill pattern in the document.
            Note, this node can be used from Revit 2019 and forward!
            </summary>
            <param name="material">Material as string or object</param>
            <param name="pattern">Pattern as string or object</param>
            <returns name="Material">Material as Dynamo type</returns>
        </member>
        <member name="M:Orchid.RevitMaterial.Graphics.SetSurfaceForegroundPatternColor(System.Object,DSCore.Color)">
            <summary>
            Set surface foreground pattern color.
            Valid color input is either a Dynamo color object or as a 
            list of integers containing "alpha, red, green, blue" value
            or "red, green, blue" value.
            Note, this node can be used from Revit 2019 and forward!
            </summary>
            <param name="material">Material as string or object</param>
            <param name="color">Color as list of integer or object</param>
            <returns name="Material">Material as Dynamo type</returns>
        </member>
        <member name="M:Orchid.RevitMaterial.Graphics.SetSurfaceBackgroundPattern(System.Object,System.Object)">
            <summary>
            Set surface background pattern.
            Valid pattern input is either a Dynamo fill pattern object or as
            a name of a fill pattern in the document.
            Note, this node can be used from Revit 2019 and forward!
            </summary>
            <param name="material">Material as string or object</param>
            <param name="pattern">Pattern as string or object</param>
            <returns name="Material">Material as Dynamo type</returns>
        </member>
        <member name="M:Orchid.RevitMaterial.Graphics.SetSurfaceBackgroundPatternColor(System.Object,DSCore.Color)">
            <summary>
            Set surface background pattern color.
            Valid color input is either a Dynamo color object or as a 
            list of integers containing "alpha, red, green, blue" value
            or "red, green, blue" value.
            Note, this node can be used from Revit 2019 and forward!
            </summary>
            <param name="material">Material as string or object</param>
            <param name="color">Color as list of integer or object</param>
            <returns name="Material">Material as Dynamo type</returns>
        </member>
        <member name="M:Orchid.RevitMaterial.Graphics.SetCutForegroundPattern(System.Object,System.Object)">
            <summary>
            Set cut foreground pattern.
            Valid pattern input is either a Dynamo fill pattern object or as
            a name of a fill pattern in the document.
            Note, this node can be used from Revit 2019 and forward!
            </summary>
            <param name="material">Material as string or object</param>
            <param name="pattern">Pattern as string or object</param>
            <returns name="Material">Material as Dynamo type</returns>
        </member>
        <member name="M:Orchid.RevitMaterial.Graphics.SetCutForegroundPatternColor(System.Object,DSCore.Color)">
            <summary>
            Set cut foreground pattern color.
            Valid color input is either a Dynamo color object or as a 
            list of integers containing "alpha, red, green, blue" value
            or "red, green, blue" value.
            Note, this node can be used from Revit 2019 and forward!
            </summary>
            <param name="material">Material as string or object</param>
            <param name="color">Color as list of integer or object</param>
            <returns name="Material">Material as Dynamo type</returns>
        </member>
        <member name="M:Orchid.RevitMaterial.Graphics.SetCutBackgroundPattern(System.Object,System.Object)">
            <summary>
            Set cut background pattern.
            Valid pattern input is either a Dynamo fill pattern object or as
            a name of a fill pattern in the document.
            Note, this node can be used from Revit 2019 and forward!
            </summary>
            <param name="material">Material as string or object</param>
            <param name="pattern">Pattern as string or object</param>
            <returns name="Material">Material as Dynamo type</returns>
        </member>
        <member name="M:Orchid.RevitMaterial.Graphics.SetCutBackgroundPatternColor(System.Object,DSCore.Color)">
            <summary>
            Set cut background pattern color.
            Valid color input is either a Dynamo color object or as a 
            list of integers containing "alpha, red, green, blue" value
            or "red, green, blue" value.
            Note, this node can be used from Revit 2019 and forward!
            </summary>
            <param name="material">Material as string or object</param>
            <param name="color">Color as list of integer or object</param>
            <returns name="Material">Material as Dynamo type</returns>
        </member>
        <member name="M:Orchid.RevitMaterial.Graphics.SetRenderAppearance(System.Object,System.Boolean)">
            <summary>
            Set render appearance.
            </summary>
            <param name="material">Material as string or object</param>
            <param name="useRenderAppearance">Use render appearance as boolean</param>
            <returns name="Material">Material as Dynamo type</returns>
        </member>
        <member name="M:Orchid.RevitMaterial.Graphics.SetShadingColor(System.Object,DSCore.Color)">
            <summary>
            Set shading color.
            Valid color input is either a Dynamo color object or as a 
            list of integers containing "alpha, red, green, blue" value
            or "red, green, blue" value.
            </summary>
            <param name="material">Material as string or object</param>
            <param name="color">Color as list of integer or object</param>
            <returns name="Material">Material as Dynamo type</returns>
        </member>
        <member name="M:Orchid.RevitMaterial.Graphics.SetTransparency(System.Object,System.Int32)">
            <summary>
            Set transparency.
            </summary>
            <param name="material">Material as string or object</param>
            <param name="transparency">Transparency as integer</param>
            <returns name="Material">Material as Dynamo type</returns>
        </member>
        <member name="M:Orchid.RevitMaterial.Graphics.SetSmoothness(System.Object,System.Int32)">
            <summary>
            Get smoothness.
            </summary>
            <param name="material">Material as string or object</param>
            <param name="smoothness">Smoothness as integer</param>
            <returns name="Material">Material as Dynamo type</returns>
        </member>
        <member name="M:Orchid.RevitMaterial.Graphics.SetShininess(System.Object,System.Int32)">
            <summary>
            Get shininess.
            </summary>
            <param name="material">Material as string or object</param>
            <param name="shininess">Shininess as integer</param>
            <returns name="Material">Material as Dynamo type</returns>
        </member>
        <member name="M:Orchid.RevitMaterial.Graphics.GetGraphics(System.Object)">
            <summary>
            Get material graphics.
            Note, this node can be used up to and including Revit 2019!
            </summary>
            <param name="material">Material as string or object</param>
            <returns name="UseRenderAppearance">Use render appearance as boolean</returns>
            <returns name="ShadingColor">Color as Dynamo type</returns>
            <returns name="Transparency">Transparency as integer</returns>
            <returns name="SurfacePattern">Pattern as Dynamo type</returns>
            <returns name="SurfacePatternColor">Color as Dynamo type</returns>
            <returns name="CutPattern">Pattern as Dynamo type</returns>
            <returns name="CutPatternColor">Color as Dynamo type</returns>
        </member>
        <member name="M:Orchid.RevitMaterial.Graphics.GetSurfacePattern(System.Object)">
            <summary>
            Get surface pattern.
            Note, this node can be used up to and including Revit 2019!
            </summary>
            <param name="material">Material as string or object</param>
            <returns name="Pattern">Pattern as Dynamo type</returns>
        </member>
        <member name="M:Orchid.RevitMaterial.Graphics.GetSurfacePatternColor(System.Object)">
            <summary>
            Get surface pattern color.
            Note, this node can be used up to and including Revit 2019!
            </summary>
            <param name="material">Material as string or object</param>
            <returns name="Color">Color as Dynamo type</returns>
        </member>
        <member name="M:Orchid.RevitMaterial.Graphics.GetCutPattern(System.Object)">
            <summary>
            Get cut pattern.
            Note, this node can be used up to and including Revit 2019!
            </summary>
            <param name="material">Material as string or object</param>
            <returns name="Pattern">Pattern as Dynamo type</returns>
        </member>
        <member name="M:Orchid.RevitMaterial.Graphics.GetCutPatternColor(System.Object)">
            <summary>
            Get cut pattern color.
            Note, this node can be used up to and including Revit 2019!
            </summary>
            <param name="material">Material as string or object</param>
            <returns name="Color">Color as Dynamo type</returns>
        </member>
        <member name="M:Orchid.RevitMaterial.Graphics.Get(System.Object)">
            <summary>
            Get material graphics.
            Note, this node can be used from Revit 2019 and forward!
            </summary>
            <param name="material">Material as string or object</param>
            <returns name="UseRenderAppearance">Use render appearance as boolean</returns>
            <returns name="ShadingColor">Color as Dynamo type</returns>
            <returns name="Transparency">Transparency as integer</returns>
            <returns name="surfaceForegroundPattern">Pattern as Dynamo type</returns>
            <returns name="surfaceForegroundPatternColor">Color as Dynamo type</returns>
            <returns name="surfaceBackgroundPattern">Pattern as Dynamo type</returns>
            <returns name="surfaceBackgroundPatternColor">Color as Dynamo type</returns>
            <returns name="cutForegroundPattern">Pattern as Dynamo type</returns>
            <returns name="cutForegroundPatternColor">Color as Dynamo type</returns>
            <returns name="cutBackgroundPattern">Pattern as Dynamo type</returns>
            <returns name="cutBackgroundPatternColor">Color as Dynamo type</returns>
        </member>
        <member name="M:Orchid.RevitMaterial.Graphics.GetSurfaceForegroundPattern(System.Object)">
            <summary>
            Get surface foreground pattern.
            Note, this node can be used from Revit 2019 and forward!
            </summary>
            <param name="material">Material as string or object</param>
            <returns name="Pattern">Pattern as Dynamo type</returns>
        </member>
        <member name="M:Orchid.RevitMaterial.Graphics.GetSurfaceForegroundPatternColor(System.Object)">
            <summary>
            Get surface foreground pattern color.
            Note, this node can be used from Revit 2019 and forward!
            </summary>
            <param name="material">Material as string or object</param>
            <returns name="Color">Color as Dynamo type</returns>
        </member>
        <member name="M:Orchid.RevitMaterial.Graphics.GetSurfaceBackgroundPattern(System.Object)">
            <summary>
            Get surface background pattern.
            Note, this node can be used from Revit 2019 and forward!
            </summary>
            <param name="material">Material as string or object</param>
            <returns name="Pattern">Pattern as Dynamo type</returns>
        </member>
        <member name="M:Orchid.RevitMaterial.Graphics.GetSurfaceBackgroundPatternColor(System.Object)">
            <summary>
            Get surface background pattern color.
            Note, this node can be used from Revit 2019 and forward!
            </summary>
            <param name="material">Material as string or object</param>
            <returns name="Color">Color as Dynamo type</returns>
        </member>
        <member name="M:Orchid.RevitMaterial.Graphics.GetCutForegroundPattern(System.Object)">
            <summary>
            Get cut foreground pattern.
            Note, this node can be used from Revit 2019 and forward!
            </summary>
            <param name="material">Material as string or object</param>
            <returns name="Pattern">Pattern as Dynamo type</returns>
        </member>
        <member name="M:Orchid.RevitMaterial.Graphics.GetCutForegroundPatternColor(System.Object)">
            <summary>
            Get cut foreground pattern color.
            Note, this node can be used from Revit 2019 and forward!
            </summary>
            <param name="material">Material as string or object</param>
            <returns name="Color">Color as Dynamo type</returns>
        </member>
        <member name="M:Orchid.RevitMaterial.Graphics.GetCutBackgroundPattern(System.Object)">
            <summary>
            Get cut background pattern.
            Note, this node can be used from Revit 2019 and forward!
            </summary>
            <param name="material">Material as string or object</param>
            <returns name="Pattern">Pattern as Dynamo type</returns>
        </member>
        <member name="M:Orchid.RevitMaterial.Graphics.GetCutBackgroundPatternColor(System.Object)">
            <summary>
            Get cut background pattern color.
            Note, this node can be used from Revit 2019 and forward!
            </summary>
            <param name="material">Material as string or object</param>
            <returns name="Color">Color as Dynamo type</returns>
        </member>
        <member name="M:Orchid.RevitMaterial.Graphics.GetRenderAppearance(System.Object)">
            <summary>
            Get render appearance.
            </summary>
            <param name="material">Material as string or object</param>
            <returns name="bool">Use render appearance as boolean</returns>
        </member>
        <member name="M:Orchid.RevitMaterial.Graphics.GetShadingColor(System.Object)">
            <summary>
            Get shading color.
            </summary>
            <param name="material">Material as string or object</param>
            <returns name="Color">Color as Dynamo type</returns>
        </member>
        <member name="M:Orchid.RevitMaterial.Graphics.GetTransparency(System.Object)">
            <summary>
            Get transparency.
            </summary>
            <param name="material">Material as string or object</param>
            <returns name="int">Transparency as integer</returns>
        </member>
        <member name="M:Orchid.RevitMaterial.Graphics.GetSmoothness(System.Object)">
            <summary>
            Get smoothness.
            </summary>
            <param name="material">Material as string or object</param>
            <returns name="int">Smoothness as integer</returns>
        </member>
        <member name="M:Orchid.RevitMaterial.Graphics.GetShininess(System.Object)">
            <summary>
            Get shininess.
            </summary>
            <param name="material">Material as string or object</param>
            <returns name="int">Shininess as integer</returns>
        </member>
        <member name="M:Orchid.RevitMaterial.Material.Create(System.String)">
            <summary>
            Create material.
            </summary>
            <param name="name">The material name</param>
            <returns name="Material">Material as Dynamo type</returns>
        </member>
        <member name="M:Orchid.RevitMaterial.Material.Duplicate(System.Object,System.String)">
            <summary>
            Duplicate material
            </summary>
            <param name="material">Material as string or object</param>
            <param name="name">The material name to duplicate</param>
            <returns name="Material">Material as Dynamo type</returns>
        </member>
        <member name="M:Orchid.RevitMaterial.Material.SetAsset(System.Object,System.String,System.Object)">
            <summary>
            Set asset property.
            </summary>
            <param name="material">Material as string or object</param>
            <param name="aspect">Material aspect as string or object</param>
            <param name="propertySet">Asset property set as string or object</param>
            <returns name="Material">Material as Dynamo type</returns>
        </member>
        <member name="M:Orchid.RevitMaterial.Material.SetAsset(System.Object,System.Object)">
            <summary>
            Set asset property.
            </summary>
            <param name="material">Material as string or object</param>
            <param name="appearanceAsset">Appearance asset as Dynamo type</param>
            <returns name="Material">Material as Dynamo type</returns>
        </member>
        <member name="M:Orchid.RevitMaterial.Material.SetCategory(System.Object,System.String)">
            <summary>
            Set material category.
            </summary>
            <param name="material">Material as string or object</param>
            <param name="name">The material category name to set</param>
            <returns name="Material">Material as Dynamo type</returns>
        </member>
        <member name="M:Orchid.RevitMaterial.Material.SetClass(System.Object,System.String)">
            <summary>
            Set material class.
            </summary>
            <param name="material">Material as string or object</param>
            <param name="name">The material class name to set</param>
            <returns name="Material">Material as Dynamo type</returns>
        </member>
        <member name="M:Orchid.RevitMaterial.Material.GetCategory(System.Object)">
            <summary>
            Get material category.
            </summary>
            <param name="material">Material as string or object</param>
            <returns name="string">The material category name</returns>
        </member>
        <member name="M:Orchid.RevitMaterial.Material.GetClass(System.Object)">
            <summary>
            Get material class.
            </summary>
            <param name="material">Material as string or object</param>
            <returns name="string">The material class name</returns>
        </member>
        <member name="M:Orchid.RevitMaterial.Material.All(Autodesk.Revit.DB.Document)">
            <summary>
            Get all materials in document.
            </summary>
            <param name="document">Document as Revit type</param>
            <returns name="Material">Material as Dynamo type</returns>
        </member>
        <member name="M:Orchid.RevitMaterial.Material.All">
            <summary>
            Get all materials in document.
            </summary>
            <returns name="Material">Material as Dynamo type</returns>
        </member>
        <member name="M:Orchid.RevitMaterial.Material.Asset(System.Object)">
            <summary>
            Get material assets.
            </summary>
            <param name="material">Material as string or object</param>
            <returns name="Appearance">Appearance asset as Dynamo type</returns>
            <returns name="Physical">Physical asset as Dynamo type</returns>
            <returns name="Thermal">Thermal asset as Dynamo type</returns>
        </member>
        <member name="M:Orchid.RevitMaterial.Material.AppearanceAsset(System.Object)">
            <summary>
            Get material appearance assets.
            </summary>
            <param name="material">Material as string or object</param>
            <returns name="Asset">Asset as Dynamo type</returns>
        </member>
        <member name="M:Orchid.RevitMaterial.Material.PhysicalAsset(System.Object)">
            <summary>
            Get material physical assets.
            </summary>
            <param name="material">Material as string or object</param>
            <returns name="Asset">Asset as Dynamo type</returns>
        </member>
        <member name="M:Orchid.RevitMaterial.Material.ThermalAsset(System.Object)">
            <summary>
            Get material thermal assets.
            </summary>
            <param name="material">Material as string or object</param>
            <returns name="Asset">Asset as Dynamo type</returns>
        </member>
        <member name="M:Orchid.RevitMaterial.Material.AssetParameter(System.Object)">
            <summary>
            Get material asset parameters.
            </summary>
            <param name="material">Material as string or object</param>
            <returns name="Appearance">Appearance asset parameter as Dynamo type</returns>
            <returns name="Physical">Physical asset parameter as Dynamo type</returns>
            <returns name="Thermal">Thermal asset parameter as Dynamo type</returns>
        </member>
        <member name="M:Orchid.RevitMaterial.Material.Parameter(System.Object)">
            <summary>
            Get material parameters.
            </summary>
            <param name="material">Material as string or object</param>
            <returns name="Parameter">Parameter as Dynamo type</returns>
        </member>
        <member name="M:Orchid.RevitMaterial.Material.Density(System.Object)">
            <summary>
            Get material asset as physical and thermal density in SI unit (kg/m3)
            </summary>
            <param name="material">List of material</param>
            <returns name="Physical">List of physical density</returns>
            <returns name="Thermal">List of thermal density</returns>
        </member>
        <member name="M:Orchid.RevitMaterial.PhysicalAsset.All">
            <summary>
            Get all physical property set (asset).
            </summary>
            <returns name="PropertySet">Physical property set as Dynamo type</returns>
        </member>
        <member name="M:Orchid.RevitMaterial.PhysicalAsset.Duplicate(System.Object,System.String)">
            <summary>
            Duplicate physical property set (asset).
            </summary>
            <param name="propertySet">Physical property set as Dynamo type</param>
            <param name="name">Name for the duplicated physical property set</param>
            <returns name="PropertySet">Physical property set as Dynamo type</returns>
        </member>
        <member name="M:Orchid.RevitMaterial.PhysicalAsset.Create(System.String,System.String,System.Boolean)">
            <summary>
            Create physical asset and property set.
            </summary>
            <param name="name"></param>
            <param name="type"></param>
            <param name="uniqueName"></param>
            <returns name="PropertySet">Thermal property set as Dynamo type</returns>
        </member>
        <member name="M:Orchid.RevitMaterial.PhysicalAsset.SetInformation(System.Object,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Set information.
            </summary>
            <param name="propertySet">Physical property set as Dynamo type</param>
            <param name="description"></param>
            <param name="keywords"></param>
            <param name="subclass"></param>
            <param name="source"></param>
            <param name="sourceUrl"></param>
            <returns name="PropertySet">Physical property set as Dynamo type</returns>
        </member>
        <member name="M:Orchid.RevitMaterial.PhysicalAsset.SetBehavior(System.Object,System.String)">
            <summary>
            Set behavior.
            </summary>
            <param name="propertySet">Physical property set as Dynamo type</param>
            <param name="behavior"></param>
            <returns name="PropertySet">Physical property set as Dynamo type</returns>
        </member>
        <member name="M:Orchid.RevitMaterial.PhysicalAsset.SetBasicThermal(System.Object,System.Double)">
            <summary>
            Set basic thermal.
            </summary>
            <param name="propertySet">Physical property set as Dynamo type</param>
            <param name="expansionCoefficient"></param>
            <returns name="PropertySet">Physical property set as Dynamo type</returns>
        </member>
        <member name="M:Orchid.RevitMaterial.PhysicalAsset.SetBasicThermalByXYZ(System.Object,Autodesk.Revit.DB.XYZ)">
            <summary>
            Set basic thermal.
            </summary>
            <param name="propertySet">Physical property set as Dynamo type</param>
            <param name="expansionCoefficient"></param>
            <returns name="PropertySet">Physical property set as Dynamo type</returns>
        </member>
        <member name="M:Orchid.RevitMaterial.PhysicalAsset.SetMechanical(System.Object,System.Double)">
            <summary>
            Set mechanical.
            </summary>
            <param name="propertySet">Physical property set as Dynamo type</param>
            <param name="density"></param>
            <returns name="PropertySet">Physical property set as Dynamo type</returns>
        </member>
        <member name="M:Orchid.RevitMaterial.PhysicalAsset.SetMechanical(System.Object,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Set mechanical.
            </summary>
            <param name="propertySet">Physical property set as Dynamo type</param>
            <param name="youngModulus"></param>
            <param name="poissonRatio"></param>
            <param name="shearModulus"></param>
            <param name="density"></param>
            <returns name="PropertySet">Physical property set as Dynamo type</returns>
        </member>
        <member name="M:Orchid.RevitMaterial.PhysicalAsset.SetMechanicalByXYZ(System.Object,Autodesk.Revit.DB.XYZ,Autodesk.Revit.DB.XYZ,Autodesk.Revit.DB.XYZ,System.Double)">
            <summary>
            Set mechanical.
            </summary>
            <param name="propertySet">Physical property set as Dynamo type</param>
            <param name="youngModulus"></param>
            <param name="poissonRatio"></param>
            <param name="shearModulus"></param>
            <param name="density"></param>
            <returns name="PropertySet">Physical property set as Dynamo type</returns>
        </member>
        <member name="M:Orchid.RevitMaterial.PhysicalAsset.SetStrength(System.Object,System.Double,System.Double,System.Boolean)">
            <summary>
            Set strength.
            </summary>
            <param name="propertySet">Physical property set as Dynamo type</param>
            <param name="yieldStress"></param>
            <param name="tensileStrength"></param>
            <param name="thermalTreated"></param>
            <returns name="PropertySet">Physical property set as Dynamo type</returns>
        </member>
        <member name="M:Orchid.RevitMaterial.PhysicalAsset.SetStrengthExtended(System.Object,System.String,System.String,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Int32)">
            <summary>
            Set strength (extended).
            </summary>
            <param name="propertySet">Physical property set as Dynamo type</param>
            <param name="species"></param>
            <param name="grade"></param>
            <param name="bending"></param>
            <param name="parallelCompression"></param>
            <param name="perpendicularCompression"></param>
            <param name="parallelShear"></param>
            <param name="tensionParallel"></param>
            <param name="tensionPerpendicular"></param>
            <param name="averageModulus"></param>
            <param name="construction"></param>
            <returns name="PropertySet">Physical property set as Dynamo type</returns>
        </member>
        <member name="M:Orchid.RevitMaterial.PhysicalAsset.SetConcrete(System.Object,System.Double,System.Double,System.Boolean)">
            <summary>
            Set concrete.
            </summary>
            <param name="propertySet">Physical property set as Dynamo type</param>
            <param name="compression"></param>
            <param name="shearStrengthReduction"></param>
            <param name="lightweight"></param>
            <returns name="PropertySet">Physical property set as Dynamo type</returns>
        </member>
        <member name="M:Orchid.RevitMaterial.PhysicalAsset.GetInformation(System.Object)">
            <summary>
            Get information.
            </summary>
            <param name="propertySet">Physical property set as Dynamo type</param>
            <returns name="Description"></returns>
            <returns name="Keywords"></returns>
            <returns name="Subclass"></returns>
            <returns name="Source"></returns>
            <returns name="SourceUrl"></returns>
        </member>
        <member name="M:Orchid.RevitMaterial.PhysicalAsset.GetBehavior(System.Object)">
            <summary>
            Get behavior.
            </summary>
            <param name="propertySet">Physical property set as Dynamo type</param>
            <returns name="Behavior"></returns>
        </member>
        <member name="M:Orchid.RevitMaterial.PhysicalAsset.GetExpansionCoefficient(System.Object)">
            <summary>
            Get expansion coefficient (basic thermal).
            </summary>
            <param name="propertySet">Physical property set as Dynamo type</param>
            <returns name="ExpansionCoefficient"></returns>
            <returns name="ExpansionCoefficientX"></returns>
            <returns name="ExpansionCoefficientY"></returns>
            <returns name="ExpansionCoefficientZ"></returns>
            <returns name="ExpansionCoefficient1"></returns>
            <returns name="ExpansionCoefficient2"></returns>
        </member>
        <member name="M:Orchid.RevitMaterial.PhysicalAsset.GetDensity(System.Object)">
            <summary>
            Get density (mechanical).
            </summary>
            <param name="propertySet">Physical property set as Dynamo type</param>
            <returns name="Density"></returns>
        </member>
        <member name="M:Orchid.RevitMaterial.PhysicalAsset.GetYoungModulus(System.Object)">
            <summary>
            Get young modulus (mechanical).
            </summary>
            <param name="propertySet">Physical property set as Dynamo type</param>
            <returns name="YoungModulus"></returns>
            <returns name="YoungModulusX"></returns>
            <returns name="YoungModulusY"></returns>
            <returns name="YoungModulusZ"></returns>
            <returns name="YoungModulus1"></returns>
            <returns name="YoungModulus2"></returns>
        </member>
        <member name="M:Orchid.RevitMaterial.PhysicalAsset.GetPoissonRatio(System.Object)">
            <summary>
            Get poisson ratio (mechanical).
            </summary>
            <param name="propertySet">Physical property set as Dynamo type</param>
            <returns name="PoissonRatio"></returns>
            <returns name="PoissonRatioX"></returns>
            <returns name="PoissonRatioY"></returns>
            <returns name="PoissonRatioZ"></returns>
            <returns name="PoissonRatio12"></returns>
            <returns name="PoissonRatio23"></returns>
        </member>
        <member name="M:Orchid.RevitMaterial.PhysicalAsset.GetShearModulus(System.Object)">
            <summary>
            Get shear modulus (mechanical).
            </summary>
            <param name="propertySet">Physical property set as Dynamo type</param>
            <returns name="ShearModulus"></returns>
            <returns name="ShearModulusX"></returns>
            <returns name="ShearModulusY"></returns>
            <returns name="ShearModulusZ"></returns>
            <returns name="ShearModulus12"></returns>
        </member>
        <member name="M:Orchid.RevitMaterial.PhysicalAsset.GetStrength(System.Object)">
            <summary>
            Get strength.
            </summary>
            <param name="propertySet">Physical property set as Dynamo type</param>
            <returns name="YieldStress"></returns>
            <returns name="TensileStrength"></returns>
            <returns name="ThermalTreated"></returns>
        </member>
        <member name="M:Orchid.RevitMaterial.PhysicalAsset.GetStrengthExtended(System.Object)">
            <summary>
            Get strength (extended).
            </summary>
            <param name="propertySet">Physical property set as Dynamo type</param>
            <returns name="Species"></returns>
            <returns name="Grade"></returns>
            <returns name="Bending"></returns>
            <returns name="ParallelCompression"></returns>
            <returns name="PerpendicularCompression"></returns>
            <returns name="ParallelShear"></returns>
            <returns name="TensionParallel"></returns>
            <returns name="TensionPerpendicular"></returns>
            <returns name="AverageModulus"></returns>
            <returns name="Construction"></returns>
        </member>
        <member name="M:Orchid.RevitMaterial.PhysicalAsset.GetConcrete(System.Object)">
            <summary>
            Get concrete.
            </summary>
            <param name="propertySet">Physical property set as Dynamo type</param>
            <returns name="Compression"></returns>
            <returns name="ShearStrengthReduction"></returns>
            <returns name="Lightweight"></returns>
        </member>
        <member name="M:Orchid.RevitMaterial.ThermalAsset.All">
            <summary>
            Get all thermal property set (asset).
            </summary>
            <returns name="PropertySet">Thermal property set as Dynamo type</returns>
        </member>
        <member name="M:Orchid.RevitMaterial.ThermalAsset.Duplicate(System.Object,System.String)">
            <summary>
            Duplicate thermal property set (asset).
            </summary>
            <param name="propertySet">Thermal property set as Dynamo type</param>
            <param name="name">Name for the duplicated thermal property set</param>
            <returns name="PropertySet">Thermal property set as Dynamo type</returns>
        </member>
        <member name="M:Orchid.RevitMaterial.ThermalAsset.Create(System.String,System.String,System.Boolean)">
            <summary>
            Create thermal asset and property set.
            </summary>
            <param name="name"></param>
            <param name="type"></param>
            <param name="uniqueName"></param>
            <returns name="PropertySet">Thermal property set as Dynamo type</returns>
        </member>
        <member name="M:Orchid.RevitMaterial.ThermalAsset.SetInformation(System.Object,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Set information.
            </summary>
            <param name="propertySet">Thermal property set as Dynamo type</param>
            <param name="description"></param>
            <param name="keywords"></param>
            <param name="subclass"></param>
            <param name="source"></param>
            <param name="sourceUrl"></param>
            <returns name="PropertySet">Thermal property set as Dynamo type</returns>
        </member>
        <member name="M:Orchid.RevitMaterial.ThermalAsset.SetProperties(System.Object,System.Boolean,System.String,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Set properties. Note can only be used for the thermal type Solid!
            </summary>
            <param name="propertySet">Thermal property set as Dynamo type</param>
            <param name="transmitsLight"></param>
            <param name="behavior"></param>
            <param name="thermalConductivity"></param>
            <param name="specificHeat"></param>
            <param name="density"></param>
            <param name="emissivity"></param>
            <param name="permeability"></param>
            <param name="porosity"></param>
            <param name="reflectivity"></param>
            <param name="electricalResistivity"></param>
            <returns name="PropertySet">Thermal property set as Dynamo type</returns>
        </member>
        <member name="M:Orchid.RevitMaterial.ThermalAsset.SetBasicThermal(System.Object,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Set basic thermal. Note can only be used for the thermal type Gas or Liquid!
            </summary>
            <param name="propertySet">Thermal property set as Dynamo type</param>
            <param name="thermalConductivity"></param>
            <param name="specificHeat"></param>
            <param name="density"></param>
            <param name="emissivity"></param>
            <param name="gasViscosity"></param>
            <param name="compressibility"></param>
            <returns name="PropertySet">Thermal property set as Dynamo type</returns>
        </member>
        <member name="M:Orchid.RevitMaterial.ThermalAsset.GetInformation(System.Object)">
            <summary>
            Get information.
            </summary>
            <param name="propertySet">Thermal property set as Dynamo type</param>
            <returns name="Description"></returns>
            <returns name="Keywords"></returns>
            <returns name="Subclass"></returns>
            <returns name="Source"></returns>
            <returns name="SourceUrl"></returns>
        </member>
        <member name="M:Orchid.RevitMaterial.ThermalAsset.GetProperties(System.Object)">
            <summary>
            Get properties.
            </summary>
            <param name="propertySet">Thermal property set as Dynamo type</param>
            <returns name="TransmitsLight"></returns>
            <returns name="Behavior"></returns>
            <returns name="ThermalConductivity"></returns>
            <returns name="SpecificHeat"></returns>
            <returns name="Density"></returns>
            <returns name="Emissivity"></returns>
            <returns name="Permeability"></returns>
            <returns name="Porosity"></returns>
            <returns name="Reflectivity"></returns>
            <returns name="ElectricalResistivity"></returns>
        </member>
        <member name="M:Orchid.RevitMaterial.ThermalAsset.GetBasicThermal(System.Object)">
            <summary>
            Get basic thermal.
            </summary>
            <param name="propertySet">Thermal property set as Dynamo type</param>
            <returns name="ThermalConductivity"></returns>
            <returns name="SpecificHeat"></returns>
            <returns name="Density"></returns>
            <returns name="Emissivity"></returns>
            <returns name="GasViscosity"></returns>
            <returns name="Compressibility"></returns>
        </member>
    </members>
</doc>
