<?xml version="1.0"?>
<doc>
    <assembly>
        <name>OrchidRevit</name>
    </assembly>
    <members>
        <member name="T:Orchid.Revit.Applications.Sigma">
            <summary>
            Sigma methods
            </summary>
        </member>
        <member name="M:Orchid.Revit.Applications.Sigma.#ctor">
            default private constructor --> hides the class in dynamo
        </member>
        <member name="M:Orchid.Revit.Applications.Sigma.Component(System.Collections.IList,System.Collections.Generic.List{Revit.Elements.Element},System.String,System.Collections.Generic.List{System.Double},System.String,System.Double,System.Boolean)">
            <summary>
            Create Sigma Estimate component data
            </summary>
            <param name="componentTree">List containing the structure as strings {"number","text"}\nAt least one 'level' is needed!</param>
            <param name="element">Element(s)</param>
            <param name="code">Element identifier for Sigma</param>
            <param name="quantity">Quantity as numeric value</param>
            <param name="sigmaUnit">Unit identifier for Sigma</param>
            <param name="sigmaRegulation">Regulation for the Sigma Component</param>
            <param name="instance">Component as instances or summarized/nTrue select Data to be Instances, False select Data to be summarized</param>
            <returns name="component">Component</returns>
        </member>
        <member name="T:Orchid.Revit.Core.Document">
            <summary>
            Document methods
            </summary>
        </member>
        <member name="M:Orchid.Revit.Core.Document.#ctor">
            default private constructor --> hides the class in dynamo
        </member>
        <member name="P:Orchid.Revit.Core.Document.Current">
            <summary>
            Get current document
            </summary>
            <returns name="Document">Autodesk.Revit.DB.Document</returns>
        </member>
        <member name="M:Orchid.Revit.Core.Document.ActiveView(Autodesk.Revit.DB.Document)">
            <summary>
            Get the active view in document
            </summary>
            <param name="document">The name of the document</param>
            <returns name="View">ActiveView</returns>
        </member>
        <member name="M:Orchid.Revit.Core.Document.OpenView(Revit.Elements.Element)">
            <summary>
            Open view in the active document
            </summary>
            <param name="view">View to open</param>
            <returns name="View">New active view</returns>
        </member>
        <member name="M:Orchid.Revit.Core.Document.Name(Autodesk.Revit.DB.Document)">
            <summary>
            Get the current document name
            </summary>
            <param name="document">The name of the document</param>
            <returns name="string">string</returns>
        </member>
        <member name="M:Orchid.Revit.Core.Document.BackgroundOpen(System.String)">
            <summary>
            Open documents in background
            </summary>
            <param name="file">File (path) to open in the background</param>
            <returns name="Document">Autodesk.Revit.DB.Document</returns>
        </member>
        <member name="M:Orchid.Revit.Core.Document.Save(Autodesk.Revit.DB.Document)">
            <summary>
            Save document
            </summary>
            <param name="document">Autodesk.Revit.DB.Document</param>
            <returns name="Document">Autodesk.Revit.DB.Document</returns>
        </member>
        <member name="M:Orchid.Revit.Core.Document.SaveAs(Autodesk.Revit.DB.Document,System.String)">
            <summary>
            SaveAs document
            </summary>
            <param name="document">Autodesk.Revit.DB.Document</param>
            <param name="name">Name for the document incl. path</param>
            <returns name="Document">Autodesk.Revit.DB.Document</returns>
        </member>
        <member name="M:Orchid.Revit.Core.Document.Close(Autodesk.Revit.DB.Document,System.Boolean)">
            <summary>
            Close document
            </summary>
            <param name="document">Autodesk.Revit.DB.Document</param>
            <param name="save">Save opened document?</param>
            <returns name="watch">Add a watch node to verify the output</returns>
        </member>
        <member name="M:Orchid.Revit.Core.Document.ImportImage(System.String,System.Boolean)">
            <summary>
            Import Image into document
            </summary>
            <param name="path">Image path including file name and extension</param>
            <param name="overwrite">Overwrite existing images?</param>
            <returns name="ImageType">ImageType</returns>
        </member>
        <member name="M:Orchid.Revit.Core.Document.Info(Autodesk.Revit.DB.Document)">
            <summary>
            Get document info
            </summary>
            <param name="document">Autodesk.Revit.DB.Document</param>
            <returns name="info">Document info</returns>
        </member>
        <member name="M:Orchid.Revit.Core.Document.ContainCategory(System.Collections.IList)">
            <summary>
            Does document contain category?
            </summary>
            <param name="category">Category to validate is contained in the document</param>
            <returns name="bool">List of booleans</returns>
        </member>
        <member name="M:Orchid.Revit.Core.Document.ContainType(System.Collections.IList)">
            <summary>
            Does document contain type?
            </summary>
            <param name="type">Type to validate is contained in the document</param>
            <returns name="bool">List of booleans</returns>
        </member>
        <member name="M:Orchid.Revit.Core.Document.Purge(Autodesk.Revit.DB.Document,System.Boolean)">
            <summary>
            Purge document. Set "completely" to true for including materials and assets!
            Please note "completely" purges also materials and materials assets that are 
            used in "peripheral" elements and settings. Among this is included materials/assets 
            bound to imported model elements, and materials/assets in settings like "Site" etc.
            </summary>
            <param name="document">Autodesk.Revit.DB.Document</param>
            <param name="completely">Includes purging materials and assets</param>
        </member>
        <member name="M:Orchid.Revit.Core.Document.Transfer(Autodesk.Revit.DB.Document,System.Object,System.Boolean)">
            <summary>
            Transfer project standards by category from source document to current document.
            </summary>
            <param name="source">Source as Autodesk.Revit.DB.Document</param>
            <param name="category">Category as string or object</param>
            <param name="overwrite">Copy only new or overwrite existing?</param>
            <returns name="Element">Transfered element</returns>
        </member>
        <member name="M:Orchid.Revit.Core.Document.Transfer(Autodesk.Revit.DB.Document,Autodesk.Revit.DB.Document,System.Object,System.Boolean)">
            <summary>
            Transfer project standards by category from source document to target document.
            </summary>
            <param name="source">Source as Autodesk.Revit.DB.Document</param>
            <param name="target">Target as Autodesk.Revit.DB.Document</param>
            <param name="category">Category as string or object</param>
            <param name="overwrite">Copy only new or overwrite existing?</param>
            <returns name="Element">Transfered element</returns>
        </member>
        <member name="T:Orchid.Revit.Core.IFC">
            <summary>
            IFC methods, retrieved from
            https://github.com/Autodesk/revit-ifc/blob/master/Source/IFCExporterUIOverride/IFCExportConfiguration.cs
            </summary>
        </member>
        <member name="M:Orchid.Revit.Core.IFC.#ctor">
            default private constructor --> hides the class in dynamo
        </member>
        <member name="M:Orchid.Revit.Core.IFC.SettingByName(System.String)">
            <summary>
            Ifc export setting, based on the available in the document
            </summary>
            <param name="name">The IFC setting name</param>
            <returns name="Setting">Ifc export setting</returns>
        </member>
        <member name="M:Orchid.Revit.Core.IFC.SettingGeneral(BIM.IFC.Export.UI.IFCExportConfiguration,System.String,System.String,System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Set general IFC export setting
            </summary>
            <param name="setting">IFC export setting</param> 
            <param name="ifcVersion">IFC version as string</param>
            <param name="ifcFileType">IFC file type as string</param>
            <param name="spaceBoundary">Space boundaries as integer</param>
            <param name="projectOrigin">Project origin as integer</param>
            <param name="splitByLevel">Split walls, columns, ducts by level?</param>
            <param name="includeSteel">Include steel elements?</param>
            <returns name="Setting">IFC export setting</returns>
        </member>
        <member name="M:Orchid.Revit.Core.IFC.SettingAdditional(BIM.IFC.Export.UI.IFCExportConfiguration,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Int32)">
            <summary>
            Set additional content and level of detail IFC export setting
            </summary>
            <param name="setting">IFC export setting</param> 
            <param name="Export2Dplan">Export 2D plan view elements?</param>
            <param name="LinkedFiles">Export linked files as separate IFCs?</param>
            <param name="VisibleElements">Export only elements visible in view?</param>
            <param name="RoomsInView">Export rooms in 3D views?</param>
            <param name="LOD">Level of detail for some element geometry</param>
            <returns name="Setting">IFC export setting</returns>
        </member>
        <member name="M:Orchid.Revit.Core.IFC.SettingProperty(BIM.IFC.Export.UI.IFCExportConfiguration,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.String,System.Boolean,System.String)">
            <summary>
            Set Property sets IFC export setting
            </summary>
            <param name="setting">IFC export setting</param> 
            <param name="revitProperty">Export Revit property sets?</param>
            <param name="commonProperty">Export IFC common property sets?</param>
            <param name="baseQuantities">Export base quantities?</param>
            <param name="exportSchedules">Export schedules as property sets?</param>
            <param name="specificSchedules">Export only schedules containing IFC, Pset, or Common in the title?</param>
            <param name="userProperty">Export user defined property sets?</param>
            <param name="userPropertyFile">Property set file name incl. path</param>
            <param name="parameterMapping">Export parameter mapping table?</param>
            <param name="parameterMappingFile">Mapping table file name incl. path</param>
            <returns name="Setting">IFC export setting</returns>
        </member>
        <member name="M:Orchid.Revit.Core.IFC.SettingAdvanced(BIM.IFC.Export.UI.IFCExportConfiguration,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Set advanced IFC export setting
            </summary>
            <param name="setting">IFC export setting</param> 
            <param name="exportParts">Export parts as building elements?</param>
            <param name="exportSolid">Allow use of mixed "Solid Model" representation?</param>
            <param name="activeViewGeometry">Use active view when creating geometry?</param>
            <param name="familyAndType">Use family and type name for reference?</param>
            <param name="roomBoundary">Use 2D room boundaries for room volume?</param>
            <param name="siteElevation">Include IFCSITE elevation in the site local placement origin?</param>
            <param name="storeGuid">Store the IFC GUID in an element parameter after export?</param>
            <param name="boundingBox">Export bounding box?</param>
            <param name="triangulation">Keep tessellated geometry as triangulation?</param>
            <returns name="Setting">IFC export setting</returns>
        </member>
        <member name="M:Orchid.Revit.Core.IFC.Export(Autodesk.Revit.DB.Document,BIM.IFC.Export.UI.IFCExportConfiguration,Revit.Elements.Element,Revit.Elements.Element,System.String,System.Boolean)">
            <summary>
            Export to IFC. Require IFC exporter 19.1.0 or higher
            https://sourceforge.net/projects/ifcexporter
            . the export function includes a default IFC export setting!
            </summary>
            <param name="document">Autodesk.Revit.DB.Document</param>
            <param name="setting">IFC export setting</param>
            <param name="view">View as object</param>
            <param name="phase">Phase to export as object</param>
            <param name="file">The export file name incl. path</param>
            <param name="overwrite">Overwrite existing file?</param>
            <returns name="watch">Add a watch node to verify the output</returns>
        </member>
        <member name="T:Orchid.Revit.Core.PostCommand">
            <summary>
            PostCommand methods
            </summary>
        </member>
        <member name="M:Orchid.Revit.Core.PostCommand.#ctor">
            default private constructor --> hides the class in dynamo
        </member>
        <member name="M:Orchid.Revit.Core.PostCommand.Purge(System.Boolean)">
            <summary>
            Purge document by Post Command.
            Post commands can only take the current document to be run once. Re-run the
            graph to re-activate the post command. To get back the "Purge" window inside
            Revit, set the "activate" value to "false" and re-run the graph once more!
            </summary>
            <param name="activate">Set to true to activate (and false to deactivate)</param>
        </member>
        <member name="T:Orchid.Revit.Core.Print">
            <summary>
            Print methods for core processes
            </summary>
        </member>
        <member name="M:Orchid.Revit.Core.Print.#ctor">
            default private constructor --> hides the class in dynamo
        </member>
        <member name="M:Orchid.Revit.Core.Print.ByView(System.String,System.Boolean,System.Boolean,System.Collections.Generic.List{System.String},System.String,System.Collections.Generic.List{Revit.Elements.Element},System.Object)">
            <summary>
            Print by view. --> Please note: If combined into one file is changed
            in this session, then the dynamo graph needs to be reloaded!
            </summary>
            <param name="printer">Printer name as string. If value is not set is default printer selected</param>
            <param name="combine">Combine into one file (Print to file must be set to true).</param>
            <param name="file">Print to file as boolean</param>
            <param name="filePath">Give a valid path and filename for the print output. If value is not set is the user asked later!</param>
            <param name="printRange">Print range as string</param>
            <param name="view">View to print as Revit Element (default: Active View)</param>
            <param name="printSetting">Printer setting as string or Revit Element</param>
        </member>
        <member name="M:Orchid.Revit.Core.Print.ByViewSheetSet(System.String,System.Boolean,System.Boolean,System.Collections.Generic.List{System.String},Revit.Elements.Element,System.Object)">
            <summary>
            Print by view sheet set. --> Please note: If combined into one file is changed
            in this session, then the dynamo graph needs to be reloaded!
            </summary>
            <param name="printer">Printer name as string. If value is not set is default printer selected</param>
            <param name="combine">Combine into one file (Print to file must be set to true).</param>
            <param name="file">Print to file as boolean</param>
            <param name="filePath">Give a valid path and filename for the print output. If value is not set is the user asked later!</param>
            <param name="viewSheetSet">ViewSheetSet to print as Revit Element</param>
            <param name="printSetting">Printer setting as string or Revit Element</param>
        </member>
        <member name="M:Orchid.Revit.Core.Print.CreateSetting(System.String,System.String,System.String,System.String,System.String,System.String,System.Double[],System.String,System.Int32)">
            <summary>
            Set print setting 
            </summary>
            <param name="printer">Printer name as string. If value is not set is default printer selected</param>
            <param name="name">name to create for the print setting</param>
            <param name="paperZize">Paper size as string. If value is not set is default paper size selected</param>
            <param name="pageOrientation">Page orientation as string.</param>
            <param name="paperPlacement">Paper placement</param>
            <param name="marginType">Print margin type</param>
            <param name="margin">Print margin value as double</param>
            <param name="zoomType">Zoom type as string</param>
            <param name="zoom">Zoom value as integer</param>       
            <returns name="PrintSetting">PrintSetting</returns>
        </member>
        <member name="M:Orchid.Revit.Core.Print.ChangeSetting(System.String,System.Object,System.String,System.String,System.String,System.String,System.Double[],System.String,System.Int32)">
            <summary>
            Change print setting 
            </summary>
            <param name="printer">Printer name as string. If value is not set is default printer selected</param>
            <param name="printSetting">printer setting as string or Revit Element</param>
            <param name="paperZize">Paper size as string. If value is not set is default paper size selected</param>
            <param name="pageOrientation">Page orientation as string.</param>
            <param name="paperPlacement">Paper placement</param>
            <param name="marginType">Print margin type</param>
            <param name="margin">Print margin value as double</param>
            <param name="zoomType">Zoom type as string</param>
            <param name="zoom">Zoom value as integer</param>       
            <returns name="PrintSetting">PrintSetting</returns>
        </member>
        <member name="M:Orchid.Revit.Core.Print.DeleteSetting(System.Object)">
            <summary>
            Delete print setting
            </summary>
            <param name="printSetting">printer setting as string or Revit Element</param>
        </member>
        <member name="M:Orchid.Revit.Core.Print.SetOptions(System.Object,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.String,System.String,System.String)">
            <summary>
            Set printer options
            </summary>
            <param name="printSetting">printer setting as string or Revit Element</param>
            <param name="viewLinksinBlue">View links in blue (Color prints only)</param>
            <param name="hideReforWorkPlanes">Hide ref/work planes</param>
            <param name="hideUnreferencedViewTags">Hide unreferenced view tags</param>
            <param name="maskCoincidentLines">Region edges mask coincident lines</param>
            <param name="hideScopeBoxes">Hide scope boxes</param>
            <param name="hideCropBoundaries">Hide crop boundaries</param>
            <param name="replaceHalftoneWithThinLines">Replace halftone with thin lines</param>
            <param name="hiddenLineViews">Hidden line views: Remove lines using vector or raster</param>
            <param name="rasterQuality">Appearance: Raster quality</param>
            <param name="colorDepth">Appearance: Colors</param>
            <returns name="PrintSetting">PrintSetting</returns>
        </member>
        <member name="T:Orchid.Revit.Core.Project">
            <summary>
            Project methods
            </summary>
        </member>
        <member name="M:Orchid.Revit.Core.Project.#ctor">
            default private constructor --> hides the class in dynamo
        </member>
        <member name="M:Orchid.Revit.Core.Project.GetProjectLocation">
            <summary>
            Get project location
            </summary>
            <returns name="Origin">Origin as project location</returns>
        </member>
        <member name="M:Orchid.Revit.Core.Project.SetProjectLocation(Revit.Elements.Element)">
            <summary>
            Set project location
            </summary>
            <param name="origin">Origin as project location</param>
            <returns name="Origin">Origin as project location</returns>
        </member>
        <member name="T:Orchid.Revit.Core.ViewSheetSet">
            <summary>
            View methods for core processes
            </summary>
        </member>
        <member name="M:Orchid.Revit.Core.ViewSheetSet.#ctor">
            default private constructor --> hides the class in dynamo
        </member>
        <member name="M:Orchid.Revit.Core.ViewSheetSet.Create(System.Collections.Generic.IList{Revit.Elements.Element},System.String)">
            <summary>
            Create ViewSheetSet
            </summary>
            <param name="view">View as Revit Element</param>
            <param name="name">Name for the ViewSheetSet</param>
            <returns name="ViewSheetSet">ViewSheetSet</returns>
        </member>
        <member name="M:Orchid.Revit.Core.ViewSheetSet.Change(System.Collections.Generic.IList{Revit.Elements.Element},System.Object)">
            <summary>
            Change ViewSheetSet
            </summary>
            <param name="view">View as Revit Element</param>
            <param name="viewSheetSet">ViewSheetSet as string or Revit Element</param>
            <returns name="ViewSheetSet">ViewSheetSet</returns>
        </member>
        <member name="M:Orchid.Revit.Core.ViewSheetSet.GetView(System.Object)">
            <summary>
            Get View from ViewSheetSet
            </summary>
            <param name="viewSheetSet">ViewSheetSet as string or Revit Element</param>
            <returns name="View">View</returns>
        </member>
        <member name="M:Orchid.Revit.Core.ViewSheetSet.Delete(System.Object)">
            <summary>
            Delete ViewSheetSet
            </summary>
            <param name="viewSheetSet">ViewSheetSet as string or Revit Element</param>
        </member>
        <member name="T:Orchid.Revit.Core.File">
            <summary>
            File methods for core processes
            </summary>
        </member>
        <member name="M:Orchid.Revit.Core.File.#ctor">
            default private constructor --> hides the class in dynamo
        </member>
        <member name="M:Orchid.Revit.Core.File.Info(System.Collections.Generic.IList{System.String})">
            <summary>
            Get file(s) info
            </summary>
            <param name="file">File(s), incl. path</param>
            <returns name="info">File(s) info</returns>
        </member>
        <member name="M:Orchid.Revit.Core.File.NewProject(System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{System.String})">
            <summary>
            Create new project by name
            </summary>
            <param name="file">File(s), must be new project file name(s) incl. path</param>
            <param name="template">Template(s) incl. path</param>
            <returns name="watch">Add a watch node to verify the output</returns>
        </member>
        <member name="M:Orchid.Revit.Core.File.SaveFamily(System.String,System.Collections.Generic.IList{Revit.Elements.Family},System.Boolean,System.Boolean)">
            <summary>
            Save family by name
            </summary>
            <param name="path">Path to save file(s)</param>
            <param name="family">Family to be saved</param>
            <param name="subfolder">Create subfolder by category?</param>
            <param name="overwrite">Overwrite existing families?</param>
            <returns name="watch">Add a watch node to verify the output</returns>
        </member>
        <member name="M:Orchid.Revit.Core.File.LoadFamily(System.Collections.Generic.IList{System.String})">
            <summary>
            Load family by file name, same core process as FamilyDocument.LoadFamily
            </summary>
            <param name="family">Path to the family file(s)</param>
            <returns name="Family">Family</returns>
        </member>
        <member name="M:Orchid.Revit.Core.File.LoadFamily(System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{System.String})">
            <summary>
            Open document and load family by path, existing families will be overwritten,
            and families is upgraded if needed. Documents will be saved and closed.
            </summary>
            <param name="document">Path to the documents file(s)</param>
            <param name="family">Path to the family file(s)</param>
            <returns name="Family">Family</returns>
        </member>
        <member name="T:Orchid.Revit.Core.Object">
            <summary>
            Object methods
            </summary>
        </member>
        <member name="M:Orchid.Revit.Core.Object.#ctor">
            default private constructor --> hides the class in dynamo
        </member>
        <member name="M:Orchid.Revit.Core.Object.ToRevitType(Revit.Elements.Element)">
            <summary>
            Convert Dynamo elements to Autodesk Revit elements
            </summary>
            <param name="element">Revit.Elements.Element</param>
            <returns name="Element">Autodesk.Revit.DB.Element</returns>
        </member>
        <member name="M:Orchid.Revit.Core.Object.ToDynamoType(Autodesk.Revit.DB.Element)">
            <summary>
            Convert Autodesk Revit elements to Dynamo elements
            </summary>
            <param name="element">Autodesk.Revit.DB.Element</param>
            <returns name="Element">Revit.Elements.Element</returns>
        </member>
        <member name="T:Orchid.Revit.Core.Parameter">
            <summary>
            Methods for parameters
            </summary>
        </member>
        <member name="M:Orchid.Revit.Core.Parameter.#ctor">
            default private constructor --> hides the class in dynamo
        </member>
        <member name="M:Orchid.Revit.Core.Parameter.AddProjectParameter(System.Collections.Generic.IList{System.String},System.String,System.String,System.Boolean,System.Collections.Generic.IList{Revit.Elements.Category})">
            <summary>
            Add (create) project parameter by name. If the parameter exists in the project is the category binding being updated.
            </summary>
            <param name="parameterName">The name of the parameter to add</param>
            <param name="type">Parameter Type</param>
            <param name="group">Parameter Group</param>
            <param name="instance">Is instance parameter, otherwise it's a type parameter</param>
            <param name="category">Category(ies) the parameter applies to, If no category is supplied, all possible categories are selected</param>
        </member>
        <member name="M:Orchid.Revit.Core.Parameter.AddSharedParameter(System.Collections.Generic.IList{System.String},System.String,System.String,System.String,System.Boolean,System.Collections.Generic.IList{Revit.Elements.Category})">
            <summary>
            Add (create) shared parameter by name in the project. If the parameter exists in the project is the category binding being updated.
            </summary>
            <param name="parameterName">The name of the parameter to add</param>
            <param name="groupName">Group of the parameter for shared parameters</param>
            <param name="type">Parameter Type</param>
            <param name="group">Parameter Group</param>
            <param name="instance">Is instance parameter, otherwise it's a type parameter</param>
            <param name="category">Category(ies) the parameter applies to, If no category is supplied, all possible categories are selected</param>
        </member>
        <member name="M:Orchid.Revit.Core.Parameter.AddIfcParameters(System.Collections.Generic.IList{Autodesk.Revit.DB.Document})">
            <summary>
            Add basic IFC parameters in the project (IfcExportAs, IfcExportType, IfcDescription, IFC CAD Layer)
            </summary>
            <param name="document">Autodesk.Revit.DB.Document</param>
        </member>
        <member name="M:Orchid.Revit.Core.Parameter.ProjectParameters(Autodesk.Revit.DB.Document)">
            <summary>
            Get all project parameters in the document
            </summary>
            <param name="document">Autodesk.Revit.DB.Document</param>
            <returns name="parameter">List of parameters</returns>
        </member>
        <member name="M:Orchid.Revit.Core.Parameter.GlobalParameters(Autodesk.Revit.DB.Document)">
            <summary>
            Get all global parameters in the document
            </summary>
            <param name="document">Autodesk.Revit.DB.Document</param>
            <returns name="parameter">List of parameters</returns>
        </member>
        <member name="M:Orchid.Revit.Core.Parameter.SharedParameters(Autodesk.Revit.DB.Document)">
            <summary>
            Get all shared parameters in the document
            </summary>
            <param name="document">Autodesk.Revit.DB.Document</param>
            <returns name="parameter">List of parameters</returns>
            <returns name="guid">List of guids</returns>
        </member>
        <member name="M:Orchid.Revit.Core.Parameter.ChangeCategory(System.Collections.Generic.IList{System.String},System.Boolean,System.Collections.Generic.IList{Revit.Elements.Category})">
            <summary>
            Change category binding for parameter by name in the project
            </summary>
            <param name="parameterName">The name of the parameter to change</param>
            <param name="instance">Is instance parameter, otherwise it's a type parameter</param>
            <param name="category">Category(ies) to change the parameter binding to</param>
        </member>
        <member name="M:Orchid.Revit.Core.Parameter.Delete(System.Collections.Generic.IList{System.String})">
            <summary>
            Delete parameter by name in the project
            </summary>
            <param name="parameterName">The name of the parameter to delete</param>
        </member>
        <member name="M:Orchid.Revit.Core.Parameter.Associate(Revit.Elements.Element,System.String,System.Object)">
            <summary>
            Associate element parameter to global parameter
            </summary>
            <param name="element">Element as string or Revit.Elements.Element</param>
            <param name="parameterName">The name of the parameter</param>
            <param name="globalParameter">The name of the global parameter</param>
            <returns name="Element">Revit.Elements.Element</returns>
        </member>
        <member name="M:Orchid.Revit.Core.Parameter.HasAssociated(Revit.Elements.Element,System.String)">
            <summary>
            Verify if parameter has associated global parameter
            </summary>
            <param name="element">Element as string or Revit.Elements.Element</param>
            <param name="parameterName">The name of the parameter</param>
            <returns name="bool">Boolean value</returns>
        </member>
        <member name="M:Orchid.Revit.Core.Parameter.GetAssociated(Revit.Elements.Element,System.String)">
            <summary>
            Get associated global parameter
            </summary>
            <param name="element">Element as string or Revit.Elements.Element</param>
            <param name="parameterName">The name of the parameter</param>
            <returns name="Parameter">Parameter</returns>
        </member>
        <member name="T:Orchid.Revit.Core.SharedParameter">
            <summary>
            Methods for parameters
            </summary>
        </member>
        <member name="M:Orchid.Revit.Core.SharedParameter.#ctor">
            default private constructor --> hides the class in dynamo
        </member>
        <member name="M:Orchid.Revit.Core.SharedParameter.SetFile(System.String)">
            <summary>
            Set the shared parameter file
            </summary>
            <param name="file">The "new" shared parameter file, incl. path</param>
            <returns name="file">The previously loaded shared parameter file</returns>
        </member>
        <member name="M:Orchid.Revit.Core.SharedParameter.GroupByType(System.String)">
            <summary>
            Get the shared parameter grouped by type
            </summary>
            <param name="file">The shared parameter file, incl. path</param>
            <returns name="parameter">List of parameters</returns>
            <returns name="guid">List of guids</returns>
            <returns name="groupName">List of group names</returns>
            <returns name="type">List of types</returns>
        </member>
        <member name="M:Orchid.Revit.Core.SharedParameter.GroupByGroupName(System.String)">
            <summary>
            Get the shared parameter grouped by group name
            </summary>
            <param name="file">The shared parameter file, incl. path</param>
            <returns name="parameter">List of parameters</returns>
            <returns name="guid">List of guids</returns>
            <returns name="groupName">List of group names</returns>
            <returns name="type">List of types</returns>
        </member>
        <member name="T:Orchid.Revit.Elements.Category">
            <summary>
            Methods for categories
            </summary>
        </member>
        <member name="M:Orchid.Revit.Elements.Category.#ctor">
            default private constructor --> hides the class in dynamo
        </member>
        <member name="M:Orchid.Revit.Elements.Category.BuiltInCategory">
            <summary>
            Get all built in categories
            </summary>
            <returns name="Category">Category</returns>
        </member>
        <member name="M:Orchid.Revit.Elements.Category.ByCategoryType(System.String)">
            <summary>
            Get all categories by category type
            </summary>
            <param name="categoryType">CategoryType</param>
            <returns name="Category">Category</returns>
        </member>
        <member name="M:Orchid.Revit.Elements.Category.InDocument(Autodesk.Revit.DB.Document)">
            <summary>
            Get all categories in document
            </summary>
            <param name="document">Autodesk.Revit.DB.Document</param>
            <returns name="Category">Category</returns>
        </member>
        <member name="M:Orchid.Revit.Elements.Category.CategoryType(System.Object)">
            <summary>
            Get the category type
            </summary>
            <param name="category">Category</param>
            <returns name="CategoryType">CategoryType</returns>
        </member>
        <member name="T:Orchid.Revit.Elements.ElementType">
            <summary>
            Methods for elements
            </summary>
        </member>
        <member name="M:Orchid.Revit.Elements.ElementType.#ctor">
            default private constructor --> hides the class in dynamo
        </member>
        <member name="M:Orchid.Revit.Elements.ElementType.Name(Revit.Elements.Element)">
            <summary>
            Get element type name
            </summary>
            <param name="elementType">Revit.Elements.Element</param>
            <returns name="string">Name as string</returns>
        </member>
        <member name="M:Orchid.Revit.Elements.ElementType.FamilyName(Revit.Elements.Element)">
            <summary>
            Get element type family name
            </summary>
            <param name="elementType">Revit.Elements.Element</param>
            <returns name="string">Family name as string</returns>
        </member>
        <member name="T:Orchid.Revit.Elements.Material">
            <summary>
            Methods for materials
            </summary>
        </member>
        <member name="M:Orchid.Revit.Elements.Material.#ctor">
            default private constructor --> hides the class in dynamo
        </member>
        <member name="M:Orchid.Revit.Elements.Material.Quantity(System.Collections.IList)">
            <summary>
            Get material by element, return values in SI unit (m2/m3)
            </summary>
            <param name="element">List of element</param>
            <returns name="Material">List of material</returns>
            <returns name="area">List of area</returns>
            <returns name="volumne">List of volumne</returns>
        </member>
        <member name="M:Orchid.Revit.Elements.Material.SumByElement(System.Collections.IList)">
            <summary>
            Material sum by element, return values in SI unit (m2/m3)
            </summary>
            <param name="element">List of element</param>
            <returns name="Material">List of material</returns>
            <returns name="area">List of area</returns>
            <returns name="volumne">List of volumne</returns>
        </member>
        <member name="M:Orchid.Revit.Elements.Material.Sum(System.Collections.IList)">
            <summary>
            Element by (summarized) material, return values in SI unit (m2/m3)
            </summary>
            <param name="material">List of material</param>
            <returns name="Element">List of element</returns>
            <returns name="area">List of area</returns>
            <returns name="volumne">List of volumne</returns>
        </member>
        <member name="M:Orchid.Revit.Elements.Material.Density(System.Collections.IList)">
            <summary>
            Get material asset as physical and thermal density in SI unit (kg/m3)
            </summary>
            <param name="material">List of material</param>
            <returns name="physical">List of physical density</returns>
            <returns name="thermal">List of thermal density</returns>
        </member>
        <member name="T:Orchid.Revit.Elements.Selection">
            <summary>
            Methods for selecting elements
            </summary>
        </member>
        <member name="M:Orchid.Revit.Elements.Selection.#ctor">
            default private constructor --> hides the class in dynamo
        </member>
        <member name="M:Orchid.Revit.Elements.Selection.ElementHasMaterial(System.Collections.Generic.IList{Autodesk.Revit.DB.Document})">
            <summary>
            Get elements that has material quantities in document, return element grouped by category.
            </summary>
            <param name="document">Autodesk.Revit.DB.Document</param>
            <returns name="Element">Element</returns>
            <returns name="Category">Category</returns>
        </member>
        <member name="M:Orchid.Revit.Elements.Selection.ElementByCategory(System.Collections.Generic.IList{Autodesk.Revit.DB.Document},System.Collections.IList)">
            <summary>
             Get all elements by category in document, return element grouped by category.
            </summary>
            <param name="document">Autodesk.Revit.DB.Document</param>
            <param name="category">Category</param>
            <returns name="Element">Element</returns>
            <returns name="Category">Category</returns>
        </member>
        <member name="M:Orchid.Revit.Elements.Selection.ElementByCategoryType(System.Collections.Generic.IList{Autodesk.Revit.DB.Document},System.Collections.Generic.IList{System.String})">
            <summary>
            Get all elements by category in document, return element grouped by category and category type.
            </summary>
            <param name="document">Autodesk.Revit.DB.Document</param>
            <param name="categoryType">CategoryType</param>
            <returns name="Element">Element</returns>
            <returns name="Category">Category</returns>
            <returns name="CategoryType">CategoryType</returns>
        </member>
        <member name="M:Orchid.Revit.Elements.Selection.ElementByFamily(Revit.Elements.Family)">
            <summary>
            Get all elements of the specified family from the model.
            </summary>
            <param name="family">The Family</param>
            <returns name="Element">The list of elements matching the query.</returns>
        </member>
        <member name="T:Orchid.Revit.Elements.Family">
            <summary>
            Family methods for elements
            </summary>
        </member>
        <member name="M:Orchid.Revit.Elements.Family.#ctor">
            default private constructor --> hides the class in dynamo
        </member>
        <member name="M:Orchid.Revit.Elements.Family.All">
            <summary>
            Get all family in current document
            </summary>
            <returns name="Family">Family</returns>
            <returns name="Category">Category</returns>
        </member>
        <member name="M:Orchid.Revit.Elements.Family.ByCategory(System.Object)">
            <summary>
            Get all family by category in list of documents
            </summary>
            <param name="category">Category as string or Category type</param>
            <returns name="Family">Family</returns>
        </member>
        <member name="M:Orchid.Revit.Elements.Family.FamilyDocument(System.Collections.IList)">
            <summary>
            Open family document by family 
            </summary>
            <param name="family">Family</param>
            <returns name="Document">Autodesk.Revit.DB.Document</returns>
        </member>
        <member name="M:Orchid.Revit.Elements.Family.HasAssociated(Revit.Elements.Family)">
            <summary>
            Verify if family has associated elements
            </summary>
            <param name="family">Family</param>
            <returns name="bool">Boolean value</returns>
        </member>
        <member name="T:Orchid.Revit.Elements.FamilyType">
            <summary>
            FamilyType methods for elements
            </summary>
        </member>
        <member name="M:Orchid.Revit.Elements.FamilyType.#ctor">
            default private constructor --> hides the class in dynamo
        </member>
        <member name="M:Orchid.Revit.Elements.FamilyType.All">
            <summary>
            Get all family types in current document
            </summary>
            <returns name="FamilyType">Family type</returns>
            <returns name="Category">Category</returns>
        </member>
        <member name="M:Orchid.Revit.Elements.FamilyType.ByCategory(System.Object)">
            <summary>
            Get all family types by category in list of documents
            </summary>
            <param name="category">Category as string or Category type</param>
            <returns name="FamilyType">Family type</returns>
        </member>
        <member name="M:Orchid.Revit.Elements.FamilyType.FamilyDocument(System.Collections.IList)">
            <summary>
            open family document by family type
            </summary>
            <param name="familyType">Family type</param>
            <returns name="Document">Autodesk.Revit.DB.Document</returns>
        </member>
        <member name="M:Orchid.Revit.Elements.FamilyType.HasAssociated(Revit.Elements.FamilyType)">
            <summary>
            Verify if family type has associated elements
            </summary>
            <param name="familyType">Family type</param>
            <returns name="bool">Boolean value</returns>
        </member>
        <member name="T:Orchid.Revit.Elements.Floor">
            <summary>
            Floor methods for elements
            </summary>
        </member>
        <member name="M:Orchid.Revit.Elements.Floor.#ctor">
            default private constructor --> hides the class in dynamo
        </member>
        <member name="M:Orchid.Revit.Elements.Floor.SetAreaLoad(System.Collections.IList,System.Collections.IList,System.Collections.IList)">
            <summary>
            Set (structural) floor area load
            </summary>
            <param name="element">Element</param>
            <param name="areaLoadType">AreaLoadType</param>
            <param name="value">List of Load value</param>
            <returns name="value">Load value</returns>
        </member>
        <member name="T:Orchid.Revit.Elements.SubCategory">
            <summary>
            Methods for selecting elements
            </summary>
        </member>
        <member name="M:Orchid.Revit.Elements.SubCategory.#ctor">
            default private constructor --> hides the class in dynamo
        </member>
        <member name="M:Orchid.Revit.Elements.SubCategory.Create(System.Object,System.String)">
            <summary>
            Create subcategory by category in document.
            </summary>
            <param name="category">Category</param>
            <param name="name">Name of the subcategory</param>
            <returns name="SubCategory">Category</returns>
        </member>
        <member name="M:Orchid.Revit.Elements.SubCategory.Remove(System.Object,System.Object)">
            <summary>
            Remove subcategory by category in document.
            </summary>
            <param name="category">Category</param>
            <param name="subCategory">The subcategory as string or category</param>
            <returns name="watch">Add a watch node to verify the output</returns>
        </member>
        <member name="M:Orchid.Revit.Elements.SubCategory.ByCategory(System.Object)">
            <summary>
            Get subcategories by category in document
            </summary>
            <param name="category">Category</param>
            <returns name="SubCategory">Category</returns>
        </member>
        <member name="M:Orchid.Revit.Elements.SubCategory.ByName(System.Object,System.String)">
            <summary>
             Get subcategory by name in document.
            </summary>
            <param name="category">Category</param>
            <param name="name">Name of the subcategory</param>
            <returns name="SubCategory">Category</returns>
        </member>
        <member name="M:Orchid.Revit.Elements.SubCategory.ByName(System.String)">
            <summary>
             Get subcategory by name in document.
            </summary>
            <param name="name">Name of the subcategory</param>
            <returns name="SubCategory">Category</returns>
        </member>
        <member name="T:Orchid.Revit.Elements.SystemFamily">
            <summary>
            Methods for system families
            </summary>
        </member>
        <member name="M:Orchid.Revit.Elements.SystemFamily.#ctor">
            default private constructor --> hides the class in dynamo
        </member>
        <member name="M:Orchid.Revit.Elements.SystemFamily.CreateCompoundLayer(System.Collections.IList,System.Collections.Generic.List{System.Int32},System.Collections.Generic.List{Revit.Elements.Element},System.Collections.Generic.List{System.Double},System.Collections.Generic.List{System.Boolean},System.Collections.Generic.List{System.Boolean},System.Collections.Generic.List{System.Boolean},System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.Int32})">
            <summary>
            Create a layer by index at a specified compound layer in a system
            family type that have a compound structure (walls, floors, roofs etc.).
            </summary>
            <param name="elementType">The system family type</param>
            <param name="function">The function of the layer (integer)</param>
            <param name="material">The material (dynamo type)</param>
            <param name="thickness">Thickness of the layer</param>
            <param name="wrapping">Wrapping of the layer</param>
            <param name="variable">Set the layer variable</param>
            <param name="structural">Set the layer structural</param>
            <param name="placement">Placement of the layer (string)</param>
            <param name="index">The index of the layer</param>
            <returns name="ElementType">FamilyType</returns>
        </member>
        <member name="M:Orchid.Revit.Elements.SystemFamily.DeleteCompoundLayer(System.Collections.IList,System.Collections.Generic.List{System.Int32})">
            <summary>
            Delete a layer by index at a specified compound layer in a system
            family type that have a compound structure (walls, floors, roofs etc.).
            </summary>
            <param name="elementType">The system family type</param>
            <param name="index">The index of the layer</param>
            <returns name="ElementType">FamilyType</returns>
        </member>
        <member name="M:Orchid.Revit.Elements.SystemFamily.GetCompoundLayerMaterial(System.Collections.IList)">
            <summary>
            Get the compound layer material in a system family type that
            have a compound structure (walls, floors, roofs etc.).
            </summary>
            <param name="elementType">The system family type</param>
            <returns name="Material">Material</returns>
        </member>
        <member name="M:Orchid.Revit.Elements.SystemFamily.GetCompoundLayerWidth(System.Collections.IList)">
            <summary>
            Get the compound layer width in a system family type that
            have a compound structure (walls, floors, roofs etc.).
            </summary>
            <param name="elementType">The system family type</param>
            <returns name="double">Width</returns>
        </member>
        <member name="M:Orchid.Revit.Elements.SystemFamily.SetCompoundLayerMaterial(System.Collections.IList,System.Collections.Generic.List{Revit.Elements.Element},System.Collections.Generic.List{System.Int32})">
            <summary>
            Set the material by index at a specified compound layer in a system
            family type that have a compound structure (walls, floors, roofs etc.).
            </summary>
            <param name="elementType">The system family type</param>
            <param name="material">The material (dynamo type)</param>
            <param name="index">The index to set</param>
            <returns name="ElementType">FamilyType</returns>
        </member>
        <member name="M:Orchid.Revit.Elements.SystemFamily.SetCompoundLayerWidth(System.Collections.IList,System.Collections.Generic.List{System.Double},System.Collections.Generic.List{System.Int32})">
            <summary>
            Set the width by index at a specified compound layer in a system
            family type that have a compound structure (walls, floors, roofs etc.).
            </summary>
            <param name="elementType">The system family type</param>
            <param name="thickness">Thickness of the layer</param>
            <param name="index">The index to set</param>
            <returns name="ElementType">FamilyType</returns>
        </member>
        <member name="M:Orchid.Revit.Elements.SystemFamily.SetCompoundLayerWrapping(System.Collections.IList,System.Collections.Generic.List{System.Boolean},System.Collections.Generic.List{System.Int32})">
            <summary>
            Wrapping of the layer by index at a specified compound layer in a system
            family type that have a compound structure (walls, floors, roofs etc.).
            </summary>
            <param name="elementType">The system family type</param>
            <param name="wrapping">Wrapping of the layer</param>
            <param name="index">The index to set</param>
            <returns name="ElementType">FamilyType</returns>
        </member>
        <member name="M:Orchid.Revit.Elements.SystemFamily.SetCompoundLayerVariable(System.Collections.IList,System.Collections.Generic.List{System.Boolean},System.Collections.Generic.List{System.Int32})">
            <summary>
            Set the layer variable by index at a specified compound layer in a system
            family type that have a compound structure (walls, floors, roofs etc.).
            </summary>
            <param name="elementType">The system family type</param>
            <param name="variable">Set the layer variable</param>
            <param name="index">The index to set</param>
            <returns name="ElementType">FamilyType</returns>
        </member>
        <member name="M:Orchid.Revit.Elements.SystemFamily.SetCompoundLayerStructural(System.Collections.IList,System.Collections.Generic.List{System.Boolean},System.Collections.Generic.List{System.Int32})">
            <summary>
            Set the layer structural by index at a specified compound layer in a system
            family type that have a compound structure (walls, floors, roofs etc.).
            </summary>
            <param name="elementType">The system family type</param>
            <param name="structural">Set the layer structural</param>
            <param name="index">The index to set</param>
            <returns name="ElementType">FamilyType</returns>
        </member>
        <member name="T:Orchid.Revit.Elements.Element">
            <summary>
            Methods for elements
            </summary>
        </member>
        <member name="M:Orchid.Revit.Elements.Element.#ctor">
            default private constructor --> hides the class in dynamo
        </member>
        <member name="M:Orchid.Revit.Elements.Element.IsFlipped(System.Collections.IList)">
            <summary>
            Get the element flip condition, output as boolean
            </summary>
            <param name="element">List of elements</param>
            <returns name="bool">List of booleans</returns>
        </member>
        <member name="M:Orchid.Revit.Elements.Element.IsHandFlipped(System.Collections.IList)">
            <summary>
            Get the element hand flip condition, output as boolean
            </summary>
            <param name="element">List of elements</param>
            <returns name="bool">List of booleans</returns>
        </member>
        <member name="M:Orchid.Revit.Elements.Element.IsFaceFlipped(System.Collections.IList)">
            <summary>
            Get the element face flip condition, output as boolean
            </summary>
            <param name="element">List of elements</param>
            <returns name="bool">List of booleans</returns>
        </member>
        <member name="M:Orchid.Revit.Elements.Element.Flipped(System.Collections.IList)">
            <summary>
            Get the element flip condition, output as element
            </summary>
            <param name="element">List of elements</param>
            <returns name="true">List of flipped elements</returns>
            <returns name="false">List of not flipped elements</returns>
        </member>
        <member name="M:Orchid.Revit.Elements.Element.HandFlipped(System.Collections.IList)">
            <summary>
            Get the element hand flip condition, output as element
            </summary>
            <param name="element">List of elements</param>
            <returns name="true">List of flipped elements</returns>
            <returns name="false">List of not flipped elements</returns>
        </member>
        <member name="M:Orchid.Revit.Elements.Element.FaceFlipped(System.Collections.IList)">
            <summary>
            Get the element face flip condition, output as element
            </summary>
            <param name="element">List of elements</param>
            <returns name="true">List of flipped elements</returns>
            <returns name="false">List of not flipped elements</returns>
        </member>
        <member name="M:Orchid.Revit.Elements.Element.Delete(System.Collections.IList)">
            <summary>
            Delete elements
            </summary>
            <param name="element">List of elements</param>
            <returns name="watch">Add a watch node to verify the output</returns>
        </member>
        <member name="M:Orchid.Revit.Elements.Element.Delete(System.Collections.Generic.IList{Autodesk.Revit.DB.Document},System.Collections.IList)">
            <summary>
            Delete elements
            </summary>
            <param name="document">Autodesk.Revit.DB.Document</param>
            <param name="element">List of elements</param>
            <returns name="watch">Add a watch node to verify the output</returns>
        </member>
        <member name="M:Orchid.Revit.Elements.Element.SetType(System.Collections.IList,System.Collections.IList)">
            <summary>
            Set element by family type
            </summary>
            <param name="element">Element(s)</param>
            <param name="familyType">FamilyType(s)</param>
            <returns name="Element">Revit.Elements.Element</returns>
        </member>
        <member name="M:Orchid.Revit.Elements.Element.SetAnalyticalLocation(System.Collections.IList,System.String)">
            <summary>
            Set (structural) element analytical location
            </summary>
            <param name="element">Element(s)</param>
            <param name="location">Element analytical location</param>
            <returns name="Element">Analytical floor element</returns>
        </member>
        <member name="M:Orchid.Revit.Elements.Element.GetAnalytical(Revit.Elements.Element)">
            <summary>
            Get analytical element
            </summary>
            <param name="element">Revit.Elements.Element</param>
            <returns name="Element">Revit.Elements.Element</returns>
        </member>
        <member name="M:Orchid.Revit.Elements.Element.FamilyName(Revit.Elements.Element)">
            <summary>
            Get element family name
            </summary>
            <param name="element">Revit.Elements.Element</param>
            <returns name="string">Family name as string</returns>
        </member>
        <member name="M:Orchid.Revit.Elements.Element.ElementType(Autodesk.Revit.DB.Document,Revit.Elements.Element)">
            <summary>
            Returns the ElementType for this Element. Returns null if the Element cannot have a ElementType assigned.
            </summary>
            <param name="document">Autodesk.Revit.DB.Document</param>
            <param name="element">Revit.Elements.Element</param>
            <returns name="ElementType">Element Type or Null.</returns>
        </member>
        <member name="M:Orchid.Revit.Elements.Element.View(Revit.Elements.Element)">
            <summary>
            Get the view where the element is located
            </summary>
            <param name="element">Revit.Elements.Element</param>
            <returns name="View">View</returns>
        </member>
        <member name="M:Orchid.Revit.Elements.Element.Info(Autodesk.Revit.DB.Document,Revit.Elements.Element)">
            <summary>
            Get element info
            </summary>
            <param name="document">Autodesk.Revit.DB.Document</param>
            <param name="element">Element as object</param>
            <returns name="Owner">Owner</returns>
            <returns name="Creator">Creator</returns>
            <returns name="LastChangedBy">LastChangedBy</returns>
            <returns name="RequestedBy">RequestedBy</returns>
        </member>
        <member name="T:Orchid.Revit.FamilyDocument.Document">
            <summary>
            Families methods for family documents
            </summary>
        </member>
        <member name="M:Orchid.Revit.FamilyDocument.Document.#ctor">
            default private constructor --> hides the class in dynamo
        </member>
        <member name="M:Orchid.Revit.FamilyDocument.Document.LoadFamily(Autodesk.Revit.DB.Document)">
            <summary>
            Load family by file name, same core process as File.LoadFamily
            </summary>
            <param name="familyDocument">Family document as Revit document (rfa)</param>
            <returns name="watch">Add a watch node to verify the output</returns>
        </member>
        <member name="M:Orchid.Revit.FamilyDocument.Document.AddLookupTable(Autodesk.Revit.DB.Document,System.String)">
            <summary>
            Load lookup file by name
            </summary>
            <param name="familyDocument">Family document as Revit document (rfa)</param>
            <param name="file">Lookup file (path) to load.</param>
            <returns name="watch">Add a watch node to verify the output</returns>
        </member>
        <member name="M:Orchid.Revit.FamilyDocument.Document.GetCategory(Autodesk.Revit.DB.Document)">
            <summary>
            Get the family document category.
            </summary>
            <param name="familyDocument">Family document as Revit document (rfa)</param>
            <returns name="Category">Category as Dynamo object</returns>
        </member>
        <member name="M:Orchid.Revit.FamilyDocument.Document.SetCategory(Autodesk.Revit.DB.Document,System.Object)">
            <summary>
            Set the family document category.
            </summary>
            <param name="familyDocument">Family document as Revit document (rfa)</param>
            <param name="category">Gategory as string or Dynamo object</param>
            <returns name="Category">Category as Dynamo object</returns>
        </member>
        <member name="T:Orchid.Revit.FamilyDocument.Family">
            <summary>
            Families methods for families
            </summary>
        </member>
        <member name="M:Orchid.Revit.FamilyDocument.Family.#ctor">
            default private constructor --> hides the class in dynamo
        </member>
        <member name="M:Orchid.Revit.FamilyDocument.Family.GetNested(Autodesk.Revit.DB.Document)">
            <summary>
            Get nested family in the familyDocument
            </summary>
            <param name="familyDocument">Family document as Revit document (rfa)</param>
            <returns name="Family">Family as Dynamo object</returns>
        </member>
        <member name="T:Orchid.Revit.FamilyDocument.FamilyType">
            <summary>
            Families methods for family types
            </summary>
        </member>
        <member name="M:Orchid.Revit.FamilyDocument.FamilyType.#ctor">
            default private constructor --> hides the class in dynamo
        </member>
        <member name="M:Orchid.Revit.FamilyDocument.FamilyType.Current">
            <summary>
            Get the current family type.
            Note: If no current family types exists, then a default 
            family type will be created named as the familyDocument.
            </summary>
            <returns name="FamilyType">FamilyType as Revit object</returns>
        </member>
        <member name="M:Orchid.Revit.FamilyDocument.FamilyType.Current(Autodesk.Revit.DB.Document)">
            <summary>
            Get the current family type in the familyDocument. 
            Note: If no current family types exists, then a default 
            family type will be created named as the familyDocument.
            </summary>
            <param name="familyDocument">Family document as Revit document (rfa)</param>
            <returns name="FamilyType">FamilyType as Revit object</returns>
        </member>
        <member name="M:Orchid.Revit.FamilyDocument.FamilyType.Name(Autodesk.Revit.DB.FamilyType)">
            <summary>
            Get the family type name
            </summary>
            <param name="familyType">The name of the family type</param>
            <returns name="string">Name as string</returns>
        </member>
        <member name="M:Orchid.Revit.FamilyDocument.FamilyType.All">
            <summary>
            Get all family types.
            Note: If no family types exists, then a default 
            family type will be created named as the familyDocument.
            </summary>
            <returns name="FamilyType">FamilyType as Revit object</returns>
        </member>
        <member name="M:Orchid.Revit.FamilyDocument.FamilyType.All(Autodesk.Revit.DB.Document)">
            <summary>
            Get all family types in the familyDocument.
            Note: If no family types exists, then a default 
            family type will be created named as the familyDocument.
            </summary>
            <param name="familyDocument">Family document as Revit document (rfa)</param>
            <returns name="FamilyType">FamilyType as Revit object</returns>
        </member>
        <member name="M:Orchid.Revit.FamilyDocument.FamilyType.Create(Autodesk.Revit.DB.Document,System.Collections.Generic.List{System.String})">
            <summary>
            Create family type by name.
            Note: If no input to name is provided (default as null), then a default 
            family type will be created named as the familyDocument.
            </summary>
            <param name="familyDocument">Family document as Revit document (rfa)</param>
            <param name="name">The family type name</param>
            <returns name="FamilyType">FamilyType as Revit object</returns>
        </member>
        <member name="M:Orchid.Revit.FamilyDocument.FamilyType.Rename(Autodesk.Revit.DB.Document,System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String})">
            <summary>
            Rename family type by name
            </summary>
            <param name="familyDocument">Family document as Revit document (rfa)</param>
            <param name="sourceName">The name of the source family type</param>
            <param name="targetName">The name of the target family type</param>
            <returns name="watch">Add a watch node to verify the output</returns>
        </member>
        <member name="M:Orchid.Revit.FamilyDocument.FamilyType.Delete(Autodesk.Revit.DB.Document,System.Collections.Generic.List{System.Object})">
            <summary>
            Delete family type by name
            </summary>
            <param name="familyDocument">Family document as Revit document (rfa)</param>
            <param name="familyType">FamilyType as string or Revit object</param>
            <returns name="watch">Add a watch node to verify the output</returns>
        </member>
        <member name="M:Orchid.Revit.FamilyDocument.FamilyType.GetNested(Autodesk.Revit.DB.Document)">
            <summary>
            Get nested family in the familyDocument
            </summary>
            <param name="familyDocument">Family document as Revit document (rfa)</param>
            <returns name="FamilyType">FamilyType as Dynamo object</returns>
        </member>
        <member name="T:Orchid.Revit.FamilyDocument.Formula">
            <summary>
            Families methods for formulas
            </summary>
        </member>
        <member name="M:Orchid.Revit.FamilyDocument.Formula.#ctor">
            default private constructor --> hides the class in dynamo
        </member>
        <member name="M:Orchid.Revit.FamilyDocument.Formula.Get(Autodesk.Revit.DB.Document,System.Collections.Generic.List{System.String})">
            <summary>
            Get family formula by parameter name.
            Note: If no family types exists, then a default 
            family type will be created named as the familyDocument.
            </summary>
            <param name="familyDocument">Family document as Revit document (rfa)</param>
            <param name="parameterName">The name of the parameter to get</param>
            <returns name="formula">Formula as string</returns>
        </member>
        <member name="M:Orchid.Revit.FamilyDocument.Formula.Set(Autodesk.Revit.DB.Document,System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String})">
            <summary>
            Set family formula by parameter name.
            Note: If no family types exists, then a default 
            family type will be created named as the familyDocument.
            </summary>
            <param name="familyDocument">Family document as Revit document (rfa)</param>
            <param name="parameterName">The name of the parameter to set</param>
            <param name="value">The value</param>
            <returns name="watch">Add a watch node to verify the output</returns>
        </member>
        <member name="M:Orchid.Revit.FamilyDocument.Formula.Remove(Autodesk.Revit.DB.Document,System.Collections.Generic.List{System.String})">
            <summary>
            Remove family formula value by name
            Note: If no family types exists, then a default 
            family type will be created named as the familyDocument.
            </summary>
            <param name="familyDocument">Family document as Revit document (rfa)</param>
            <param name="parameterName">The name of the parameter to remove formula</param>
            <returns name="watch">Add a watch node to verify the output</returns>
        </member>
        <member name="T:Orchid.Revit.FamilyDocument.Nested">
            <summary>
            Families methods for parameters
            </summary>
        </member>
        <member name="M:Orchid.Revit.FamilyDocument.Nested.#ctor">
            default private constructor --> hides the class in dynamo
        </member>
        <member name="M:Orchid.Revit.FamilyDocument.Nested.GetAssociated(Autodesk.Revit.DB.Document)">
            <summary>
            Get associated parameter, nested family, nested family type, and nested family parameter
            </summary>
            <param name="familyDocument">Family document as Revit document (rfa)</param>
            <returns name="documentParameter">Family document parameter</returns>
            <returns name="Family">Nested family in the document</returns>
            <returns name="FamilyType">Nested family type in the document</returns>
            <returns name="familyParameter">Nested family parameter in the document</returns>
        </member>
        <member name="T:Orchid.Revit.FamilyDocument.Parameter">
            <summary>
            Families methods for parameters
            </summary>
        </member>
        <member name="M:Orchid.Revit.FamilyDocument.Parameter.#ctor">
            default private constructor --> hides the class in dynamo
        </member>
        <member name="M:Orchid.Revit.FamilyDocument.Parameter.Parameters(Autodesk.Revit.DB.Document)">
            <summary>
            Obtain all of the Parameters from the family document, sorted by Name.
            </summary>
            <param name="familyDocument">Family document as Revit document (rfa)</param>
            <returns name="Parameter">Parameter</returns>
        </member>
        <member name="M:Orchid.Revit.FamilyDocument.Parameter.Name(Autodesk.Revit.DB.FamilyParameter)">
            <summary>
            Get family parameter name
            </summary>
            <param name="parameter">FamilyParameter as Revit object</param>
            <returns name="string">Name as string</returns>
        </member>
        <member name="M:Orchid.Revit.FamilyDocument.Parameter.AddParameter(Autodesk.Revit.DB.Document,System.Collections.Generic.IList{System.String},System.String,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Add (create) parameter by name
            </summary>
            <param name="familyDocument">Family document as Revit document (rfa)</param>
            <param name="parameterName">The name of the parameter to create</param>
            <param name="type">Parameter Type</param>
            <param name="group">Parameter Group</param>
            <param name="tooltip">Tooltip for the parameter</param>
            <param name="instance">Is instance parameter, otherwise it's a type parameter</param>
            <param name="reporting">Is reporting parameter. Is only available to Length and Angle parameters!</param>
            <returns name="Parameter">Parameter</returns>
        </member>
        <member name="M:Orchid.Revit.FamilyDocument.Parameter.AddParameter(Autodesk.Revit.DB.Document,System.Collections.Generic.IList{System.String},Revit.Elements.Category,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Add (create) parameter by name
            </summary>
            <param name="familyDocument">Family document as Revit document (rfa)</param>
            <param name="parameterName">The name of the parameter to create</param>
            <param name="category">Category for Family Type as Parameter Type</param>
            <param name="group">Parameter Group</param>
            <param name="tooltip">Tooltip for the parameter</param>
            <param name="instance">Is instance parameter, otherwise it's a type parameter</param>
            <param name="reporting">Is reporting parameter. Is only available to Length and Angle parameters!</param>
            <returns name="Parameter">Parameter</returns>
        </member>
        <member name="M:Orchid.Revit.FamilyDocument.Parameter.AddSharedParameter(Autodesk.Revit.DB.Document,System.Collections.Generic.IList{System.String},System.String,System.String,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Add (create) shared parameter by name
            </summary>
            <param name="familyDocument">Family document as Revit document (rfa)</param>
            <param name="parameterName">The name of the parameter to add</param>
            <param name="groupName">Group of the parameter for the shared parameter</param>
            <param name="type">Parameter Type</param>
            <param name="group">Parameter Group</param>
            <param name="tooltip">Tooltip for the parameter</param>
            <param name="instance">Is instance parameter, otherwise it's a type parameter</param>
            <param name="reporting">Is reporting parameter. Is only available to Length and Angle parameters!</param>
            <returns name="Parameter">Parameter</returns>
        </member>
        <member name="M:Orchid.Revit.FamilyDocument.Parameter.AddIfcParameters(Autodesk.Revit.DB.Document)">
            <summary>
            Add basic IFC parameters in the family (IfcExportAs, IfcExportType, IfcDescription, IFC CAD Layer)
            </summary>
            <param name="document">Autodesk.Revit.DB.Document</param>
            <returns name="Parameter">Parameter</returns>
        </member>
        <member name="M:Orchid.Revit.FamilyDocument.Parameter.GetValue(Autodesk.Revit.DB.Document,System.Collections.Generic.List{System.Object},System.Collections.Generic.List{System.String})">
            <summary>
            Get family parameter value by parameter name
            Note: If no family type is provided (default as null), then will the
            default family type in the familyDocument be used. Furthermore, 
            If no family types exists, then a default 
            family type will be created named as the familyDocument.
            </summary>
            <param name="familyDocument">Family document as Revit document (rfa)</param>
            <param name="familyType">Family type as string or Revit object</param>
            <param name="parameterName">The name of the parameter to get</param>
            <returns name="valueByType">Value by familyType</returns>
            <returns name="valueByParameter">Value by parameterName</returns>
        </member>
        <member name="M:Orchid.Revit.FamilyDocument.Parameter.SetValue(Autodesk.Revit.DB.Document,System.Collections.Generic.List{System.Object},System.Collections.Generic.List{System.String},System.Collections.IList)">
            <summary>
            Set family parameter value by parameter name.
            Note: If no family type is provided (default as null), then will the
            default family type in the familyDocument be used. Furthermore, 
            If no family types exists, then a default 
            family type will be created named as the familyDocument.
            </summary>
            <param name="familyDocument">Family document as Revit document (rfa)</param>
            <param name="familyType">Family type as string or Revit object</param>
            <param name="parameterName">The name of the parameter to set</param>
            <param name="value">The value to set</param>
            <returns name="Parameter">Parameter as Revit object</returns>
        </member>
        <member name="M:Orchid.Revit.FamilyDocument.Parameter.Rename(Autodesk.Revit.DB.Document,System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String})">
            <summary>
            Rename family parameter by parameter name
            </summary>
            <param name="familyDocument">Family document as Revit document (rfa)</param>
            <param name="sourceName">The name of the source parameter</param>
            <param name="targetName">The name of the target parameter</param>
            <returns name="watch">Add a watch node to verify the output</returns>
        </member>
        <member name="M:Orchid.Revit.FamilyDocument.Parameter.Delete(Autodesk.Revit.DB.Document,System.Collections.Generic.IList{System.String})">
            <summary>
            Delete family parameter by parameter name
            </summary>
            <param name="familyDocument">Family document as Revit document (rfa)</param>
            <param name="parameterName">The name of the parameter to delete</param>
            <returns name="watch">Add a watch node to verify the output</returns>
        </member>
        <member name="M:Orchid.Revit.FamilyDocument.Parameter.Convert(Autodesk.Revit.DB.Document,System.Collections.Generic.IList{System.String},System.Boolean)">
            <summary>
            Convert shared parameter to family parameter
            </summary>
            <param name="familyDocument">Family document as Revit document (rfa)</param>
            <param name="parameterName">The name of the parameter to delete</param>
            <param name="instance">Is instance parameter, otherwise it's a type parameter</param>
            <returns name="Parameter">Parameter</returns>
        </member>
        <member name="M:Orchid.Revit.FamilyDocument.Parameter.IsReporting(Autodesk.Revit.DB.Document,System.Collections.Generic.List{System.String})">
            <summary>
            Verify if parameter is a reporting parameter
            </summary>
            <param name="familyDocument">Family document as Revit document (rfa)</param>
            <param name="parameterName">The name of the parameter to verify</param>
            <returns name="bool">Boolean value</returns>
        </member>
        <member name="M:Orchid.Revit.FamilyDocument.Parameter.Associate(Autodesk.Revit.DB.Document,System.Collections.Generic.List{Revit.Elements.Element},System.Collections.IList,System.Collections.IList)">
            <summary>
            Associate document parameter with nested family parameter
            </summary>
            <param name="familyDocument">Family document as Revit document (rfa)</param>
            <param name="familyType">Nested element (family type) in the familyDocument</param>
            <param name="documentParameter">The name of the familyDocument parameter to be associated</param>
            <param name="familyParameter">The name of the nested element parameter to be associated</param>
            <returns name="Parameter">Parameter</returns>
        </member>
        <member name="M:Orchid.Revit.FamilyDocument.Parameter.HasAssociated(Autodesk.Revit.DB.Document,System.Collections.Generic.List{System.String})">
            <summary>
            Verify if parameter has associated elements
            </summary>
            <param name="familyDocument">Family document as Revit document (rfa)</param>
            <param name="parameterName">The name of the parameter to verify</param>
            <returns name="bool">Boolean value</returns>
        </member>
        <member name="T:Orchid.Revit.Materials.AppearanceAsset">
            <summary>
            Methods for materials
            </summary>
        </member>
        <member name="M:Orchid.Revit.Materials.AppearanceAsset.#ctor">
            default private constructor --> hides the class in dynamo
        </member>
        <member name="M:Orchid.Revit.Materials.AppearanceAsset.All">
            <summary>
            Get all appearance assets.
            </summary>
            <returns name="AppearanceAsset">Appearance asset as object</returns>
        </member>
        <member name="M:Orchid.Revit.Materials.AppearanceAsset.Duplicate(System.Object,System.String)">
            <summary>
            Duplicate appearance asset
            </summary>
            <param name="appearanceAsset">Appearance asset as object</param>
            <param name="name">Name for the duplicated appearance asset</param>
            <returns name="AppearanceAsset">Appearance asset as object</returns>
        </member>
        <member name="M:Orchid.Revit.Materials.AppearanceAsset.Create(System.String,System.Boolean)">
            <summary>
            Create appearance asset.
            </summary>
            <param name="name"></param>
            <param name="uniqueName"></param>
            <returns name="AppearanceAsset">Appearance asset as object</returns>
        </member>
        <member name="M:Orchid.Revit.Materials.AppearanceAsset.SetInformation(System.Object,System.String,System.String)">
            <summary>
            Set information.
            </summary>
            <param name="appearanceAsset">Appearance asset as object</param>
            <param name="description"></param>
            <param name="keywords"></param>
            <returns name="AppearanceAsset">Appearance asset as object</returns>
        </member>
        <member name="M:Orchid.Revit.Materials.AppearanceAsset.SetGeneric(System.Object,System.Collections.IList)">
            <summary>
            Set generic.
            </summary>
            <param name="appearanceAsset">Appearance asset as object</param>
            <param name="color">Color as list of integer or object</param>
            <returns name="AppearanceAsset">Appearance asset as object</returns>
        </member>
        <member name="M:Orchid.Revit.Materials.AppearanceAsset.SetBump(System.Object,System.String)">
            <summary>
            Set bump.
            </summary>
            <param name="appearanceAsset">Appearance asset as object</param>
            <param name="imagePath">path to file</param>
            <returns name="AppearanceAsset">Appearance asset as object</returns>
        </member>
        <member name="M:Orchid.Revit.Materials.AppearanceAsset.GetInformation(System.Object)">
            <summary>
            Get information.
            </summary>
            <param name="appearanceAsset">Appearance asset as object</param>
            <returns name="description"></returns>
            <returns name="keywords"></returns>
        </member>
        <member name="T:Orchid.Revit.Materials.Graphics">
            <summary>
            Methods for materials
            </summary>
        </member>
        <member name="M:Orchid.Revit.Materials.Graphics.#ctor">
            default private constructor --> hides the class in dynamo
        </member>
        <member name="M:Orchid.Revit.Materials.Graphics.SetGraphics(System.Object,System.Boolean,System.Collections.IList,System.Int32,System.Object,System.Collections.IList,System.Object,System.Collections.IList)">
            <summary>
            Set material graphics.
            Valid pattern input is either a Dynamo fill pattern object or as
            a name of a fill pattern in the document.
            Valid color input is either a Dynamo color object or as a 
            list of integers containing "alpha, red, green, blue" value
            or "red, green, blue" value.
            Note, this node can be used up to and including Revit 2018!
            </summary>
            <param name="material">Material as string or object</param>
            <param name="useRenderAppearance">Use render appearance as boolean</param>
            <param name="shadingColor">Color as list of integer or object</param>
            <param name="transparency">Transparency as integer</param>
            <param name="surfacePattern">Pattern as string or object</param>
            <param name="surfacePatternColor">Color as list of integer or object</param>
            <param name="cutPattern">Pattern as string or object</param>
            <param name="cutPatternColor">Color as list of integer or object</param>
            <returns name="Material">Material as object</returns>
        </member>
        <member name="M:Orchid.Revit.Materials.Graphics.SetSurfacePattern(System.Object,System.Object)">
            <summary>
            Set surface pattern.
            Valid pattern input is either a Dynamo fill pattern object or as
            a name of a fill pattern in the document.
            Note, this node can be used up to and including Revit 2018!
            </summary>
            <param name="material">Material as string or object</param>
            <param name="pattern">Pattern as string or object</param>
            <returns name="Material">Material as object</returns>
        </member>
        <member name="M:Orchid.Revit.Materials.Graphics.SetSurfacePatternColor(System.Object,System.Collections.IList)">
            <summary>
            Set surface pattern color.
            Valid color input is either a Dynamo color object or as a 
            list of integers containing "alpha, red, green, blue" value
            or "red, green, blue" value.
            Note, this node can be used up to and including Revit 2018!
            </summary>
            <param name="material">Material as string or object</param>
            <param name="color">Color as list of integer or object</param>
            <returns name="Material">Material as object</returns>
        </member>
        <member name="M:Orchid.Revit.Materials.Graphics.SetCutPattern(System.Object,System.Object)">
            <summary>
            Set cut pattern.
            Valid pattern input is either a Dynamo fill pattern object or as
            a name of a fill pattern in the document.
            Note, this node can be used up to and including Revit 2018!
            </summary>
            <param name="material">Material as string or object</param>
            <param name="pattern">Pattern as string or object</param>
            <returns name="Material">Material as object</returns>
        </member>
        <member name="M:Orchid.Revit.Materials.Graphics.SetCutPatternColor(System.Object,System.Collections.IList)">
            <summary>
            Set cut pattern color.
            Valid color input is either a Dynamo color object or as a 
            list of integers containing "alpha, red, green, blue" value
            or "red, green, blue" value.
            Note, this node can be used up to and including Revit 2018!
            </summary>
            <param name="material">Material as string or object</param>
            <param name="color">Color as list of integer or object</param>
            <returns name="Material">Material as object</returns>
        </member>
        <member name="M:Orchid.Revit.Materials.Graphics.Set(System.Object,System.Boolean,System.Collections.IList,System.Int32,System.Object,System.Collections.IList,System.Object,System.Collections.IList,System.Object,System.Collections.IList,System.Object,System.Collections.IList)">
            <summary>
            Set material graphics.
            Valid pattern input is either a Dynamo fill pattern object or as
            a name of a fill pattern in the document.
            Valid color input is either a Dynamo color object or as a 
            list of integers containing "alpha, red, green, blue" value
            or "red, green, blue" value.
            Note, this node can be used from Revit 2019 and forward!
            </summary>
            <param name="material">Material as string or object</param>
            <param name="useRenderAppearance">Use render appearance as boolean</param>
            <param name="shadingColor">Color as list of integer or object</param>
            <param name="transparency">Transparency as integer</param>
            <param name="surfaceForegroundPattern">Pattern as string or object</param>
            <param name="surfaceForegroundPatternColor">Color as list of integer or object</param>
            <param name="surfaceBackgroundPattern">Pattern as string or object</param>
            <param name="surfaceBackgroundPatternColor">Color as list of integer or object</param>
            <param name="cutForegroundPattern">Pattern as string or object</param>
            <param name="cutForegroundPatternColor">Color as list of integer or object</param>
            <param name="cutBackgroundPattern">Pattern as string or object</param>
            <param name="cutBackgroundPatternColor">Color as list of integer or object</param>
            <returns name="Material">Material as object</returns>
        </member>
        <member name="M:Orchid.Revit.Materials.Graphics.SetSurfaceForegroundPattern(System.Object,System.Object)">
            <summary>
            Set surface foreground pattern.
            Valid pattern input is either a Dynamo fill pattern object or as
            a name of a fill pattern in the document.
            Note, this node can be used from Revit 2019 and forward!
            </summary>
            <param name="material">Material as string or object</param>
            <param name="pattern">Pattern as string or object</param>
            <returns name="Material">Material as object</returns>
        </member>
        <member name="M:Orchid.Revit.Materials.Graphics.SetSurfaceForegroundPatternColor(System.Object,System.Collections.IList)">
            <summary>
            Set surface foreground pattern color.
            Valid color input is either a Dynamo color object or as a 
            list of integers containing "alpha, red, green, blue" value
            or "red, green, blue" value.
            Note, this node can be used from Revit 2019 and forward!
            </summary>
            <param name="material">Material as string or object</param>
            <param name="color">Color as list of integer or object</param>
            <returns name="Material">Material as object</returns>
        </member>
        <member name="M:Orchid.Revit.Materials.Graphics.SetSurfaceBackgroundPattern(System.Object,System.Object)">
            <summary>
            Set surface background pattern.
            Valid pattern input is either a Dynamo fill pattern object or as
            a name of a fill pattern in the document.
            Note, this node can be used from Revit 2019 and forward!
            </summary>
            <param name="material">Material as string or object</param>
            <param name="pattern">Pattern as string or object</param>
            <returns name="Material">Material as object</returns>
        </member>
        <member name="M:Orchid.Revit.Materials.Graphics.SetSurfaceBackgroundPatternColor(System.Object,System.Collections.IList)">
            <summary>
            Set surface background pattern color.
            Valid color input is either a Dynamo color object or as a 
            list of integers containing "alpha, red, green, blue" value
            or "red, green, blue" value.
            Note, this node can be used from Revit 2019 and forward!
            </summary>
            <param name="material">Material as string or object</param>
            <param name="color">Color as list of integer or object</param>
            <returns name="Material">Material as object</returns>
        </member>
        <member name="M:Orchid.Revit.Materials.Graphics.SetCutForegroundPattern(System.Object,System.Object)">
            <summary>
            Set cut foreground pattern.
            Valid pattern input is either a Dynamo fill pattern object or as
            a name of a fill pattern in the document.
            Note, this node can be used from Revit 2019 and forward!
            </summary>
            <param name="material">Material as string or object</param>
            <param name="pattern">Pattern as string or object</param>
            <returns name="Material">Material as object</returns>
        </member>
        <member name="M:Orchid.Revit.Materials.Graphics.SetCutForegroundPatternColor(System.Object,System.Collections.IList)">
            <summary>
            Set cut foreground pattern color.
            Valid color input is either a Dynamo color object or as a 
            list of integers containing "alpha, red, green, blue" value
            or "red, green, blue" value.
            Note, this node can be used from Revit 2019 and forward!
            </summary>
            <param name="material">Material as string or object</param>
            <param name="color">Color as list of integer or object</param>
            <returns name="Material">Material as object</returns>
        </member>
        <member name="M:Orchid.Revit.Materials.Graphics.SetCutBackgroundPattern(System.Object,System.Object)">
            <summary>
            Set cut background pattern.
            Valid pattern input is either a Dynamo fill pattern object or as
            a name of a fill pattern in the document.
            Note, this node can be used from Revit 2019 and forward!
            </summary>
            <param name="material">Material as string or object</param>
            <param name="pattern">Pattern as string or object</param>
            <returns name="Material">Material as object</returns>
        </member>
        <member name="M:Orchid.Revit.Materials.Graphics.SetCutBackgroundPatternColor(System.Object,System.Collections.IList)">
            <summary>
            Set cut background pattern color.
            Valid color input is either a Dynamo color object or as a 
            list of integers containing "alpha, red, green, blue" value
            or "red, green, blue" value.
            Note, this node can be used from Revit 2019 and forward!
            </summary>
            <param name="material">Material as string or object</param>
            <param name="color">Color as list of integer or object</param>
            <returns name="Material">Material as object</returns>
        </member>
        <member name="M:Orchid.Revit.Materials.Graphics.SetRenderAppearance(System.Object,System.Boolean)">
            <summary>
            Set render appearance.
            </summary>
            <param name="material">Material as string or object</param>
            <param name="useRenderAppearance">Use render appearance as boolean</param>
            <returns name="Material">Material as object</returns>
        </member>
        <member name="M:Orchid.Revit.Materials.Graphics.SetShadingColor(System.Object,System.Collections.IList)">
            <summary>
            Set shading color.
            Valid color input is either a Dynamo color object or as a 
            list of integers containing "alpha, red, green, blue" value
            or "red, green, blue" value.
            </summary>
            <param name="material">Material as string or object</param>
            <param name="color">Color as list of integer or object</param>
            <returns name="Material">Material as object</returns>
        </member>
        <member name="M:Orchid.Revit.Materials.Graphics.SetTransparency(System.Object,System.Int32)">
            <summary>
            Set transparency.
            </summary>
            <param name="material">Material as string or object</param>
            <param name="transparency">Transparency as integer</param>
            <returns name="Material">Material as object</returns>
        </member>
        <member name="M:Orchid.Revit.Materials.Graphics.SetSmoothness(System.Object,System.Int32)">
            <summary>
            Get smoothness.
            </summary>
            <param name="material">Material as string or object</param>
            <param name="smoothness">Smoothness as integer</param>
            <returns name="Material">Material as object</returns>
        </member>
        <member name="M:Orchid.Revit.Materials.Graphics.SetShininess(System.Object,System.Int32)">
            <summary>
            Get shininess.
            </summary>
            <param name="material">Material as string or object</param>
            <param name="shininess">Shininess as integer</param>
            <returns name="Material">Material as object</returns>
        </member>
        <member name="M:Orchid.Revit.Materials.Graphics.GetGraphics(System.Object)">
            <summary>
            Get material graphics.
            Note, this node can be used up to and including Revit 2018!
            </summary>
            <param name="material">Material as string or object</param>
            <returns name="UseRenderAppearance">Use render appearance as boolean</returns>
            <returns name="ShadingColor">Color as object</returns>
            <returns name="Transparency">Transparency as integer</returns>
            <returns name="SurfacePattern">Pattern as object</returns>
            <returns name="SurfacePatternColor">Color as object</returns>
            <returns name="CutPattern">Pattern as object</returns>
            <returns name="CutPatternColor">Color as object</returns>
        </member>
        <member name="M:Orchid.Revit.Materials.Graphics.GetSurfacePattern(System.Object)">
            <summary>
            Get surface pattern.
            Note, this node can be used up to and including Revit 2018!
            </summary>
            <param name="material">Material as string or object</param>
            <returns name="Pattern">Pattern as object</returns>
        </member>
        <member name="M:Orchid.Revit.Materials.Graphics.GetSurfacePatternColor(System.Object)">
            <summary>
            Get surface pattern color.
            Note, this node can be used up to and including Revit 2018!
            </summary>
            <param name="material">Material as string or object</param>
            <returns name="Color">Color as object</returns>
        </member>
        <member name="M:Orchid.Revit.Materials.Graphics.GetCutPattern(System.Object)">
            <summary>
            Get cut pattern.
            Note, this node can be used up to and including Revit 2018!
            </summary>
            <param name="material">Material as string or object</param>
            <returns name="Pattern">Pattern as object</returns>
        </member>
        <member name="M:Orchid.Revit.Materials.Graphics.GetCutPatternColor(System.Object)">
            <summary>
            Get cut pattern color.
            Note, this node can be used up to and including Revit 2018!
            </summary>
            <param name="material">Material as string or object</param>
            <returns name="Color">Color as object</returns>
        </member>
        <member name="M:Orchid.Revit.Materials.Graphics.Get(System.Object)">
            <summary>
            Get material graphics.
            Note, this node can be used from Revit 2019 and forward!
            </summary>
            <param name="material">Material as string or object</param>
            <returns name="UseRenderAppearance">Use render appearance as boolean</returns>
            <returns name="ShadingColor">Color as object</returns>
            <returns name="Transparency">Transparency as integer</returns>
            <returns name="surfaceForegroundPattern">Pattern as object</returns>
            <returns name="surfaceForegroundPatternColor">Color as object</returns>
            <returns name="surfaceBackgroundPattern">Pattern as object</returns>
            <returns name="surfaceBackgroundPatternColor">Color as object</returns>
            <returns name="cutForegroundPattern">Pattern as object</returns>
            <returns name="cutForegroundPatternColor">Color as object</returns>
            <returns name="cutBackgroundPattern">Pattern as object</returns>
            <returns name="cutBackgroundPatternColor">Color as object</returns>
        </member>
        <member name="M:Orchid.Revit.Materials.Graphics.GetSurfaceForegroundPattern(System.Object)">
            <summary>
            Get surface foreground pattern.
            Note, this node can be used from Revit 2019 and forward!
            </summary>
            <param name="material">Material as string or object</param>
            <returns name="Pattern">Pattern as object</returns>
        </member>
        <member name="M:Orchid.Revit.Materials.Graphics.GetSurfaceForegroundPatternColor(System.Object)">
            <summary>
            Get surface foreground pattern color.
            Note, this node can be used from Revit 2019 and forward!
            </summary>
            <param name="material">Material as string or object</param>
            <returns name="Color">Color as object</returns>
        </member>
        <member name="M:Orchid.Revit.Materials.Graphics.GetSurfaceBackgroundPattern(System.Object)">
            <summary>
            Get surface background pattern.
            Note, this node can be used from Revit 2019 and forward!
            </summary>
            <param name="material">Material as string or object</param>
            <returns name="Pattern">Pattern as object</returns>
        </member>
        <member name="M:Orchid.Revit.Materials.Graphics.GetSurfaceBackgroundPatternColor(System.Object)">
            <summary>
            Get surface background pattern color.
            Note, this node can be used from Revit 2019 and forward!
            </summary>
            <param name="material">Material as string or object</param>
            <returns name="Color">Color as object</returns>
        </member>
        <member name="M:Orchid.Revit.Materials.Graphics.GetCutForegroundPattern(System.Object)">
            <summary>
            Get cut foreground pattern.
            Note, this node can be used from Revit 2019 and forward!
            </summary>
            <param name="material">Material as string or object</param>
            <returns name="Pattern">Pattern as object</returns>
        </member>
        <member name="M:Orchid.Revit.Materials.Graphics.GetCutForegroundPatternColor(System.Object)">
            <summary>
            Get cut foreground pattern color.
            Note, this node can be used from Revit 2019 and forward!
            </summary>
            <param name="material">Material as string or object</param>
            <returns name="Color">Color as object</returns>
        </member>
        <member name="M:Orchid.Revit.Materials.Graphics.GetCutBackgroundPattern(System.Object)">
            <summary>
            Get cut background pattern.
            Note, this node can be used from Revit 2019 and forward!
            </summary>
            <param name="material">Material as string or object</param>
            <returns name="Pattern">Pattern as object</returns>
        </member>
        <member name="M:Orchid.Revit.Materials.Graphics.GetCutBackgroundPatternColor(System.Object)">
            <summary>
            Get cut background pattern color.
            Note, this node can be used from Revit 2019 and forward!
            </summary>
            <param name="material">Material as string or object</param>
            <returns name="Color">Color as object</returns>
        </member>
        <member name="M:Orchid.Revit.Materials.Graphics.GetRenderAppearance(System.Object)">
            <summary>
            Get render appearance.
            </summary>
            <param name="material">Material as string or object</param>
            <returns name="bool">Use render appearance as boolean</returns>
        </member>
        <member name="M:Orchid.Revit.Materials.Graphics.GetShadingColor(System.Object)">
            <summary>
            Get shading color.
            </summary>
            <param name="material">Material as string or object</param>
            <returns name="Color">Color as object</returns>
        </member>
        <member name="M:Orchid.Revit.Materials.Graphics.GetTransparency(System.Object)">
            <summary>
            Get transparency.
            </summary>
            <param name="material">Material as string or object</param>
            <returns name="int">Transparency as integer</returns>
        </member>
        <member name="M:Orchid.Revit.Materials.Graphics.GetSmoothness(System.Object)">
            <summary>
            Get smoothness.
            </summary>
            <param name="material">Material as string or object</param>
            <returns name="int">Smoothness as integer</returns>
        </member>
        <member name="M:Orchid.Revit.Materials.Graphics.GetShininess(System.Object)">
            <summary>
            Get shininess.
            </summary>
            <param name="material">Material as string or object</param>
            <returns name="int">Shininess as integer</returns>
        </member>
        <member name="T:Orchid.Revit.Materials.Material">
            <summary>
            Methods for materials
            </summary>
        </member>
        <member name="M:Orchid.Revit.Materials.Material.#ctor">
            default private constructor --> hides the class in dynamo
        </member>
        <member name="M:Orchid.Revit.Materials.Material.Create(System.String)">
            <summary>
            Create material.
            </summary>
            <param name="name">The material name</param>
            <returns name="Material">Material as object</returns>
        </member>
        <member name="M:Orchid.Revit.Materials.Material.Duplicate(System.Object,System.String)">
            <summary>
            Duplicate material
            </summary>
            <param name="material">Material as string or object</param>
            <param name="name">The material name to duplicate</param>
            <returns name="Material">Material as object</returns>
        </member>
        <member name="M:Orchid.Revit.Materials.Material.SetAsset(System.Object,System.String,System.Object)">
            <summary>
            Set asset property.
            </summary>
            <param name="material">Material as string or object</param>
            <param name="aspect">Material aspect as string or object</param>
            <param name="propertySet">Asset property set as string or object</param>
            <returns name="Material">Material as object</returns>
        </member>
        <member name="M:Orchid.Revit.Materials.Material.SetAsset(System.Object,System.Object)">
            <summary>
            Set asset property.
            </summary>
            <param name="material">Material as string or object</param>
            <param name="appearanceAsset">Appearance asset as object</param>
            <returns name="Material">Material as object</returns>
        </member>
        <member name="M:Orchid.Revit.Materials.Material.SetCategory(System.Object,System.String)">
            <summary>
            Set material category.
            </summary>
            <param name="material">Material as string or object</param>
            <param name="name">The material category name to set</param>
            <returns name="Material">Material as object</returns>
        </member>
        <member name="M:Orchid.Revit.Materials.Material.SetClass(System.Object,System.String)">
            <summary>
            Set material class.
            </summary>
            <param name="material">Material as string or object</param>
            <param name="name">The material class name to set</param>
            <returns name="Material">Material as object</returns>
        </member>
        <member name="M:Orchid.Revit.Materials.Material.GetCategory(System.Object)">
            <summary>
            Get material category.
            </summary>
            <param name="material">Material as string or object</param>
            <returns name="string">The material category name</returns>
        </member>
        <member name="M:Orchid.Revit.Materials.Material.GetClass(System.Object)">
            <summary>
            Get material class.
            </summary>
            <param name="material">Material as string or object</param>
            <returns name="string">The material class name</returns>
        </member>
        <member name="M:Orchid.Revit.Materials.Material.All">
            <summary>
            Get all materials in document.
            </summary>
            <returns name="Material">Material as object</returns>
        </member>
        <member name="M:Orchid.Revit.Materials.Material.All(Autodesk.Revit.DB.Document)">
            <summary>
            Get all materials in document.
            </summary>
            <param name="document">Autodesk.Revit.DB.Document</param>
            <returns name="Material">Material as object</returns>
        </member>
        <member name="M:Orchid.Revit.Materials.Material.Asset(System.Object)">
            <summary>
            Get material assets.
            </summary>
            <param name="material">Material as string or object</param>
            <returns name="Appearance">Appearance asset as object</returns>
            <returns name="Physical">Physical asset as object</returns>
            <returns name="Thermal">Thermal asset as object</returns>
        </member>
        <member name="M:Orchid.Revit.Materials.Material.AssetParameter(System.Object)">
            <summary>
            Get material asset parameters.
            </summary>
            <param name="material">Material as string or object</param>
            <returns name="Appearance">Appearance asset parameter as object</returns>
            <returns name="Physical">Physical asset parameter as object</returns>
            <returns name="Thermal">Thermal asset parameter as object</returns>
        </member>
        <member name="M:Orchid.Revit.Materials.Material.Parameter(System.Object)">
            <summary>
            Get material parameters.
            </summary>
            <param name="material">Material as string or object</param>
            <returns name="Parameter">Parameter as object</returns>
        </member>
        <member name="M:Orchid.Revit.Materials.Material.Density(System.Object)">
            <summary>
            Get material asset as physical and thermal density in SI unit (kg/m3)
            </summary>
            <param name="material">List of material</param>
            <returns name="Physical">List of physical density</returns>
            <returns name="Thermal">List of thermal density</returns>
        </member>
        <member name="T:Orchid.Revit.Materials.PhysicalAsset">
            Methods for structural assets
        </member>
        <member name="M:Orchid.Revit.Materials.PhysicalAsset.#ctor">
            default private constructor --> hides the class in dynamo
        </member>
        <member name="M:Orchid.Revit.Materials.PhysicalAsset.Create(System.String,System.String,System.Boolean)">
            <summary>
            Create physical asset and property set.
            </summary>
            <param name="name"></param>
            <param name="type"></param>
            <param name="uniqueName"></param>
            <returns name="PropertySet">Thermal property set as object</returns>
        </member>
        <member name="M:Orchid.Revit.Materials.PhysicalAsset.SetInformation(System.Object,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Set information.
            </summary>
            <param name="propertySet">Physical property set as object</param>
            <param name="description"></param>
            <param name="keywords"></param>
            <param name="subclass"></param>
            <param name="source"></param>
            <param name="sourceUrl"></param>
            <returns name="PropertySet">Physical property set as object</returns>
        </member>
        <member name="M:Orchid.Revit.Materials.PhysicalAsset.SetBehavior(System.Object,System.String)">
            <summary>
            Set behavior.
            </summary>
            <param name="propertySet">Physical property set as object</param>
            <param name="behavior"></param>
            <returns name="PropertySet">Physical property set as object</returns>
        </member>
        <member name="M:Orchid.Revit.Materials.PhysicalAsset.SetBasicThermal(System.Object,System.Double)">
            <summary>
            Set basic thermal.
            </summary>
            <param name="propertySet">Physical property set as object</param>
            <param name="expansionCoefficient"></param>
            <returns name="PropertySet">Physical property set as object</returns>
        </member>
        <member name="M:Orchid.Revit.Materials.PhysicalAsset.SetBasicThermal(System.Object,System.Collections.IList)">
            <summary>
            Set basic thermal.
            </summary>
            <param name="propertySet">Physical property set as object</param>
            <param name="expansionCoefficient"></param>
            <returns name="PropertySet">Physical property set as object</returns>
        </member>
        <member name="M:Orchid.Revit.Materials.PhysicalAsset.SetMechanical(System.Object,System.Double)">
            <summary>
            Set mechanical.
            </summary>
            <param name="propertySet">Physical property set as object</param>
            <param name="density"></param>
            <returns name="PropertySet">Physical property set as object</returns>
        </member>
        <member name="M:Orchid.Revit.Materials.PhysicalAsset.SetMechanical(System.Object,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Set mechanical.
            </summary>
            <param name="propertySet">Physical property set as object</param>
            <param name="youngModulus"></param>
            <param name="poissonRatio"></param>
            <param name="shearModulus"></param>
            <param name="density"></param>
            <returns name="PropertySet">Physical property set as object</returns>
        </member>
        <member name="M:Orchid.Revit.Materials.PhysicalAsset.SetMechanical(System.Object,System.Collections.IList,System.Collections.IList,System.Collections.IList,System.Double)">
            <summary>
            Set mechanical.
            </summary>
            <param name="propertySet">Physical property set as object</param>
            <param name="youngModulus"></param>
            <param name="poissonRatio"></param>
            <param name="shearModulus"></param>
            <param name="density"></param>
            <returns name="PropertySet">Physical property set as object</returns>
        </member>
        <member name="M:Orchid.Revit.Materials.PhysicalAsset.SetStrength(System.Object,System.Double,System.Double,System.Boolean)">
            <summary>
            Set strength.
            </summary>
            <param name="propertySet">Physical property set as object</param>
            <param name="yieldStress"></param>
            <param name="tensileStrength"></param>
            <param name="thermalTreated"></param>
            <returns name="PropertySet">Physical property set as object</returns>
        </member>
        <member name="M:Orchid.Revit.Materials.PhysicalAsset.SetStrength(System.Object,System.String,System.String,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Int32)">
            <summary>
            Set strength.
            </summary>
            <param name="propertySet">Physical property set as object</param>
            <param name="species"></param>
            <param name="grade"></param>
            <param name="bending"></param>
            <param name="parallelCompression"></param>
            <param name="perpendicularCompression"></param>
            <param name="parallelShear"></param>
            <param name="tensionParallel"></param>
            <param name="tensionPerpendicular"></param>
            <param name="averageModulus"></param>
            <param name="construction"></param>
            <returns name="PropertySet">Physical property set as object</returns>
        </member>
        <member name="M:Orchid.Revit.Materials.PhysicalAsset.SetConcrete(System.Object,System.Double,System.Double,System.Boolean)">
            <summary>
            Set concrete.
            </summary>
            <param name="propertySet">Physical property set as object</param>
            <param name="compression"></param>
            <param name="shearStrengthReduction"></param>
            <param name="lightweight"></param>
            <returns name="PropertySet">Physical property set as object</returns>
        </member>
        <member name="T:Orchid.Revit.Materials.ThermalAsset">
            Methods for thermal assets
        </member>
        <member name="M:Orchid.Revit.Materials.ThermalAsset.#ctor">
            default private constructor --> hides the class in dynamo
        </member>
        <member name="M:Orchid.Revit.Materials.ThermalAsset.Create(System.String,System.String,System.Boolean)">
            <summary>
            Create thermal asset and property set.
            </summary>
            <param name="name"></param>
            <param name="type"></param>
            <param name="uniqueName"></param>
            <returns name="PropertySet">Thermal property set as object</returns>
        </member>
        <member name="M:Orchid.Revit.Materials.ThermalAsset.SetInformation(System.Object,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Set information.
            </summary>
            <param name="propertySet">Thermal property set as object</param>
            <param name="description"></param>
            <param name="keywords"></param>
            <param name="subclass"></param>
            <param name="source"></param>
            <param name="sourceUrl"></param>
            <returns name="PropertySet">Thermal property set as object</returns>
        </member>
        <member name="M:Orchid.Revit.Materials.ThermalAsset.SetProperties(System.Object,System.Boolean,System.String,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Set properties. Note can only be used for the thermal type Solid!
            </summary>
            <param name="propertySet">Thermal property set as object</param>
            <param name="transmitsLight"></param>
            <param name="behavior"></param>
            <param name="thermalConductivity"></param>
            <param name="specificHeat"></param>
            <param name="density"></param>
            <param name="emissivity"></param>
            <param name="permeability"></param>
            <param name="porosity"></param>
            <param name="reflectivity"></param>
            <param name="electricalResistivity"></param>
            <returns name="PropertySet">Thermal property set as object</returns>
        </member>
        <member name="M:Orchid.Revit.Materials.ThermalAsset.SetBasicThermal(System.Object,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Set basic thermal. Note can only be used for the thermal type Gas or Liquid!
            </summary>
            <param name="propertySet">Thermal property set as object</param>
            <param name="thermalConductivity"></param>
            <param name="specificHeat"></param>
            <param name="density"></param>
            <param name="emissivity"></param>
            <param name="gasViscosity"></param>
            <param name="compressibility"></param>
            <returns name="PropertySet">Thermal property set as object</returns>
        </member>
    </members>
</doc>
