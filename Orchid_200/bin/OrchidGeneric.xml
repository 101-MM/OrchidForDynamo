<?xml version="1.0"?>
<doc>
    <assembly>
        <name>OrchidGeneric</name>
    </assembly>
    <members>
        <member name="T:Orchid.Generic.Applications.FEMdesign">
            <summary>
            FEMdesign methods
            </summary>
        </member>
        <member name="M:Orchid.Generic.Applications.FEMdesign.#ctor">
            default private constructor --> hides the class in dynamo
        </member>
        <member name="M:Orchid.Generic.Applications.FEMdesign.SetLinearRelease(System.String,System.Collections.IList,System.Collections.IList,System.Collections.IList,System.Collections.IList)">
            <summary>
            Set linear release in FEM-design xml-file
            </summary>
            <param name="file">Path and Filename to the FEM-design xml file including extension!</param>
            <param name="element">Element(s)</param>
            <param name="release">Release --> List order: Top, Bottom, Right and Left</param>
            <param name="XYaxis">Element XY-axis value (in meter) --> List order: XY StartPoint, XY EndPoint, StruXML Guid</param>
            <param name="Zaxis">Element Z-axis value (in meter) --> List order: Z MinPoint, Z MaxPoint, StruXML Guid</param>
            <returns name="release">FEM release</returns>
        </member>
        <member name="M:Orchid.Generic.Applications.FEMdesign.SetStiffnessValue(System.String,System.Collections.IList,System.Collections.IList)">
            <summary>
            Set stiffness value globally in FEM-design
            </summary>
            <param name="file">Path and Filename to the FEM-design xml file including extension!</param>
            <param name="stiffness">Stiffness to set</param>
            <param name="value">Value to set</param>
            <returns name="file">Path and Filename to the FEM-design xml file including extension!</returns>
        </member>
        <member name="M:Orchid.Generic.Applications.FEMdesign.GetElementID(System.String,System.Collections.IList)">
            <summary>
            Get element id from FEM-design
            </summary>
            <param name="file">Path and Filename to the FEM-design xml file including extension!</param>
            <param name="element">Element(s)</param>
            <returns name="FEMid">FEM element id</returns>
        </member>
        <member name="M:Orchid.Generic.Applications.FEMdesign.GetReinforcement(System.String,System.Collections.IList)">
            <summary>
            Get reinforcement from FEM-design
            </summary>
            <param name="file">Path and Filename to the FEM-design xml file including extension!</param>
            <param name="element">Element(s)</param>
            <returns name="Element">Element(s)</returns>
            <returns name="wire">Reinforcement wire</returns>
            <returns name="mesh">Reinforcement mesh size</returns>
            <returns name="location">Reinforcement location</returns>
        </member>
        <member name="T:Orchid.Generic.Applications.Sigma">
            <summary>
            Sigma methods
            </summary>
        </member>
        <member name="M:Orchid.Generic.Applications.Sigma.#ctor">
            default private constructor --> hides the class in dynamo
        </member>
        <member name="M:Orchid.Generic.Applications.Sigma.Document(System.String)">
            <summary>
            Open Sigma Estimate project file or create a new empty Sigma document 
            </summary>
            <param name="file">Path and Filename for Sigma Estimate document (file) including extension!, default will create a new empty Sigma document</param>
            <returns name="document">Sigma Estimate document</returns>
        </member>
        <member name="M:Orchid.Generic.Applications.Sigma.SetData(System.Object,System.Collections.IList,System.Boolean,System.Collections.IList)">
            <summary>
            Set Revit data in Sigma Estimate project
            </summary>
            <param name="document">Sigma Estimate document, default is the active Sigma project</param>
            <param name="branchRoot">Branch root where data should be written (or None)</param>
            <param name="clearing">Cleaning sub component(s)</param>
            <param name="component">Data from (Sigma) Component node</param>
            <returns name="watch">Add a watch node to verify the data processing</returns>
        </member>
        <member name="M:Orchid.Generic.Applications.Sigma.Clearing(System.Object,System.Collections.IList)">
            <summary>
            Clear a branch in Sigma Estimate for sub component
            </summary>
            <param name="document">Sigma Estimate document, default is the active Sigma project</param>
            <param name="branch">Branch where sub component is going to be cleaned</param>
            <returns name="watch">Add a watch node to verify the data processing</returns>
        </member>
        <member name="M:Orchid.Generic.Applications.Sigma.Delete(System.Object,System.Collections.IList)">
            <summary>
            Delete a branch in Sigma Estimate
            </summary>
            <param name="document">Sigma Estimate document, default is the active Sigma project</param>
            <param name="branch">Branch to be deleted</param>
            <returns name="watch">Add a watch node to verify the data processing</returns>
        </member>
        <member name="T:Orchid.Generic.Core.Clipboard">
            <summary>
            Clipboard methods for core processes.
            </summary>
        </member>
        <member name="M:Orchid.Generic.Core.Clipboard.#ctor">
            default private constructor --> hides the class in dynamo
        </member>
        <member name="M:Orchid.Generic.Core.Clipboard.CopyTo(System.Collections.IList)">
            <summary>
            Copy object to Clipboard. Can copy elements from a 1D list, but not from 2D..nD!
            If List Level is used, then will the last item be available in the clipboard.
            </summary>
            <param name="element">element</param>
            <returns name="watch">Add a watch node to verify the data processing</returns>
        </member>
        <member name="T:Orchid.Generic.Core.File">
            <summary>
            File methods for core processes
            </summary>
        </member>
        <member name="M:Orchid.Generic.Core.File.#ctor">
            default private constructor --> hides the class in dynamo
        </member>
        <member name="M:Orchid.Generic.Core.File.FromPath(System.String)">
            <summary>
            Get file from a path
            </summary>
            <param name="path">Path to the file</param>
            <returns name="file">File object</returns>
        </member>
        <member name="M:Orchid.Generic.Core.File.Rename(System.String,System.String,System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{System.String})">
            <summary>
            Rename file
            </summary>
            <param name="directory">The directory path as string</param>
            <param name="extension">The file extension</param>
            <param name="sourceName">The name of the source file</param>
            <param name="targetName">The name of the target file</param>
            <returns name="file">File</returns>
        </member>
        <member name="T:Orchid.Generic.Core.List">
            <summary>
            List methods for core processes
            </summary>
        </member>
        <member name="M:Orchid.Generic.Core.List.#ctor">
            default private constructor --> hides the class in dynamo
        </member>
        <member name="M:Orchid.Generic.Core.List.Clean(System.Collections.IList,System.Collections.IList)">
            <summary>
            Clean nD list
            </summary>
            <param name="list">List</param>
            <param name="searchFor">Item(s) to search for</param>
            <returns name="list">List</returns>
        </member>
        <member name="M:Orchid.Generic.Core.List.Replace(System.Collections.IList,System.Collections.IList,System.Object)">
            <summary>
            Replace item in nD list
            </summary>
            <param name="list">List</param>
            <param name="searchFor">Item(s) to search for</param>
            <param name="replaceWith">Replacement value</param>
            <returns name="list">List</returns>
        </member>
        <member name="M:Orchid.Generic.Core.List.Sort(System.Collections.IList,System.Boolean)">
            <summary>
            Sort elements using the PC 'locale'. Sort elements recursively
            preserving elements types and elements structure.
            </summary>
            <param name="list">List of values</param>
            <param name="descending">Return the list in descending order?</param>
            <returns name="list">List</returns>
        </member>
        <member name="M:Orchid.Generic.Core.List.SortNatural(System.Collections.IList,System.Boolean)">
            <summary>
            Sort elements using the PC 'locale'. Sort elements recursively
            preserving elements types and elements structure.Sort elements in natural
            sort order by splitting digits from string and add leading zeros.
            http://en.wikipedia.org/wiki/Natural_sort_order
            </summary>
            <param name="list">list of values</param>
            <param name="descending">Return the list in descending order?</param>
            <returns name="list">List</returns>
        </member>
        <member name="M:Orchid.Generic.Core.List.SortGroupByKey(System.Collections.IList,System.Collections.IList,System.Collections.IList)">
            <summary>
            Sort and group items into sub-lists based on their like key values
            </summary>
            <param name="list">List of items to group as sublists</param>
            <param name="keys">Key values, one per item in the input list, used for grouping the items</param>
            <param name="sortedKeys">Sorted unique keys, used for grouping the items by their key</param>
            <returns name="groups">list of sublists, with items grouped by like key values</returns>
            <returns name="unique keys">key value corresponding to each group</returns>
            <search>list;sort;group;sortbykey;groupbykey;</search>
        </member>
        <member name="M:Orchid.Generic.Core.List.IndexOf(System.Collections.IList,System.Object)">
            <summary>
            Returns the index (the full path) of the member in nD list
            </summary>
            <param name="list">list of values</param>
            <param name="element">Element</param>
            <returns name="int">List of indicies</returns>
        </member>
        <member name="M:Orchid.Generic.Core.List.GetItemAtIndex(System.Collections.IList,System.Collections.IList)">
            <summary>
            Get an item from the given list that's located at the specified index (the full path) in nD list
            </summary>
            <param name="list">list to fetch an item from</param>
            <param name="index">index of the item to be fetched</param>
            <returns name="item">item in the list at the given index</returns>
        </member>
        <member name="M:Orchid.Generic.Core.List.ReplaceItemAtIndex(System.Collections.IList,System.Collections.IList,System.Object)">
            <summary>
            Replace an item from the given list that's located at the specified index (the full path) in nD list
            </summary>
            <param name="list">list to replace an item in</param>
            <param name="index">index of the item to be replaced</param>
            <param name="item">the item to insert</param>
            <returns name="list">List</returns>
        </member>
        <member name="M:Orchid.Generic.Core.List.FilterByKey(System.Collections.IList,System.Collections.IList,System.Collections.IList,System.Collections.IList)">
            <summary>
            Filter two list items based on common key values
            </summary>
            <param name="list1">Items from list 1</param>
            <param name="key1">Keys from list 1</param>
            <param name="list2">Items from list 2</param>
            <param name="key2">Keys from list 2</param>
            <returns name="listA">ListA</returns>
            <returns name="listB">ListB</returns>
            <returns name="key">Key</returns>
        </member>
        <member name="M:Orchid.Generic.Core.List.SummationByKey(System.Collections.IList,System.Collections.IList)">
            <summary>
            Summarize items and group by key values
            </summary>
            <param name="list">List of items as int and double to group and summarize as sublists</param>
            <param name="keys">Key values, one per item in the input list, used for grouping the items</param>
            <returns name="summarized groups">list of sublist, with items grouped and summarized by like key values</returns>
            <returns name="unique keys">key value corresponding to each group</returns>
            <search>list;group;summarize;summationbykey;</search>
        </member>
        <member name="M:Orchid.Generic.Core.List.GroupByEqual(System.Collections.IList)">
            <summary>
            Group items into sub-lists based on being equal
            </summary>
            <param name="list">List of items to group as sublists</param>
            <returns name="groups">list of sublist, with items grouped by like key values</returns>
            <returns name="unique keys">key value corresponding to each group</returns>
            <search>list;group;equal;groupbyequal;</search>
        </member>
        <member name="T:Orchid.Generic.Core.Data">
            <summary>
            Logic methods for core processes
            </summary>
        </member>
        <member name="M:Orchid.Generic.Core.Data.#ctor">
            default private constructor --> hides the class in dynamo
        </member>
        <member name="M:Orchid.Generic.Core.Data.Await(System.Object,System.Collections.IList)">
            <summary>
            Await a data stream before passing another data stream
            </summary>
            <param name="pass">Data to pass</param>
            <param name="waitFor">Data object to wait for</param>
            <returns name="pass">Passed data</returns>
        </member>
        <member name="M:Orchid.Generic.Core.Data.Circut(System.Object,System.Boolean)">
            <summary>
            Set a state (true/false) to pass a data stream in a circut
            </summary>
            <param name="pass">Data to pass</param>
            <param name="state">Set a bool value for the state</param>
            <returns name="pass">Passed data</returns>
        </member>
        <member name="T:Orchid.Generic.Core.Object">
            <summary>
            Objects methods for core processes
            </summary>
        </member>
        <member name="M:Orchid.Generic.Core.Object.#ctor">
            default private constructor --> hides the class in dynamo
        </member>
        <member name="M:Orchid.Generic.Core.Object.Hashing(System.Object)">
            <summary>
            Input is transferred to output along with its hassing value
            </summary>
            <param name="element">element</param>
            <returns name="Element">Element</returns>
            <returns name="hashing">Hashing value</returns>
        </member>
        <member name="T:Orchid.Generic.Core.Scripting">
            <summary>
            Scripting methods for core processes
            </summary>
        </member>
        <member name="M:Orchid.Generic.Core.Scripting.#ctor">
            default private constructor --> hides the class in dynamo
        </member>
        <member name="M:Orchid.Generic.Core.Scripting.DynamoPackagesPath">
            <summary>
            Get the path to the Dynamo package root folder.
            </summary>
            <returns name="string">Path</returns>
        </member>
        <member name="M:Orchid.Generic.Core.Scripting.DynamoDefinitionsPath">
            <summary>
            Get the path to the Dynamo definition root folder.
            </summary>
            <returns name="string">Path</returns>
        </member>
        <member name="M:Orchid.Generic.Core.Scripting.ScriptFileReader(System.String,System.String,System.Boolean)">
            <summary>
            Read 'script' file content, with refreshing option.
            </summary>
            <param name="path">Path to file. Note: do not send a list of files as input!</param>
            <param name="file">Filename including file extension</param>
            <param name="refresh">Toggle true/false for refreshing</param>
            <returns name="script">Script</returns>
        </member>
        <member name="T:Orchid.Generic.Core.Directory">
            <summary>
            Directory methods for core processes
            </summary>
        </member>
        <member name="M:Orchid.Generic.Core.Directory.#ctor">
            default private constructor --> hides the class in dynamo
        </member>
        <member name="P:Orchid.Generic.Core.Directory.Current">
            <summary>
            Get current directory
            </summary>
            <returns name="directory">Directory</returns>
        </member>
        <member name="M:Orchid.Generic.Core.Directory.FromPath(System.String)">
            <summary>
            Creates a directory object from a path
            </summary>
            <param name="path">Path to the directory</param>
            <returns name="directory">Directory object</returns>
        </member>
        <member name="M:Orchid.Generic.Core.Directory.Contents(System.String,System.String,System.Boolean)">
            <summary>
            Get the files in a directory and its subdirectories.
            Use string for extension type, default is * for all files!
            If files are are readonly but not hidden, are they included.
            If files are both hidden or readonly files
            (and thereby system files) are they left out.
            </summary>
            <param name="directory">Directory to get contents from</param>
            <param name="searchString">Search string used to filter results</param>
            <param name="deepSearch">Search option used to search in all subfolders</param>
            <returns name="file">File</returns>
        </member>
        <member name="T:Orchid.Generic.About">
            <summary>
            About the package.
            </summary>
        </member>
        <member name="M:Orchid.Generic.About.#ctor">
            default private constructor --> hides the class in dynamo
        </member>
        <member name="M:Orchid.Generic.About.Orchid">
            <summary>
            About the package.
            </summary>
            <returns name="watch">Add a watch node!</returns>
        </member>
    </members>
</doc>
